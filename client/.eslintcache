[{"/Users/likhitha/Documents/cms/client/src/index.js":"1","/Users/likhitha/Documents/cms/client/src/App.js":"2","/Users/likhitha/Documents/cms/client/src/serviceWorker.js":"3","/Users/likhitha/Documents/cms/client/src/store.js":"4","/Users/likhitha/Documents/cms/client/src/utils/setAuthToken.js":"5","/Users/likhitha/Documents/cms/client/src/actions/authActions.js":"6","/Users/likhitha/Documents/cms/client/src/components/private-route/PrivateRoute.js":"7","/Users/likhitha/Documents/cms/client/src/components/layout/Navbar.js":"8","/Users/likhitha/Documents/cms/client/src/components/auth/Register.js":"9","/Users/likhitha/Documents/cms/client/src/components/auth/Login.js":"10","/Users/likhitha/Documents/cms/client/src/components/dashboard/Map1.js":"11","/Users/likhitha/Documents/cms/client/src/components/dashboard/Dashboard.js":"12","/Users/likhitha/Documents/cms/client/src/components/dashboard/services.js":"13","/Users/likhitha/Documents/cms/client/src/actions/types.js":"14","/Users/likhitha/Documents/cms/client/src/components/dashboard/Tabs.js":"15","/Users/likhitha/Documents/cms/client/src/components/dashboard/DisplayEntries.js":"16","/Users/likhitha/Documents/cms/client/src/reducers/index.js":"17","/Users/likhitha/Documents/cms/client/src/components/dashboard/Tab.js":"18","/Users/likhitha/Documents/cms/client/src/reducers/errorReducer.js":"19","/Users/likhitha/Documents/cms/client/src/reducers/authReducer.js":"20","/Users/likhitha/Documents/cms/client/src/components/dashboard/FloorMap.js":"21","/Users/likhitha/Documents/cms/client/src/components/dashboard/HomePage.jsx":"22","/Users/likhitha/Documents/cms/client/src/components/dashboard/EditFloormap.js":"23","/Users/likhitha/Documents/cms/client/src/components/dashboard/history.js":"24","/Users/likhitha/Documents/cms/client/src/components/dashboard/slickSliderStyle1.js":"25","/Users/likhitha/Documents/cms/client/src/components/dashboard/SlickSliderStyle1.js":"26","/Users/likhitha/Documents/cms/client/src/components/dashboard/ModalTemplate.js":"27","/Users/likhitha/Documents/cms/client/src/components/dashboard/ViewBuilding.js":"28","/Users/likhitha/Documents/cms/client/src/components/dashboard/LayerControl2.js":"29","/Users/likhitha/Documents/cms/client/src/components/dashboard/EditBuilding.js":"30"},{"size":451,"mtime":1606829565698,"results":"31","hashOfConfig":"32"},{"size":3163,"mtime":1616361334413,"results":"33","hashOfConfig":"32"},{"size":4948,"mtime":1606829565699,"results":"34","hashOfConfig":"32"},{"size":447,"mtime":1606829565699,"results":"35","hashOfConfig":"32"},{"size":331,"mtime":1606829565700,"results":"36","hashOfConfig":"32"},{"size":1650,"mtime":1606829565695,"results":"37","hashOfConfig":"32"},{"size":590,"mtime":1606829565698,"results":"38","hashOfConfig":"32"},{"size":1017,"mtime":1608682376758,"results":"39","hashOfConfig":"32"},{"size":5763,"mtime":1607606053792,"results":"40","hashOfConfig":"32"},{"size":5071,"mtime":1614415520699,"results":"41","hashOfConfig":"32"},{"size":7150,"mtime":1616361804003,"results":"42","hashOfConfig":"32"},{"size":1722,"mtime":1608679565728,"results":"43","hashOfConfig":"32"},{"size":955,"mtime":1615807011507,"results":"44","hashOfConfig":"32"},{"size":136,"mtime":1606829565696,"results":"45","hashOfConfig":"32"},{"size":1190,"mtime":1608158026388,"results":"46","hashOfConfig":"32"},{"size":5264,"mtime":1608157034026,"results":"47","hashOfConfig":"32"},{"size":207,"mtime":1606829565699,"results":"48","hashOfConfig":"32"},{"size":682,"mtime":1607637539256,"results":"49","hashOfConfig":"32"},{"size":248,"mtime":1607375463843,"results":"50","hashOfConfig":"32"},{"size":702,"mtime":1607375421322,"results":"51","hashOfConfig":"32"},{"size":7066,"mtime":1613423317034,"results":"52","hashOfConfig":"32"},{"size":1557,"mtime":1608192790318,"results":"53","hashOfConfig":"54"},{"size":32176,"mtime":1616474339893,"results":"55","hashOfConfig":"32"},{"size":84,"mtime":1608888543686,"results":"56","hashOfConfig":"32"},{"size":1616,"mtime":1609282261354,"results":"57","hashOfConfig":"32"},{"size":1616,"mtime":1609282261354,"results":"58","hashOfConfig":"32"},{"size":2072,"mtime":1613637516765,"results":"59","hashOfConfig":"32"},{"size":21615,"mtime":1616496908780,"results":"60","hashOfConfig":"32"},{"size":9010,"mtime":1616336860879,"results":"61","hashOfConfig":"32"},{"size":25213,"mtime":1616537821195,"results":"62","hashOfConfig":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"cee0ce",{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"65"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"65"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"65"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"65"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"65"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"65"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1aaztzc",{"filePath":"114","messages":"115","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"65"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"119","messages":"120","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"65"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"65"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"65"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/likhitha/Documents/cms/client/src/index.js",[],["134","135"],"/Users/likhitha/Documents/cms/client/src/App.js",["136"],"import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\n\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport Navbar from \"./components/layout/Navbar\";\n//import Landing from \"./components/layout/Landing\";\nimport Register from \"./components/auth/Register\";\nimport Login from \"./components/auth/Login\";\nimport ModalTemplate from \"./components/dashboard/ModalTemplate\"\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\n//import Dashboard from \"./components/dashboard/DashboardCms/index\";\n//import MapView from \"./components/dashboard/MapView\";\n\n\n\nimport \"./App.css\";\nimport Map1 from \"./components/dashboard/Map1\";\n//import FloorMap from \"./components/dashboard/FloorMap\";\nimport FloorMap from \"./components/dashboard/FloorMap\";\nimport ViewBuilding from \"./components/dashboard/ViewBuilding\";\nimport EditBuilding from \"./components/dashboard/EditBuilding\";\n\nimport EditFloormap from \"./components/dashboard/EditFloormap\";\n//import Routing from \"./components/dashboard/Routing\";\n\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n  // Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Navbar />\n            <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n\n            <Route path=\"/FloorMap/:refnum\" component={FloorMap} /> \n            {/* <Route exact path=\"/EditFloormap/:refnum\" component={EditFloormap} /> */}\n            <Route exact path=\"/modaltemplate\" component={ModalTemplate} />\n            <Route exact path=\"/ViewBuilding/:refnum\" component={ViewBuilding} />\n            <Route exact path=\"/EditBuilding/:refnum\" component={EditBuilding} />\n\n\n            {/* <Route exact path=\"/routing\" component={Routing}/> */}\n            {/* <Route path=\"/MazeMap\" component={MazeMapWrapper} /> */}\n\n            <Switch>\n              {/* <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />  */}\n              <PrivateRoute exact path=\"/Map1\" component={Map1} /> \n              {/* <PrivateRoute exact path=\"/ViewBuilding\" component={ViewBuilding} /> */}\n              {/* <PrivateRoute exact path=\"/EditFloormap\" component={EditFloormap} /> */}\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;\n","/Users/likhitha/Documents/cms/client/src/serviceWorker.js",[],"/Users/likhitha/Documents/cms/client/src/store.js",[],"/Users/likhitha/Documents/cms/client/src/utils/setAuthToken.js",[],"/Users/likhitha/Documents/cms/client/src/actions/authActions.js",[],"/Users/likhitha/Documents/cms/client/src/components/private-route/PrivateRoute.js",[],"/Users/likhitha/Documents/cms/client/src/components/layout/Navbar.js",[],"/Users/likhitha/Documents/cms/client/src/components/auth/Register.js",[],"/Users/likhitha/Documents/cms/client/src/components/auth/Login.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Map1.js",["137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170"],"import React, { useEffect, useState } from \"react\";\n\n\n\nimport DisplayEntries from \"./DisplayEntries\"\nimport service from \"./services.js\";\nimport { CardBody, Card } from 'reactstrap';\nimport L from 'leaflet';\n\nimport { Polygon, Popup, Rectangle, Marker, TileLayer } from \"react-leaflet\";\nimport { Link } from \"react-router-dom\";\nimport { Table, Container, Col, Row, PopUp, Button } from \"reactstrap\";\nimport { Map } from \"react-leaflet\";\n\nimport { Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\nimport Tabs from \"./Tabs\";\nimport PropTypes from \"prop-types\";\nimport DashBoard from \"./Dashboard\";\n//import icon from \"./icon_building.png\";\nimport { Icon, marker } from \"leaflet\";\nimport { SelectionState } from \"@devexpress/dx-react-grid\";\n//import EditFloormap from \"./EditFloormap\";\nimport history from \"./history\"\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { divIcon } from \"leaflet\";\nimport '../../../node_modules/leaflet/dist/leaflet.css';\nimport icon from '../../../node_modules/leaflet/dist/images/marker-icon.png';\nimport iconShadow from '../../../node_modules/leaflet/dist/images/marker-shadow.png';\n\n\n\nconst Map1 = () => {\n\n\n\n  const [markers, setMarkers] = useState([])\n  const [newLat, setNewLat] = useState('')\n  const [newLng, setNewLng] = useState('')\n  const [newName, setNewName] = useState('')\n\n\n\n  useEffect(() => {\n    debugger;\n    service\n      .getAll()\n      .then(allEntries => {\n        console.log(\"returning\", allEntries)\n        debugger;\n        setMarkers(allEntries)\n      })\n  }, [])\n\n\n\n  const changeHandler = (event) => setNewLat(event.target.value)\n  const changeHandler1 = (event) => setNewLng(event.target.value)\n  const changeHandler2 = (event) => setNewName(event.target.value)\n  //const changeHandlerFilter = (event) => setNewFilter(event.target.value)\n\n\n\n  const position = [60.21749913, 24.938379];\n  const position1 = [60.21749913, 24.806496774]\n  console.log(position)\n\n\n\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  //const [searchResults, setSearchResults] = React.useState([]);\n  const handleChange = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  useEffect(() => {\n    const results = markers.filter(marker =>\n      marker.description.toLowerCase().includes(searchTerm.toLocaleLowerCase())\n    );\n    setMarkers(results);\n\n\n    console.log(results)\n  }, [searchTerm]);\n\n  // this.setState({\n  //   searchValue: search,\n  //   filteredPeople: this.state.people.filter(\n  //    item =>\n  //     (item.lastname && item.lastname.toLowerCase().includes(search)) ||\n  //     (item.name && item.name.toLowerCase().includes(search))\n  //   )\n  //  });\n  let DefaultIcon = L.icon({\n    iconUrl: icon,\n    shadowUrl: iconShadow\n  });\n\n  const handleDelete = (id, nameToBeDeleted, e) => {\n    if (window.confirm(`Delete ${nameToBeDeleted}?`)) {\n      service\n        .deletion(id)\n        .then(() => {\n          setMarkers(markers.filter(marker => marker.id !== id));\n          window.confirm(`Deleted ${nameToBeDeleted}`);\n        })\n        .catch(() => {\n          window.confirm(`Error: ${nameToBeDeleted} already deleted`, 'red');\n          setMarkers(markers.filter((marker) => marker.id !== id));\n        });\n    }\n  }\n\n  const handleUpdate = (id, nameToBeDeleted, e) => {\n\n  }\n\n  function renderPopup(item) {\n\n    return (\n\n      <Popup\n\n      >\n\n        <Link to={item.link} >{item.description}</Link>\n      </Popup>\n\n    );\n  }\n\n\n\n  const handleClick = (e) => {\n    e.latlng()\n  }\n\n\n\n\n\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const togglePopup = () => {\n    setIsOpen(!isOpen);\n  }\n  const iconMarkup = renderToStaticMarkup(\n    <i class=\"fas fa-building\" />\n\n  );\n  const customMarkerIcon = divIcon({\n    html: iconMarkup\n  });\n  return (\n\n\n\n    <div id=\"container\">\n      <caption>List of Buildings</caption>\n      \n      <Card style={{ margin: \".1%\" }}>\n        <CardBody>\n\n          <Table className=\"table\" items={markers}>\n\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Address</th>\n                <th scope=\"col\">Delete</th>\n                <th scope=\"col\">Edit</th>\n\n              </tr>\n            </thead>\n            <tbody>\n\n              {\n\n                markers.map((item, index) => (\n\n                  <tr key={index}>\n                    <th>{item.id} </th>\n                    <td> <Link to={item.link} className=\"nav-link font-weight-bold \">{item.description} </Link></td>\n                    <td >{item.street}   {item.Apartment} {item.doornum} {item.region} {item.country}</td>\n                    <td><button type=\"button\"\n                      onClick={() => handleDelete(item.id, item.description)}\n                    > Delete </button></td>\n\n                    <td><Link to=\"/EditBuilding/1\" className=\"nav-link font-weight-bold \">edit</Link></td>\n\n\n                    {/* <Link onClick={(e) => handleDelete(item.refnum, item.description, e)} className=\"nav-link font-weight-bold \">Delete</Link> */}\n\n                  </tr>\n                ))\n              }\n\n\n\n            </tbody>\n          </Table>\n\n        </CardBody>\n      </Card>\n     \n      \n        \n\n\n\n                \n               \n\n     \n     \n     \n      \n      <Card style={{ margin: \".1%\" }}>\n        <CardBody>\n        <Map\n                                            style={ { height: \"500px\", width: \"100%\"}}\n                                            \n                                            center={[60.21679719545689, 24.810291821854594]} zoom={12} maxZoom={100}\n                                            \n                                        >\n    \n                                                <TileLayer\n                                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            />\n                            \n                                {\n                                    markers.map((item, index) => (\n                                       \n                                        <Marker   \n                                                position={[item.latitude,item.longitude]}\n                                                onMouseOver={(e) => {\n                                                    e.target.openPopup();\n                                                  }}\n                                                  onMouseOut={(e) => {\n                                                    e.target.closePopup();\n                                                  }}\n                                                >\n                                                          {renderPopup(item) }\n                                                </Marker>\n                                    ))\n                                }\n\n      \n    \n    \n                                     </Map>\n        </CardBody>\n        </Card>\n        \n       \n\n    </div>\n  );\n}\n\n\n\n\nexport default Map1\n\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/Dashboard.js",["171","172","173","174"],"import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\n//import MapView from \"./MapView.js\";\nimport Map1 from \"./Map1.js\";\nimport { Link } from 'react-router-dom';\n//import {MapContainer,  Marker, Popup,  TileLayer } from \"react-leaflet\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n//import { useHistory } from 'react-router-dom';\n\nclass Dashboard extends Component {\n  onLogoutClick = e => {\n    e.preventDefault();\n    this.props.logoutUser();\n  };\n  \n  \n  render() {\n    const { user } = this.props.auth;\n\n    return (\n      <div >\n        {/* <span className=\"myClass\" style={{float : 'left', paddingRight : '5px'}} > </span> */}\n        {/* style=\"font-size: 20px; color:#4a54f1; text-align:center; padding-top:100px;\" */}\n        <p style={{fontSize: '20px', color: 'white'}}> Hi <i><b>{user.name}</b></i></p>\n               \n                {/* <MapView /> */}\n            <div>\n            \n            <button\n              style={{\n                width: \"150px\",\n                borderRadius: \"3px\",\n                letterSpacing: \"1.5px\",\n                marginTop: \"1rem\"\n                \n              }}\n              onClick={this.onLogoutClick}\n              className=\"btn btn-primary float-left\"\n            >\n              Logout\n            </button>\n            </div>\n          </div>\n        \n        \n    );\n  }\n}\n\nDashboard.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  { logoutUser }\n)(Dashboard);\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/services.js",["175"],"import axios from \"axios\"\n\nconst baseUrl = \"http://localhost:3010/data\"\n\n\nconst getAll = () =>{\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst getBuilding = bid => {\n    const request = axios.get(baseUrl + `/${bid}` )\n    return request.then(response => [response.data])\n}\n\n\nconst update = newEntry =>{\n    const request = axios.post(baseUrl, newEntry)\n    return request.then(response => response.data)\n}\n\nconst updateBuilding = (bid, entry) => {\n    const request = axios.put(baseUrl + `/${bid}`,entry)\n\n    return request.then(response => response.data)\n}\n\n\nconst deletion = entryId =>{\n    const request = axios.delete(baseUrl + `/${entryId}`)\n    return request.then(response => response.data)\n}\n\nconst deleteAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n\n}\n\nexport default {getAll, update, deletion, deleteAll, getBuilding, updateBuilding}","/Users/likhitha/Documents/cms/client/src/actions/types.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Tabs.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/DisplayEntries.js",["176","177","178","179","180","181","182","183","184","185","186"],"/*import React from \"react\"\n\nconst DisplayEntry = ({ name }) => {\n    return(\n        <div>\n            {name} \n        </div>\n    )\n}\n\nconst DisplayEntries = ({ names, regVal }) => {\n    const regExp = new RegExp(regVal, \"i\")\n    const filteredArray = names.filter((entry) => regExp.test(entry.name))\n    const namesArray = filteredArray.map((entry) => <DisplayEntry key={entry.id} name={entry.name} />)\n    return(\n    <div>\n        {namesArray}\n    </div>\n    )\n}\n\nexport default DisplayEntries*/\n\nimport React, {useState, useEffect} from \"react\"\nimport service from \"./services.js\"\nimport {Row, Col, Table, Card, CardBody} from 'reactstrap';\nimport { Grid,  TableHeaderRow, TableEditColumn, TableInlineCellEditing } from '@devexpress/dx-react-grid-bootstrap4';\nimport { Link } from \"react-router-dom\";\nconst getRowId = row => row.id;\n\nconst DisplayEntry = ({ name, street, apartment,doorno, region, country, id }) => {\n    const [ name1, setName ] = useState(name)\n    const [ street1, setStreet] = useState(street)\n    const [ apartment1, setApartment] = useState(apartment)\n    const [ doorno1, setDoorno] = useState(doorno)\n    const [ region1, setRegion] = useState(region)\n    const [ country1, setCountry] = useState(country)\n  //  const [ newNumber, setNumber ] = useState(number)\n    const [ buttonVal, setButtonVal ] = useState(\"\")\n    const [markers, setMarkers] = useState([])\n   \n\n      useEffect(()=>{\n        service\n        .getAll()\n        .then(latlng =>{\n          console.log(\"returning\", latlng)\n          setMarkers(latlng)\n        })\n      },[])\n\n    // const [columns] = useState([\n    //     {\n    //         title: \"Name\",\n    //         name: \"name\",\n    //     },\n    //     {\n    //         title: \"Lat\",\n    //         name: \"lat\",\n    //         sortable: true,\n    //     },\n    //     {\n    //         title: \"Lng\",\n    //         name: \"lng\",\n    //         sortable: true,\n    //     },\n    // ]);\n    // const [rows, setRows] = useState([\n    //     {newName},\n    //     {newLat},\n    //     {newLng}\n        \n    // ]);\n    // const [editingCells, setEditingCells] = useState([]);\n\n    // const deleteHandler = (id) =>{\n    //     const handler = () =>{\n    //         if(window.confirm(`Do you really want to delete ${name}\\'s Building details?`)){\n    //             service.deletion(id)\n    //             .then(response => {\n                    \n    //                 setName(\"\")\n    //                 setStreet(\"\")\n    //                 setApartment(\"\")\n    //               setDoorno(\"\")\n    //               setRegion(\"\")\n    //               setCountry(\"\")\n    //             setButtonVal(\"\")\n    //             })\n    //         }\n    //     }\n    //     return handler\n    // }\n    const deleteHandler = (id) => {\n        const handler = () =>{\n                   if(window.confirm(`Do you really want to delete ${name}\\'s Building details?`)){\n  \n        service\n        .deletion(id)\n          .then(response => {\n            setName(\"\")\n                    setStreet(\"\")\n                    setApartment(\"\")\n                  setDoorno(\"\")\n                  setRegion(\"\")\n                   setCountry(\"\")\n                setButtonVal(\"\")\n          })\n        }\n    }\n    return handler\n          \n      };\n\n    useEffect(()=>{\n        setButtonVal(<button onClick={deleteHandler(id)}>delete</button>)\n    },\n    [])\n\n    return(\n       \n        <div>\n            <Table hover className=\"table\" items={markers}>\n   <thead>\n      <tr>\n         <th scope=\"col\">#</th>\n         <th scope=\"col\">Name</th>\n         <th scope=\"col\">Address</th>\n         <th scope=\"col\">Delete</th>\n         \n      </tr>\n   </thead>\n   <tbody>\n     \n                                {\n                                    markers.map((item, index) => (\n                                       \n                                        <tr key={index}>\n                                            <td >{item.id} </td>\n                                           <td> <Link   to={item.link} className=\"nav-link font-weight-bold \">{name1} </Link></td>\n                                            <td >{street1}   {apartment1} {doorno1} {region1} {country1}</td>\n                                            {buttonVal} \n\n                                        </tr>\n                                    ))\n                                }\n\n\n   </tbody>\n   </Table>\n            {/* {newName}\n            {newLat}\n            {newLng}\n            {buttonVal} */}\n           \n\n            {/* <Table className=\"table\" items={{DisplayEntries}}>   \n      <thead>\n    \n    <th>Name</th>\n    <th>Lat</th>\n    <th>Lng</th>\n  \n          </thead>          \n \n<tbody>\n \n  <tr>\n    \n  </tr>\n  </tbody>\n  </Table> */}\n\n        </div> \n    )\n}\n\nconst DisplayEntries = ({ names, regVal }) => {\n    const regExp = new RegExp(regVal, \"i\")\n    const filteredArray = names.filter((entry) => regExp.test(entry.name))\n    const namesArray = filteredArray.map((entry) => <DisplayEntry key={entry.id} name={entry.description} street={entry.street} apartment={entry.Apartment} doorno={entry.doornum} region={entry.region} country={entry.country} id={entry.id} />)\n    \n    return(\n    <div>\n        {namesArray}\n    </div>\n    )\n}\n\nexport default DisplayEntries","/Users/likhitha/Documents/cms/client/src/reducers/index.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Tab.js",[],"/Users/likhitha/Documents/cms/client/src/reducers/errorReducer.js",[],"/Users/likhitha/Documents/cms/client/src/reducers/authReducer.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/FloorMap.js",["187","188","189","190","191","192","193","194","195","196"],"/* eslint-disable jsx-a11y/anchor-is-valid */\n //import React from 'react';\n //import { LayersControl as BaseLayersControl } from 'react-leaflet';\n import { CardBody,Card,ButtonGroup, Button,ButtonToolbar, Label } from 'reactstrap';\n import React, { useEffect, useState } from \"react\";\n \n import {Tooltip, Polygon, Popup, Rectangle, Marker, TileLayer , Map,LayersControl, LayerGroup} from 'react-leaflet';\nimport service from './services';\nimport Map1 from './Map1';\nimport { Link } from \"react-router-dom\";\nimport SlickSliderStyle1 from \"./SlickSliderStyle1\";\n\n\nconst FloorMap  = () => {\n  \n    \n\n    const [markers, setMarkers] = useState([])\n   \n\n      useEffect(()=>{\n        service\n        .getAll()\n        .then(latlng =>{\n          console.log(\"returning\", latlng)\n          setMarkers(latlng)\n        })\n      },[])\n\n\n\n     const refno=window.location.pathname.replace('/FloorMap/','');\n      \n     const handleClick = (e) => {\n       console.log(e.target.value)\n      debugger;\n    }\n\n  return (\n\n    <Card >\n    <CardBody>\n\n<div>\n\n\n{/* <div> <Link to=\"/Map1\" className=\"btn btn-primary\"><p class=\"ri-home-4-line\"> Home </p></Link></div> */}\n\n\n\n\n\n                        {markers.filter(item => item.id===refno).map(filteredName => (\n                            <div>\n                              \n                             {/* <h1 className=\"display-7\">#{filteredName.id}-{filteredName.description}</h1> */}\n                             <h1 className=\"display-9\">{filteredName.street}   {filteredName.Apartment} {filteredName.doornum} {filteredName.region} {filteredName.country}</h1>\n                             {/* <ButtonToolbar className=\"mt-3\">\n                             <ButtonGroup className=\"mr-2\">\n                                 {filteredName.floors.map((item2, index) => (\n                                       \n                                      <Button color=\"secondary\" data-key={index}\n                                      \n                                      onClick={handleClick}> {item2.description}</Button>\n\n  \n                                   ))}\n                                   </ButtonGroup></ButtonToolbar> */}\n                             </div>\n\n\n\n\n                        ))}\n                        \n                        \n                        </div>\n                        <div>\n                        \n                        {markers.filter(item => item.id===refno).map(filteredName => (\n                            <div>\n\n                         <Map\n                                    style={ { height: \"500px\", width: \"100%\"}}\n                                    \n                                    center={[filteredName.latitude, filteredName.longitude]} zoom={16} maxZoom={17}\n                                    \n                                >\n                                  \n\n                                        {/* <TileLayer\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    /> */}\n\n<LayersControl position=\"topright\">\n<LayersControl.BaseLayer checked name={filteredName.name}>\n  \n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {/* {filteredName.floors.map((floor, index) => (\n        <LayersControl.Overlay checked name={floor.description}>\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color}\n                             />\n        </LayerGroup>\n        </LayersControl.Overlay>\n      \n      ))} */}\n       \n         {/* <Polygon positions={floor.boundaries} color={floor.color}\n                             />  */}\n      </LayersControl.BaseLayer>\n      <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {filteredName.floors.map((floor, index) => (\n        <LayersControl.BaseLayer checked name={floor.description}>\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color}\n                             />\n{\n  floor.blocks.map((block, ind) => (\n    <Polygon positions={block.bounds}>\n          {/* <Tooltip sticky>        {block.text}</Tooltip> */}\n      {/* <Popup direction=\"center\" >\n        {block.text}\n      </Popup> */\n      \n      <Marker position={block.marker}>\n              <Popup>\n                    <span>{block.text}</span>\n                    {/* <div className=\"iq-card-body\" id={'post-slider'}>\n                              <SlickSliderStyle1 slidesToShow={2}>\n                              <li className=\"d-flex align-items-center\">\n                                {block.images.map((img, idx) => (\n                                  <div>\n                                  <div className=\"post-image\">\n                                  <a href=\"#\">\n                                      <img src={img} alt=\"post-image\" className=\"img-fluid rounded\" />\n                                  </a>\n                                  </div>\n                                  <div className=\"post-content pl-3\">\n\n                                  <div className=\"text-center d-flex align-items-center justify-content-between\">\n                                      \n                                  </div>\n                                  </div>\n                                  </div>\n                                ))}\n                                   \n                                 </li>\n                                 </SlickSliderStyle1>\n                                 </div> */}\n              </Popup>\n              \n      </Marker>\n\n      }\n    </Polygon> \n                             \n                             \n\n  ))\n}\n\n        </LayerGroup>\n        </LayersControl.BaseLayer>\n      \n      ))}\n\n\n     \n      \n      \n      \n      \n{/* {filteredName.floors.map((floor, index) => (\n      \n))} */}\n      \n      </LayersControl>\n\n                                    {/* {filteredName.floors.map((floor, index) => (\n                            //           <Polygon positions={floor.boundaries} color={floor.color}\n                            //  /> \n                            <LayersControl.Overlay name={floor.description} id={floor.floorno}>\n                            <LayerGroup>\n                            <Polygon positions={floor.boundaries} color={floor.color}\n                              /> \n                            </LayerGroup>\n                          </LayersControl.Overlay>\n\n                                    ))} */}\n\n\n\n                             </Map> \n                             </div>\n                        ))\n                        }\n                        </div>\n    </CardBody>\n    </Card>  \n\n  );\n}\n\nexport default FloorMap;\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/HomePage.jsx",["197","198","199","200","201","202","203","204","205","206","207","208","209","210"],"/Users/likhitha/Documents/cms/client/src/components/dashboard/EditFloormap.js",["211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256"],"import { CardBody,Card,ButtonGroup, ButtonToolbar,Form,FormGroup,Label,Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\nimport React, { useRef, useEffect, useState, useMap} from \"react\";\nimport { Col, Row } from \"reactstrap\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport \"./assets/leaflet.css\"\nimport \"./assets/leaflet.draw.css\"\nimport {  Map, TileLayer, FeatureGroup, Marker,Polyline, Popup, Polygon, Tooltip, Rectangle,  LayersControl, LayerGroup,useMapEvents,useLeaflet} from 'react-leaflet';\nimport service from './services';\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { popup } from 'leaflet';\nimport { text } from 'body-parser';\nimport { divIcon } from 'leaflet';\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\n\nconst useStyles = makeStyles(theme => ({\n  map: ({\n      height: `calc(90vh - 90px)`,\n      width: '60%',\n      zIndex: 0\n  }),\n  buttonWrapper: {\n      zIndex: 1,\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      marginLeft: \"30%\",\n      marginBottom: \"8%\",\n      transform: \"translateX(-50%)\",\n  },\n  buttonStyle: {\n    margin:\"10px\",\n    \n  },\n  headerWrapper: {\n      zIndex: 1,\n      marginLeft: theme.spacing(3),\n      marginTop: theme.spacing(1),\n  }\n}));\n\nconst modalStyles = {\n  width   :    500,\n  height  :    500\n}\n\n\nconst EditFloorMap = (props) => \n{\n  const [addFloor, setAddFloor] = useState(false);\n  //const mapGlobal = useMap();\n  const classes = useStyles(props)\n  const editRef = useRef();\n  const [markers, setMarkers] = useState([])\n  const [newPosition, setNewPosition] = useState([])\n  //const [markers1, setMarkers1] = useState([]);\n  const [position, setPosition] = useState([]);\n  const [mapLayers, setMapLayers] = useState([]);\n  const [ newDesc, setNewDesc ] = useState('')\n  const [isEdit, setIsEdit] = useState('')\n  const [floors, setFloors ] = useState('')\n  const [blocks, setBlocks] = useState('')\n  const [newText, setNewText] = useState('')\n  const [drawing, setDrawing] = useState(false);\n  const [showDrawBlock, setShowDrawBlock] = useState(false);\n  const [polyFlag, setPolyFlag] = useState('');\n  const [activeFloor, setActiveFloor] = useState('')\n  const [buildingId, setBuildingId] =  useState('')\n  //const editRef = useRef();\n  //const [map, setMap] = useState(null);\n  const [editBoundaries, setEditBoundaries] = useState(false);\n  const [editBlock, setEditBlock] = useState(false);\n  const [blockDescription,setBlockDescription] = useState(false);\n  const [deleteFloor, setDeleteFloor] = useState(false);\n  const [blockName, setBlockName] = useState('')\n  const [blockDesc, setBlockDesc] = useState('')\n  const [icon, setIcon] = useState('')\n  const [activeLayer, setActiveLayer] = useState('')\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n  //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  const leaflet = useLeaflet();\n  const editLayerRef = React.useRef();\n  let drawControlRef = React.useRef();\n  let {map} = leaflet;\n  \n \n  \n\n  const updateFloor = {\n\n    floorno: 0,\n    description: \"newDesc\",\n    color: '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6),\n    blocks: [],\n    boundaries: []\n  }\n  \n  function toggle() {\n    setAddFloor(!addFloor);\n  }\n  function toggleBlock() {\n    setEditBlock(!editBlock);\n  }\n  \n  function toggleBoundaries() {\n    setEditBoundaries(!editBoundaries);\n  }\n\n  function toggleBlockDescription() {\n    setBlockDescription(!blockDescription);\n  }\n\n  function toggleDeleteFloor() {\n    setDeleteFloor(!deleteFloor);\n  }\n\n  const onChangeName = e => {\n    e.preventDefault();\n    setBlockName(e.target.value);\n    \n  };\n  const onChangeDesc = e => {\n    e.preventDefault();\n    \n    setBlockDesc(e.target.value);\n    \n\n  };\n  const onChangeIcon = e => {\n    e.preventDefault();\n    \n    setIcon(e.target.value);\n\n  };\n  //const polygonCenter = markers[0].floors[0].blocks[0]._bounds.getCenter();\n\n  // const onSubmit = e => {\n  //   e.preventDefault();\n\n  //   const newUser = {\n  //     name: blockName,\n  //     description: blockDesc,\n  //     icon: icon\n      \n  //   };\n  // }\n  // function submitHandler(e) {\n  //   e.preventDefault();\n  //   setBlockName(e.target.value);\n  //   setBlockDesc(e.target.value);\n  //   setIcon(e.target.value);\n  // }\n\n  function GlobalMapComponent() {\n    const mapGlobal = useMap()\n    mapGlobal.on( 'baselayerchange', function (e) {\n      console.log('Layer name -> ', e.name);\n      //console.log('Layer URL -> ', e.layer.options.url);\n      //console.log('Layer attribution -> ', e.layer.options.attribution);\n  });\n    console.log('map center:', mapGlobal.getCenter())\n    return null\n  }\n   \n  \nconst handleEditFloor = (e) => {\n  setBuildingId(e.target.value)\n  setDrawing(true)\n  const { layerType, layer } = e;\n  debugger;\n  //  if (layerType === \"polygon\") {\n  //     const { _leaflet_id } = layer;\n  //     setMapLayers((layers) => [\n  //       ...layers,\n  //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n  //     // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n  //     ]);\n  //   }\n    if (buildingId===markers[0].floors[0].boundaryLeaflet_id){\n    if (drawing) {\n            //editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n           editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n      \n        } else {\n          editRef.current.leafletElement._toolbars.edit._modes.edit.handler.save() \n           editRef.current.leafletElement._toolbars.edit._modes.edit.handler.disable()\n        }\n      }\n//     console.log(layer)\n// console.log(mapLayers)\n//         e.layer.on('click', () => {\n//           debugger;\n//             editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n//         })\n//         e.layer.on('contextmenu', () => {\n//             //do some contextmenu action here\n//         })\n//         e.layer.bindTooltip(\"Text\", \n//             {\n//               className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n//               sticky: true,\n//               direction: 'right'\n//             }\n//         );\n}\n\nconst handleReset = (e) => {\n  debugger;\n  \n  \n  for (var i = 0; i < markers[0].floors.length; i++) { \n    if(markers[0].floors[i].description===activeFloor.name){\n    \n      \n        markers[0].floors[i].boundaries= markers[0].floors[i].boundaries_backup;\n        markers[0].floors[i].boundaries_backup = [];\n        break;\n}\n}\n}\n// const handleFloorReset = (e) => {\n//   debugger;\n//   if(polyFlag==='B')\n//   for (var i = 0; i < markers[0].floors.length; i++) { \n//     if(markers[0].floors[i].description===activeFloor.name){\n    \n      \n//         markers[0].floors[i].blocks[i].bounds= markers[0].floors[i].blocks[i].bounds_backup;\n//         markers[0].floors[i].blocks[i].bounds_backup = [];\n//         break;\n// }\n// }\n// }\nconst handleBlock = (e) => {\n  setPolyFlag('L');\n  debugger;\n  for (var i = 0; i < markers[0].floors.length; i++) { \n    if(markers[0].floors[i].description===activeFloor.name){\n    \n      if(markers[0].floors[i].boundaries.length>0) {\n        \n\n\n        markers[0].floors[i].blocks[i].bound_backup = markers[0].floors[i].blocks[i].bounds;\n        markers[0].floors[i].blocks[i].bounds = [];\n        \n      }\nbreak;\n}\n}\n//toggleBlockDescription();\n//toggleBlockDescription();\nif (!drawing) {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n} else {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n}\n\nsetDrawing(!drawing)\n}\n\nconst handleBoundaries = (e) => {\n  debugger;\n  for (var i = 0; i < markers[0].floors.length; i++) { \n    if(markers[0].floors[i].description===activeFloor.name){\n    \n      if(markers[0].floors[i].boundaries.length>0) {\n\n        markers[0].floors[i].boundaries_backup = markers[0].floors[i].boundaries;\n        markers[0].floors[i].boundaries = [];\n        }\nbreak;\n}\n}\nif (!drawing) {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n} else {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n}\n\nsetDrawing(!drawing)\n\n}\n\nconst handleManageBoundaries = (e) => {\n    debugger;\n    console.log(activeFloor);\n    console.log(markers);\n    setPolyFlag('B')\n    for (var i = 0; i < markers[0].floors.length; i++) { \n      if(markers[0].floors[i].description===activeFloor.name){\n        debugger;\n        if(markers[0].floors[i].boundaries.length>0) {\n          debugger;\n          toggleBoundaries();\n         }\n\n     else {\n        const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n      setMapLayers((layers) => [\n        ...layers,\n    { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n      // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n      ]);\n    }\n    debugger;\n\n\n    if (!drawing) {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n  } else {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n  }\n\n  setDrawing(!drawing)\n\n      }\n      }\n}\n    \n  \n    \ndebugger;\n  }\n   \n  const handleClick = () => {\n\n        \n    //Edit this method to perform other actions\n\n    if (!drawing) {\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n    } else {\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n    }\n    setDrawing(!drawing)\n}\n\nconst handleAddFloor = () => {\n  debugger;\n}\n\n\nconst handleClickFloor = () => {\n  debugger;\n   service\n   .getBuilding(refno)\n   .then(building => {\n    console.log(\"returning\", building)\n   updateFloor.description=newDesc\n  building[0].floors.push(updateFloor)\n\n  setMarkers(building)\n\n  \n\n\n})\n}\n\nconst addBoundaries = (e) =>{\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    setMapLayers((layers) => [\n         ...layers,\n        {  latlngs: layer.getLatLngs()[0] },\n       ]);\n\n    // setMapLayers((layers) => [\n    //   ...layers,\n    //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    // ]);\n  }\n  setDrawing(false)\n\n  e.layer.on('click', () => {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  })\n  e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n  })\n  e.layer.bindTooltip(\"Text\", \n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visiblecg4',\n        sticky: true, \n        direction: 'right'\n      }\n  );\n\n\n\n}\n\nconst handleMap = (e) =>\n{\n  debugger;\n  const map = editRef.current.leafletElement._map;\n  \n\n    \n  \n  map.on(\"baselayerchange\", (activeFloor, activeLayer) => {\n//     //do whatever\ndebugger;\n\n    console.log(activeFloor);\n    \n    \n   \n   \n     setActiveFloor(activeFloor);\n     \nconsole.log(map);\n\n})\n}\n\n\n\n\nconst addPolygon = (e) =>{\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    setMapLayers((layers) => [\n         ...layers,\n        {  latlngs: layer.getLatLngs()[0] },\n       ]);\n\n    \n  }\n  setDrawing(false)\n\n  \n \n\n\n\n}\nfunction handleLayerClick(e) {\n  setSelectedLayerIndex(e.target.activeFloor._leaflet_id);\n}\n\n\n\nconst onBlockDrawn = (e) => {\n  debugger;\n  setPolyFlag('L')\n  \n  console.log(e);\n\n  const { layerType, layer } = e;\n  toggleBlockDescription();\n\n  for (var j = 0; j < markers[0].floors.length; j++) { \n      if(markers[0].floors[j].description===activeFloor.name){\n        \n        if(markers[0].floors[j].boundaries.length>0) {\n          debugger;\n          \n          \n\n          if (!drawing) {\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n        } else {\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n        }\n\n      \n        setDrawing(!drawing)\n          \n           \n           }\n          //   else {\n          //    debugger;\n          //    toggleBlock();\n          //  }\n          //  else{\n          //    <popup>Please add boundaries before adding blocks</popup>\n          //  }\n      }\n}\n  \n}\n\n\n\n\n\n\n\n\nconst onShapeDrawn = (e) => {\n  debugger;\n  \n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    for (var j = 0; j < markers[0].floors.length; j++) { \n      if(markers[0].floors[j].description===activeFloor.name){\n        if(polyFlag==='B'){\n          // if(markers[0].floors[j].boundaries.length>0) {\n          //         debugger;\n          \n          //       }\n          \n          //    else{\n               \n               markers[0].floors[j].boundaries=[];\n               debugger;\n               for (var k=0; k < layer._latlngs[0].length; k++ )\n               \n               {\n\n                 \n                 var point = [layer._latlngs[0][k].lat, layer._latlngs[0][k].lng];\n                markers[0].floors[j].boundaries.push(point);\n                \n                //markers[0].floors[j].boundaryCenter.push(boundCenter);\n               }\n               //markers[0].floors[j].boundaries= layer._latlngs\n               markers[0].floors[j].boundaryLeaflet_id = layer._leaflet_id;\n               markers[0].floors[j].boundaryCenter = [layer._bounds.getCenter()];\n             //}\n        }\n         else if(polyFlag==='L'){\n          var tempArray = [];\n          //var tempCenter = [];\n\n          for (var n=0; n < layer._latlngs[0].length; n++){\n            \n            var pointBlock = [layer._latlngs[0][n].lat, layer._latlngs[0][n].lng];\n            \n            tempArray.push(pointBlock);\n            //tempCenter.push(polygonCenter);\n          }\n          var polygonCenter = [layer._bounds.getCenter()];\n          var polygonId = layer._leaflet_id;\n         \n          debugger;\n\n          var blockObj = {id:polygonId,name:blockName,description:blockDesc,icon:icon,bounds:tempArray,center:polygonCenter}\n       \n          markers[0].floors[j].blocks.push(blockObj);\n          \n          blockObj = {};\n          debugger;\n\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n\n        }\n      //}\n          \n       \n    }\n  }\n    // setMapLayers((layers) => [\n    //   ...layers,\n    //   [  _leaflet_id,  layer.getLatLngs()[0] ],\n    //   // { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    //  //[ layer.getLatLngs()[0] ]  ,\n    // ]);\n\n    // \n   \n   \n    return (\n    \n      <div>\n        {markers.map((name) => (\n          <p>{name.description}{polyFlag}\n         <GlobalMapComponent />\n         </p>\n        ))}\n      </div>\n    )\n     \n  }\n  setDrawing(false)\n\n  e.layer.on('click', () => {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  })\n \n  e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n  })\n  e.layer.bindTooltip(\"Text\", \n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n        sticky: true,\n        direction: 'right'\n      }\n  );\n}\nfunction onMounted(ctl) {\n  drawControlRef.current = ctl;\n}\n\n\n\n  useEffect(()=>{\n    debugger;\n  \n    service\n    .getBuilding(refno)\n    .then(latlng =>{\n      //console.log(LayersControl.getActiveBaseLayer().name)\n      console.log(\"returning\", latlng)\n      debugger;\n      updateFloor.floorno = latlng[0].floors.length+1;\n      //setMarkers(...markers, latlng)\n      setMarkers(latlng)\n      debugger;\n    })\n    console.log(mapLayers)\n\n  },[])\n  \n  const refno=window.location.pathname.replace('/EditFloorMap/','');\n\n  const handleSaveFloor = (e) => {\n    e.preventDefault()\n    debugger;\n\n    service\n    .updateBuilding(markers[0].id, markers[0])\n    \n  }\n  const handleDeleteFloor = (e) => {\n    e.preventDefault()\n    debugger;\n\n  }\n\n  function handleLayerClick(e) {\n    setSelectedLayerIndex(e.target.markers.floors.blocks.id);\n  }\n\nconst _onCreate = (e) => {\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n\n    setMapLayers((layers) => [\n      ...layers,\n      { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    ]);\n  }\n};\n\n\nconst _onEdited = (e) => {\n  console.log(e);\n  const {\n    layers: { _layers },\n  } = e;\n\n  Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    setMapLayers((layers) =>\n      layers.map((l) =>\n        l.id === _leaflet_id\n          ? { ...l, latlngs: { ...editing.latlngs[0] } }\n          : l\n      )\n    );\n  });\n};\n\nconst _onDeleted = (e) => {\n  console.log(e);\n  const {\n    layers: { _layers },\n  } = e;\n\n  Object.values(_layers).map(({ _leaflet_id }) => {\n    setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n  });\n};\n\nconst changeHandlerDesc = (event) => setNewDesc(event.target.value)\nconst updateIsEdit = (e, value) => setIsEdit(value);\nconst changeHandlerText = (event) => setNewText(event.target.value)\n\n// const iconMarkup = renderToStaticMarkup(\n//   markers[0].floors[0].blocks[0].description\n//  );\n\n\n// const textDesc = divIcon  ({\n//   html: iconMarkup\n// });\n \n\n  return ( \n    \n          <div id=\"container\">\n                          \n<Card id=\"container\">\n  <CardBody>\n    \n                   {\n                     \n                   markers.filter(item => item.id===refno).map(filteredName => (\n                        <div>\n                          <Row className=\"iq-example-row\" id=\"container\">\n                        <Row className=\"row\">\n                        <Col className=\"col-4\">\n                                              \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Building Id</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.id} disabled/>\n                                              </FormGroup>\n                                             \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Building Name</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.description} />\n                                              </FormGroup>\n                                            \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Street</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.street} />\n                                              </FormGroup>\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Apartment</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.Apartment} />\n                                              </FormGroup>\n\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Doornum</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.doornum} />\n                                              </FormGroup>\n\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Region</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.region} />\n                                              </FormGroup>\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Country</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.country} />\n\n\n{/* {filteredName.floors.map((floor) => (\n  <div>\n  <h4>Description:</h4>\n  <input onChange={changeHandlerDesc}\n  value={floor.newDesc}\n  /><br/>\n   \n  <button onClick={handleClickFloor}>AddFloor</button>\n\n\n\n\n  {floor.blocks.map((block) => (\n    <div>\n      <h4>Text:</h4>\n      <input onChange={changeHandlerText}\n  value={block.newText}\n  /><br/>\n  <button onClick= {handleClick}>AddPolygon</button><br/>\n  \n\n    </div>\n    \n\n    \n  ))} \n  \n  </div>\n  \n\n))} */}\n\n\n\n\n                                              </FormGroup>\n                                              \n\n                                              </Col>\n                        <Col className=\"col-8\">\n                        <Col lg={4}>\n                        <Button className=\"btn btn-success\" color=\"primary\" onClick={() => toggle(\"addFloor\")}> AddFloor </Button>{' '}\n\n                        {/*Modal*/}\n                        <Modal isOpen={addFloor} toggle={() => toggle(\"addFloor\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggle(\"addFloor\")}>Add Floor</ModalHeader>\n                        <ModalBody>\n                        \n                          \n                          <p>Floor: {filteredName.floors.length+1}</p>\n                          \n                            <p>Enter Floor Description</p>\n                            <input type=\"text\" onChange={changeHandlerDesc} value={newDesc} \n                            lur={updateIsEdit}/>\n\n                        </ModalBody>\n                        <ModalFooter>\n\n                        <Button color=\"primary\" onClick={() => {\n                          toggle(\"addFloor\");\n                          // handleAddFloor(); \n                          handleClickFloor();\n                      \n                      }}>OK</Button>{' '}\n                        <Button color=\"secondary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n                        </ModalFooter>\n                        </Modal>\n           <Button className=\"btn btn-success\" color=\"primary\" onClick={handleSaveFloor}> SaveFloor </Button>\n           <Button className=\"btn btn-success\" color=\"primary\" onClick={() => toggleDeleteFloor(\"deleteFloor\")}> DeleteFloor </Button>{' '}\n\n{/*Modal*/}\n<Modal isOpen={deleteFloor} toggle={() => toggleDeleteFloor(\"deleteFloor\")} className=\"modal-sm\">\n                    <ModalHeader className=\"btn btn-primary\" toggle={() => toggleDeleteFloor(\"deleteFloor\")}>Delete Floor</ModalHeader>\n<ModalBody>\n                    <h5> Are you sure you want to delete the {activeFloor.name} floor?</h5>\n</ModalBody>\n<ModalFooter>\n\n<Button color=\"primary\" onClick={() => {\n  toggleDeleteFloor(\"deleteFloor\");\n  // handleAddFloor(); \n  handleDeleteFloor();\n\n}}>OK</Button>{' '}\n<Button color=\"secondary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n</ModalFooter>\n</Modal>\n                        \n            <Button className=\"btn btn-success\" color=\"primary\" onClick={handleReset}> reset </Button> \n\n                                                {/* < ModalTemplate /> */}\n                        {/* <Card className=\"card iq-mb-3\">\n                           \n                            <CardBody className=\"card-body\">\n                                <Button onClick={handleClickFloor} color={\"primary\"}>AddFloor</Button>\n                            </CardBody>\n                            \n                        </Card> */}\n                    </Col>\n                                              <Map \n                                              style={ { height: \"auto%\", width: \"auto\"}}\n            center={[filteredName.latitude, filteredName.longitude]} zoom={17.5} maxZoom={100}\n\n            zoomControl={true}  \n            className={classes.map} \n            ref={editRef}\n            onClick={handleMap}>\n\n\n\n\n<LayersControl position=\"topright\">\n<LayersControl.BaseLayer checked={true} name={filteredName.name}>\n  \n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n         \n      </LayersControl.BaseLayer>\n      <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n                <FeatureGroup ref={editRef}>\n                    <EditControl\n                    ref={editRef}\n                    position='bottomright'\n                   onCreated={onShapeDrawn}\n                   onMounted={onMounted}\n                    //onCreated={_onCreate}\n                  onEdited={_onEdited}\n                  onDeleted={_onDeleted}\n                  \n                    //here you can specify your shape options and which handler you want to enable\n                    draw={{\n                        rectangle: false,\n                        circle: false,\n                        polyline: false,\n                        circlemarker: false,\n                        marker: false,\n                        polygon:  {\n                             allowIntersection: false,\n                            shapeOptions: {\n                                color: \"#ff0000\"\n                            },\n                         }\n                    }}\n                    />\n                     \n                </FeatureGroup>\n                {filteredName.floors.map((floor, index) => (\n                 \n        <LayersControl.BaseLayer checked={false} name={floor.description}>\n\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color} \n                             />\n{\n   floor.blocks.map((block, ind) => (\n    <Polygon positions={block.bounds}>\n    \n        <label position={block.center}>\n           <Tooltip permanent direction=\"center\" class=\"labelText\"> {block.description}</Tooltip> </label>\n       <Popup direction=\"center\" >\n       <Button\n                \n                className=\"btn btn-primary\"\n                onClick={() => toggleBlock(\"editBlock\")}\n\n                >\n                     Edit\n                </Button>\n                \n                <Modal isOpen={editBlock} toggle={() => toggleBlock(\"editBlock\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBlock(\"editBlock\")}>Are you sure you want to edit the block</ModalHeader>\n                        <ModalBody>\n                        <Button color=\"primary\" onClick={handleBlock}>Yes</Button>\n                        <Button color=\"secondary\" onClick={() => toggleBlock(\"editBlock\")}>Cancel</Button>\n                        </ModalBody>\n                        \n                        </Modal>\n      </Popup>\n      \n     \n\n      \n    </Polygon> \n    \n                             \n                             \n\n  ))\n}\n\n        </LayerGroup>\n        </LayersControl.BaseLayer>\n             ))}\n              </LayersControl>\n                \n                \n            </Map>\n            <ButtonGroup className=\"btn-group\">\n           <div className={classes.buttonStyle}>\n           \n                <Button \n                className=\"btn btn-primary\"\n                \n                    // disabled={filteredName.floors.length>2}\n                    variant=\"contained\"\n                    onClick={onBlockDrawn}>\n                    \n                    AddBlock\n                </Button>\n                {/* <div className={classes.buttonWrapper}> */}\n                <Modal isOpen={blockDescription} toggle={() => toggleBlockDescription(\"blockDescription\")} className=\"modal-sm\" style={modalStyles}>\n                \n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBlockDescription(\"blockDescription\")}>Enter the block details</ModalHeader>\n                        <ModalBody>\n                        <Card className=\"iq-card\">\n                    <CardBody className=\"iq-card-body\">\n                    <form>\n                   \n                          Name: <input\n                  onChange={onChangeName}\n                  value={blockName}\n                  type=\"text\"\n                \n                /><br/>\n                          Description: <input\n                  onChange={onChangeDesc}\n                  value={blockDesc}\n                  type=\"text\"\n                \n                /><br/>\n                          icon: <input\n                  onChange={onChangeIcon}\n                  value={icon}\n                  type=\"url\"\n                \n                /><br/>\n                          </form>\n                         \n                          </CardBody>\n                          </Card>\n\n                        </ModalBody>\n                        <ModalFooter>\n                       {/* <Button color=\"primary\" >submit</Button>  */}\n                        <Button color=\"secondary\" onClick={() => toggleBlockDescription(\"blockDescription\")}>Ok</Button>\n                        </ModalFooter>\n                        \n                        \n                        </Modal>\n\n                <Button\n                \n                className=\"btn btn-primary\"\n                onClick={handleManageBoundaries}\n\n                >\n                      Manage Boundaries\n                </Button>\n                <Modal isOpen={editBoundaries} toggle={() => toggleBoundaries(\"editBoundaries\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBoundaries(\"editBoundaries\")}>Are you sure you want to edit the Boundaries</ModalHeader>\n                        <ModalBody>\n                        <Button color=\"primary\" onClick={handleBoundaries}>Yes</Button>\n                        <Button color=\"secondary\" onClick={() => toggleBoundaries(\"editBoundaries\")}>Cancel</Button>\n                        </ModalBody>\n                        \n                        </Modal>\n                 </div> \n                 </ButtonGroup>\n                 \n            {/* </div> */}\n            {/* <div classname={classes.buttonWrapper}>\n              <Button\n                   >Save</Button>\n\n            </div> */}\n            {/* <pre className=\"text-left\">\n\n\n\n              { \n              \n              JSON.stringify(mapLayers, 0, 2)}</pre> */}\n            \n                             </Col> \n                             \n                             </Row>\n                             </Row>\n                             \n\n\n\n\n\n                                      </div>\n                                      \n  \n                  ))} \n                  \n                  \n                  </CardBody>\n\n</Card>\n                   \n                   </div>)\n}\n\n\nexport default EditFloorMap;\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/history.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/slickSliderStyle1.js",["257","258"],"/Users/likhitha/Documents/cms/client/src/components/dashboard/SlickSliderStyle1.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/ModalTemplate.js",["259","260","261","262","263","264","265"],"import React from 'react';\nimport { Row, Col, Card, div, CardTitle, CardBody, UncontrolledCollapse, Button, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\n\n\n\nclass ModalTemplate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modelAddFloorModal: false\n            // model2: false,\n            // model3: false,\n            // model4: false,\n            // model5: false,\n            // model6: false,\n            // model7: false,\n            // model8: false,\n            // model9: false,\n        };\n    }\n\n    // componentDidMount() {\n    //     setTimeout(function () {\n    //         index();\n    //     }, 800);\n    // }\n\n    toggle = (model_id) => {\n        this.setState({\n            [model_id]: !this.state[model_id]\n        });\n    };\n\n    render() {\n\n        return (\n            <>\n                \n\n\n                                {/*Small modal*/}\n                                <Button color=\"primary\" onClick={() => this.toggle(\"modelAddFloorModal\")}> AddFloor </Button>{' '}\n\n                                {/*Modal*/}\n                                <Modal isOpen={this.state.modelAddFloorModal} toggle={() => this.toggle(\"modelAddFloorModal\")} className=\"modal-sm\">\n                                    <ModalHeader toggle={() => this.toggle(\"modelAddFloorModal\")}>Modal title</ModalHeader>\n                                    <ModalBody>\n                                        <p>Modal body text goes here.</p>\n                                    </ModalBody>\n                                    <ModalFooter>\n                                        <Button color=\"primary\" onClick={() => this.toggle(\"modelAddFloorModal\")}>Save changes</Button>{' '}\n                                        <Button color=\"secondary\" onClick={() => this.toggle(\"modelAddFloorModal\")}>Cancel</Button>\n                                    </ModalFooter>\n                                </Modal>\n                            \n            </>\n        );\n    }\n}\n\nexport default ModalTemplate;\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/ViewBuilding.js",["266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316"],"import React, { useRef, useEffect, useState, useMap } from \"react\";\nimport service from './services';\nimport { EditControl } from \"react-leaflet-draw\";\nimport LayersControl2, { ControlledLayerItem } from \"./LayerControl2\";\nimport \"./assets/leaflet.css\"\nimport \"./assets/leaflet.draw.css\"\nimport {\n  Map, TileLayer, FeatureGroup, useLeaflet, LayersControl, Marker, Polygon,\n  Popup, LayerGroup, Circle, GeoJSON\n} from \"react-leaflet\";\nimport Control from 'react-leaflet-control';\n\nimport L from \"leaflet\";\n\nimport { CardBody, Card, ButtonGroup, ButtonToolbar, Form, FormGroup, Label, Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\n// Material components\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { set } from \"mongoose\";\n\n\n\nconst useStyles = makeStyles(theme => ({\n  map: ({\n    height: `calc(90vh - 90px)`,\n    width: '60%',\n    zIndex: 0\n  }),\n  buttonWrapper: {\n    zIndex: 1,\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    marginLeft: \"30%\",\n    marginBottom: \"8%\",\n    transform: \"translateX(-50%)\",\n  },\n  headerWrapper: {\n    zIndex: 1,\n    marginLeft: theme.spacing(3),\n    marginTop: theme.spacing(1),\n  }\n}));\n\n\nfunction EditableLayer(props) {\n  const leaflet = useLeaflet();\n  const editLayerRef = React.useRef();\n  let drawControlRef = React.useRef();\n  let {map} = leaflet;\n\n  useEffect(() => {\n    \n    if (!props.showDrawControl) {\n      map.removeControl(drawControlRef.current);\n    } else {\n      map.addControl(drawControlRef.current);\n    }\n\n    editLayerRef.current.leafletElement.clearLayers();\n\n    editLayerRef.current.leafletElement.addLayer(props.layer);\n    props.layer.on(\"click\", function (e) {\n      props.onLayerClicked(e, drawControlRef.current);\n    });\n  }, [props, map]);\n\n  function onMounted(ctl) {\n    drawControlRef.current = ctl;\n  }\n\n  return (\n    <div>\n      <FeatureGroup ref={editLayerRef}>\n        <EditControl\n          position=\"topright\"\n          onMounted={onMounted}\n          {...props}\n        />\n      </FeatureGroup>\n    </div>\n  );\n}\n\nfunction EditableGroup(props) {\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  function handleLayerClick(e, drawControl) {\n    setSelectedLayerIndex(e.target.feature.properties.editLayerId);\n  }\n\n  let dataLayer = new L.GeoJSON(props.data);\n  let layers = [];\n  let i = 0;\n  dataLayer.eachLayer((layer) => {\n    layer.feature.properties.editLayerId = i;\n    layers.push(layer);\n    i++;\n  });\n\n  return (\n    <div>\n      {layers.map((layer, i) => {\n        return (\n          <EditableLayer\n            key={i}\n            layer={layer}\n            \n            onLayerClicked={handleLayerClick}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nconst ViewBuilding = (props) => {\n  const editRef = useRef();\n  const [drawing, setDrawing] = useState(false);\n  const [markers, setMarkers] = useState([])\n  const [details, setDetails] = useState('')\n  const [boundary, setBoundary] = useState([]);\n  const [newPosition, setNewPosition] = useState([])\n\n  const [mapLayers, setMapLayers] = useState('');\n  const [customLayer, setCustomLayer] = useState([]);\n\n  const [activeFloorPolygons, setActiveFloorPolygons] = useState([]);\n  const [activeFloorBoundary, setActiveFloorBoundary] = useState([]);\n  const [activeFloor, setActiveFloor] = useState('');\n  const [newDesc, setNewDesc] = useState('');\n  const [isEdit, setIsEdit] = useState('');\n  const [boundaryid, setBoundaryid] = useState(0);\n  const [selectedFloorGeoData, setselectedFloorGeoData] = useState('');\n\n\n  //const purpleOptions = { color: 'purple' }\n  const mapRef = useRef();\n  const fgRef = useRef();\n  const refno = window.location.pathname.replace('/ViewBuilding/', '');\n  const leaflet = useLeaflet();\n\n\n\n\n  const polygon = [\n\n  ]\n  const center = [51.505, -0.09]\n  const rectangle = [\n    [51.49, -0.08],\n    [51.5, -0.06],\n  ]\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n\n\n  \n\n  const updateFloor = {\n\n    floorno: markers.length + 1,\n    description: \"newDesc\",\n    color: '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6),\n    blocks: [],\n    boundaries: []\n  }\n\n  //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n  const [addFloor, setAddFloor] = useState(false);\n\n  const _onFeatureGroupReady = (ref) => {\n    if (ref !== undefined && ref !== null) {\n      let leafletFG = ref.leafletElement;\n      if (customLayer.length > 0) {\n        customLayer.eachLayer(layer => leafletFG.addLayer(layer));\n      }\n    }\n  }\n  const handleDrawPolygonClick = (e) => {\n    const activeFloorLcl = activeFloor;\n    const polygonType = e.target.value;\n    debugger;\n    switch (polygonType) {\n      case \"BO\":\n\n        break;\n\n      case \"BL\":\n\n        break;\n\n      default:\n        break;\n    }\n    if (activeFloorLcl !== undefined && activeFloorLcl !== null) {\n      if (activeFloorLcl.boundaries.length > 3) {\n        const { layerType, layer } = e;\n        if (layerType === \"polygon\") {\n          const { _leaflet_id } = layer;\n          setMapLayers((layers) => [\n            ...layers,\n            { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n            // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n          ]);\n        }\n        //Edit this method to perform other actions\n\n        if (!drawing) {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n        } else {\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n        }\n\n        setDrawing(!drawing)\n\n      }\n\n    }\n\n\n\n  }\n  //let dataLayer = new L.GeoJSON(props.data);\n\n\n\n  const onShapeDrawn = (e) => {\n    debugger;\n    setDrawing(false)\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n    }\n    debugger;\n\n    const mar = markers;\n\n    for (var k = 0; k < mar.length; k++) {\n\n      let boundary_id = boundaryid;\n\n      boundary_id = layer._leaflet_id;\n\n\n      setBoundaryid(boundary_id);\n      console.log(boundaryid);\n\n\n      debugger;\n    }\n\n\n\n\n\n\n\n    // e.layer.on('click', () => {\n    //     debugger;\n    //     setDrawing(layer);\n    //     //setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n    //     debugger;\n    //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n    // })\n    e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n    })\n    e.layer.bindTooltip(\"Text\",\n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n        sticky: true,\n        direction: 'right'\n      }\n    );\n  }\n  function handleLayerClick(e, drawControl) {\n\n    debugger;\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n    }\n\n    let drawingLcl = drawing;\n    drawingLcl = layer;\n    setDrawing(drawingLcl);\n    //   setSelectedLayerIndex(e.target.boundaryid);\n    //     console.log(selectedLayerIndex);\n\n\n\n\n\n    debugger;\n    //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n\n  }\n\n  //   e.layer.on('click', () => {\n  //     debugger;\n  //     setSelectedLayerIndex(e.target.boundaryid);\n  //     console.log(selectedLayerIndex);\n  //     debugger;\n  //   editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  // })\n\n  function onEditPath() {\n    debugger;\n  }\n  function onCreate() {\n    debugger;\n  }\n\n  function onDeleted() {\n    debugger;\n  }\n  function reverseCoordinate(coor) {\n    let retCoor = [];\n    if (coor !== undefined && coor !== null) {\n      if (coor.length > 0) {\n        for (let coorIdx = 0; coorIdx < coor.length; coorIdx++) {\n          const bound = coor[coorIdx];\n          let row = [];\n          if (bound.length === 2) {\n            row.push(bound[1]);\n            row.push(bound[0]);\n            retCoor.push(row);\n          }\n        }\n\n      }\n    }\n    return retCoor;\n  }\n  function block2Layer(iBlock, floorIndex, floorColor) {\n\n\n    return {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"id\": iBlock.blockId,\n        \"ground\": floorIndex,\n\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"color\": floorColor,\n        \"coordinates\": [reverseCoordinate(iBlock.bounds)]\n      }\n    }\n\n\n\n  }\n\n  function onFloorSelect(e, data) {\n    const index = e.target.value;\n    let selectedFloorPolygonLayers = [];\n    let activeFloorSel = markers[index];\n    const floorColor = '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6);\n\n    for (let blockIdx = 0; blockIdx < activeFloorSel.blocks.length; blockIdx++) {\n      const blockPolygon = activeFloorSel.blocks[blockIdx];\n      const geoJsonObj = block2Layer(blockPolygon, index, floorColor);\n\n\n      selectedFloorPolygonLayers.push(geoJsonObj);\n\n    }\n    debugger;\n    const featureCollection = {\n      \"type\": \"FeatureCollection\",\n      \"name\": activeFloorSel.description,\n      \"crs\": {\n        \"type\": \"name\",\n        \"properties\": {\n          \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n        }\n      },\n      \"features\": selectedFloorPolygonLayers\n    };\n    // const floorLayers = new L.GeoJSON(featureCollection);\n\n    // setActiveFloorPolygons(floorLayers.getLayers());\n    setselectedFloorGeoData(featureCollection);\n    setActiveFloorBoundary(activeFloorSel.boundaries);\n    setActiveFloor(activeFloorSel);\n\n  }\n\n\n\n  const addressCardStyle = {\n    backgroundImage: `url(${require('./33.png')})`,\n\n    backgroundSize: 'cover',\n\n    height: \"423px\",\n\n  }\n\n  let floor = {};\n  useEffect(() => {\n\n    var refTemp = refno.replace(\"/EditBuilding/\", \"\");\n    service\n      .getBuilding(refTemp)\n      .then(selBuilding => {\n        console.log(\"returning\", selBuilding)\n\n        debugger;\n        setMarkers(selBuilding[0].floors);\n        setActiveFloor(selBuilding[0].floors[0]);\n        setActiveFloorBoundary(selBuilding[0].floors[0].boundaries);\n        setActiveFloorPolygons(selBuilding[0].floors[0].blocks);\n\n\n        setDetails(selBuilding[0]);\n        // setBoundary(selBuilding[0].boundary.geometry.coordinates[0]);\n\n        let ml = mapLayers;\n\n\n\n\n      })\n\n  }, [])\n\n  function toggle() {\n    setAddFloor(!addFloor);\n  }\n\n  const moveActiveFloor = () => {\n    const markersLcl = markers;\n    debugger;\n    if (activeFloor !== undefined && activeFloor !== null) {\n      for (let i = 0; i < markersLcl.length; i++) {\n\n        if (activeFloor.floorno === markersLcl[i].floorno) {\n          markersLcl[i].description = activeFloor.description;\n          markersLcl[i].blocks = activeFloor.blocks;\n          markersLcl[i].boundaries = activeFloor.boundaries;\n\n        }\n      }\n      setMarkers(markersLcl);\n    }\n\n  }\n  const _onCreate = (e) => {\n    console.log(e);\n\n    const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n\n      setMapLayers((layers) => [\n        ...layers,\n        { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n      ]);\n    }\n  };\n\n\n  const _onEdited = (e) => {\n    debugger;\n    // console.log(e);\n    // const {\n    //   layers: { _layers },\n    // } = e;\n\n    // Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    //   setMapLayers((layers) =>\n    //     layers.map((l) =>\n    //       l.id === _leaflet_id\n    //         ? { ...l, latlngs: { ...editing.latlngs[0] } }\n    //         : l\n    //     )\n    //   );\n    // });\n  };\n\n  const _onDeleted = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n\n    Object.values(_layers).map(({ _leaflet_id }) => {\n      setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n    });\n  };\n\n  const deleteActiveFloor = () => {\n    debugger;\n    const activeFloorLocal = activeFloor;\n    const markersL = markers;\n    const markersAfterDeletion = [];\n    for (let j = 0; j < markersL.length; j++) {\n      const marker = markersL[j];\n      if (marker.floorno !== activeFloorLocal.floorno) {\n        markersAfterDeletion.push(marker);\n      }\n\n    }\n    setMarkers(markersAfterDeletion);\n    setActiveFloorPolygons(markersAfterDeletion[0].blocks);\n    setActiveFloorBoundary(markersAfterDeletion[0].boundaries);\n    setActiveFloor(markersAfterDeletion[0]);\n\n  }\n\n\n  const handleAddFloor = () => {\n    debugger;\n    const newFloor = {\n      \"floorno\": markers.length + 1,\n      \"description\": newDesc,\n      \"color\": \"#f18d00\",\n      \"blocks\": [],\n      \"boundaries\": []\n    }\n    setActiveFloor(newFloor);\n    setActiveFloorBoundary(newFloor.boundaries);\n    setActiveFloorPolygons(newFloor.blocks);\n    const markersLocal = markers;\n    markersLocal.push(newFloor);\n    setMarkers(markersLocal);\n\n    setNewDesc(\"\");\n  }\n\n\n  const changeHandlerDesc = (event) => setNewDesc(event.target.value);\n  const updateIsEdit = (e, value) => setIsEdit(value);\n\n  const handleSaveFloor = (e) => {\n    e.preventDefault()\n    debugger;\n\n    service\n      .updateBuilding(markers[0].id, markers[0])\n\n  }\n\n  const handleEditPolygonClick = (e) => {\n    const drawingLocal = drawing;\n    debugger;\n\n  }\n\n\n\n  return (\n\n    <div>\n\n      <div className=\"row\" style={{ margin: \".6%\" }}>\n\n        <div className=\"col-lg-4\">\n          <div className=\"iq-card iq-card-block iq-card-stretch iq-card-height bg-transparent\">\n\n            <FormGroup className=\"form-group\">\n              <Label htmlFor=\"exampleInputReadonly\">Building Id</Label>\n              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                readOnly=\"\" defaultValue={details.id} disabled />\n            </FormGroup>\n\n            <FormGroup className=\"form-group\">\n              <Label htmlFor=\"exampleInputReadonly\">Building Name</Label>\n              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                readOnly=\"\" defaultValue={details.description} />\n            </FormGroup>\n\n            <FormGroup className=\"form-group\">\n              <Label htmlFor=\"exampleInputReadonly\">Street</Label>\n              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                readOnly=\"\" defaultValue={details.street} />\n            </FormGroup>\n\n            <FormGroup className=\"form-group\">\n              <Label htmlFor=\"exampleInputReadonly\">Apartment</Label>\n              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                readOnly=\"\" defaultValue={details.Apartment} />\n            </FormGroup>\n\n\n            <FormGroup className=\"form-group\">\n              <Label htmlFor=\"exampleInputReadonly\">Doornum</Label>\n              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                readOnly=\"\" defaultValue={details.doornum} />\n            </FormGroup>\n\n\n            <FormGroup className=\"form-group\">\n              <Label htmlFor=\"exampleInputReadonly\">Region</Label>\n              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                readOnly=\"\" defaultValue={details.region} />\n            </FormGroup>\n\n            <FormGroup className=\"form-group\">\n              <Label htmlFor=\"exampleInputReadonly\">Country</Label>\n              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                readOnly=\"\" defaultValue={details.country} />\n\n            </FormGroup>\n\n          </div>\n        </div>\n\n\n        <div className=\"col-lg-8\">\n          <div className=\"iq-card overflow-hidden\">\n            <h1 className=\"display-4\">{activeFloor.description}</h1>\n\n            <div id=\"home-chart-02\">\n              <Map center={[60.21846434365596, 24.811831922452843]} zoom={17} ref={mapRef} >\n                <Control position=\"topright\">\n                  {/* <button class=\"primary\" onClick={handleDrawPolygonClick} value=\"BO\"\n                    style={{ \"font-size\": \"1.5rem\", \"margin-left\": \".05rem\" ,\"margin-right\": \".05rem\" }}>\n                    Add Floor\n                        </button> */}\n                  <Button className=\"btn btn-primary\"\n                    style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }} color=\"primary\" onClick={handleSaveFloor}> SaveBuilding </Button>\n\n\n                  <Button className=\"btn btn-primary\" style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }} color=\"primary\" onClick={() => toggle(\"addFloor\")}> AddFloor </Button>{' '}\n\n\n                  <Modal isOpen={addFloor} toggle={() => toggle(\"addFloor\")} className=\"modal-sm\">\n                    <ModalHeader className=\"btn btn-primary\" toggle={() => toggle(\"addFloor\")}>Add Floor</ModalHeader>\n                    <ModalBody>\n\n\n                      <p>Floor: {markers.length + 1}</p>\n\n                      <p>Enter Floor Description</p>\n                      <input type=\"text\" onChange={changeHandlerDesc} value={newDesc}\n                        lur={updateIsEdit} />\n\n                    </ModalBody>\n                    <ModalFooter>\n\n                      <Button color=\"primary\" onClick={() => {\n                        toggle(\"addFloor\");\n                        // handleAddFloor(); \n                        handleAddFloor();\n\n                      }}>OK</Button>{' '}\n                      <Button color=\"secondary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n                    </ModalFooter>\n                  </Modal>\n\n                  <button class=\"btn btn-primary\" onClick={deleteActiveFloor} value=\"BO\"\n                    style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }}>\n                    Delete Floor\n                        </button>\n                  <button class=\"btn btn-primary\" onClick={handleDrawPolygonClick} value=\"BO\"\n                    style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\", \"margin-right\": \".05rem\" }}>\n                    Manage Boundary\n                        </button>\n\n                  <button class=\"btn btn-primary\" onClick={handleDrawPolygonClick} value=\"BL\"\n                    style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\" }}>\n                    AddBlock\n                        </button>\n\n                  <button class=\"btn btn-primary\" onClick={handleEditPolygonClick}\n                    style={{ \"font-size\": \"1.0rem\", \"margin-left\": \".05rem\" }}>\n                    EditBlock\n                        </button>\n                </Control>\n                <LayersControl position=\"topright\">\n                  <LayersControl.BaseLayer\n                    checked={false}\n                    name=\"Esri WorldImagery\"\n                    group=\"BaseLayers\"\n                  >\n                    <TileLayer\n                      url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                      attribution='&copy; <a href=\"Esri &mdash\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors'\n                    />\n                  </LayersControl.BaseLayer >\n                  <LayersControl.BaseLayer\n                    checked={true}\n                    name=\"OpenStreetMap\"\n                    group=\"BaseLayers\"\n                  >\n                    <TileLayer\n                      attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                  </LayersControl.BaseLayer >\n\n                </LayersControl>\n\n                <EditableGroup data={selectedFloorGeoData} />\n\n\n                {/* <FeatureGroup>\n                  \n                  {activeFloorPolygons.map((polygonObjLayer,polyIdx)=>(\n                      <div>\n                      <EditControl\n                      layer={polygonObjLayer}\n                      position='topleft'\n                      onCreated={onShapeDrawn}\n                      onEdited = {_onEdited}\n                      onDeleted = {_onDeleted}\n                      \n                      \n                      \n                      //here you can specify your shape options and which handler you want to enable\n                      draw={{\n                        rectangle: false,\n                        polygon: true,\n                        circle: false,\n                        polyline: false,\n                        circlemarker: false,\n                        marker: false\n  \n                      }}\n\n                    >\n  \n  \n  \n  \n                    </EditControl>\n\n                    <Polygon positions={polygonObj.bounds} ></Polygon>\n                    </div>\n                    \n                  ))}\n                <Polygon positions={activeFloorBoundary} onClick={handleLayerClick}> </Polygon>\n\n                \n\n                </FeatureGroup> */}\n\n\n\n                <Control position=\"topright\" >\n                  <div>\n                    {\n                      markers.map((mLr, didx) => (\n\n\n\n                        <div>\n\n                          <button class=\"primary\" value={didx} onClick={onFloorSelect} style={{ \"font-size\": \"1.5rem\", \"margin-left\": \".05rem\" }}>\n                            {mLr.floorno}\n                          </button>\n\n\n                        </div>\n                      ))\n\n                    }\n\n                  </div>\n                </Control>\n\n\n\n\n\n              </Map>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n\n    </div>\n  )\n}\n\n\nexport default ViewBuilding;","/Users/likhitha/Documents/cms/client/src/components/dashboard/LayerControl2.js",["317","318"],"import React, { Children, cloneElement, Component, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Control, DomUtil, DomEvent } from \"leaflet\";\nimport { withLeaflet, MapControl, LeafletProvider } from \"react-leaflet\";\nimport { IconButton } from \"@material-ui/core\";\nimport LayerIcon from \"@material-ui/icons/Layers\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport TerrainIcon from \"@material-ui/icons/Terrain\";\nimport RecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nconst icons = {\n  BaseLayers: <TerrainIcon />,\n  Rectangles: <StopIcon />,\n  Circles: <RecordIcon />\n};\n\nexport class ControlledLayer extends Component {\n  componentDidUpdate({ checked }) {\n    if (this.props.leaflet.map == null) {\n      return;\n    }\n    // Handle dynamically (un)checking the layer => adding/removing from the map\n    if (this.props.checked === true && (checked == null || checked === false)) {\n      this.props.leaflet.map.addLayer(this.layer);\n    } else if (\n      checked === true &&\n      (this.props.checked == null || this.props.checked === false)\n    ) {\n      this.props.leaflet.map.removeLayer(this.layer);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeLayerControl(this.layer);\n  }\n\n  addLayer() {\n    throw new Error(\"Must be implemented in extending class\");\n  }\n\n  removeLayer(layer) {\n    this.props.removeLayer(layer);\n  }\n\n  render() {\n    const { children } = this.props;\n    return children ? (\n      <LeafletProvider value={this.contextValue}>{children}</LeafletProvider>\n    ) : null;\n  }\n}\n\nexport class ControlledLayerItem extends ControlledLayer {\n  constructor(props) {\n\n    \n    super(props);\n    this.contextValue = {\n      ...props.leaflet,\n      layerContainer: {\n        addLayer: this.addLayer.bind(this),\n        removeLayer: this.removeLayer.bind(this)\n      }\n    };\n  }\nbackUpLayer = {};\n  addLayer = layer => {\n    this.layer = layer; // Keep layer reference to handle dynamic changes of props\n    const { addGroupedLayer, checked, name, group } = this.props;\n    addGroupedLayer(layer, name, checked, group);\n  };\n}\n\nclass LayerControl extends MapControl {\n  constructor(props, context) {\n    super(props);\n    this.controlProps = {\n      addGroupedLayer: this.addGroupedLayer.bind(this),\n      removeLayer: this.removeLayer.bind(this),\n      leaflet: props.leaflet\n    };\n    this._layers = {};\n\n    this.state = {\n      menuOpen: false,\n      layers: {},\n      menus: []\n    };\n  }\n\n  openMenu = () => {\n    this.setState({ menuOpen: true });\n  };\n  closeMenu = () => {\n    this.setState({ menuOpen: false });\n  };\n\n  addGroupedLayer = (layer, name, checked, group) => {\n    if (checked && this.props.leaflet.map != null) {\n      this.props.leaflet.map.addLayer(layer);\n    }\n\n    this.setState((prevState, props) => {\n      let currentLayers = { ...prevState.layers };\n      let currentGroup = currentLayers[group];\n\n      currentGroup = currentGroup\n        ? [\n            ...currentGroup.filter(x => x.name !== name),\n            { layer, name, checked, group }\n          ]\n        : [{ layer, name, checked, group }];\n      currentLayers[group] = currentGroup;\n      return {\n        layers: currentLayers\n      };\n    });\n\n    // bad implementation\n\n    let currentGroup = this._layers[group];\n\n    currentGroup = currentGroup\n      ? [\n          ...currentGroup.filter(x => x.name !== name),\n          { layer, name, checked, group }\n        ]\n      : [{ layer, name, checked, group }];\n\n    let layers = { ...this._layers };\n    layers[group] = currentGroup;\n\n    this._layers = layers;\n  };\n\n  removeLayer(layer) {\n    if (this.props.leaflet.map != null) {\n      this.props.leaflet.map.removeLayer(layer);\n    }\n  }\n  //create and return a leaflet object you want to extend\n  createLeafletElement(props) {\n    // extend control from leaflet\n    const MyControl = Control.extend({\n      // there are only two options we can have here for extending a control\n      // https://leafletjs.com/reference-1.5.0.html#control\n\n      // Should return the container DOM element for the control and add listeners on relevant map events\n      onAdd: map => {\n        this.container = DomUtil.create(\"div\");\n        this.map = map;\n        return this.container;\n      },\n      // this one is optional\n      onRemove: map => {}\n    });\n\n    // return new instance of our control and pass it all the props\n    return new MyControl(props);\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n      \n    super.updateLeafletElement(fromProps, toProps);\n    console.log(fromProps, toProps);\n    // this.forceUpdate();\n  }\n\n  componentDidMount(props) {\n    super.componentDidMount();\n    this.forceUpdate();\n    // render react component\n  }\n\n  toggleLayer = layerInput => {\n    const { layer, name, checked, group } = layerInput;\n    console.log(layer, name, checked, group);\n    let layers = { ...this.state.layers };\n\n    layers[group] = layers[group].map(l => {\n    \n        if (l.name === name) {\n        l.checked = true;//!l.checked;\n        debugger;\n        for (var prop in this.props.leaflet.map._layers) {\n            console.log(this.props.leaflet.map._layers[prop]);\n        \n        }    \n\n        this.props.leaflet.map.addLayer(layer)\n       \n      }else{\n        l.checked = false;\n        \n        //this.removeLayer(layer)\n      }\n\n    //   l.checked? this.props.leaflet.map.addLayer(layer) &&\n    //                 console.log(name, \"adding this layer\")\n    //     : this.removeLayer(layer);\n\n      return l;\n    });\n\n    this.setState({\n      layers\n    });\n  };\n\n  onCollapseClick = name => {\n    const { menus } = this.state;\n\n    menus.includes(name)\n      ? this.setState({\n          menus: [...this.state.menus.filter(x => x !== name)]\n        })\n      : this.setState({\n          menus: [...menus, name]\n        });\n  };\n\n  isMenuOpen = name => {\n    let open = this.state.menus.includes(name);\n    return open;\n  };\n\n  render() {\n    if (!this.leafletElement || !this.leafletElement.getContainer()) {\n      return null;\n    }\n    // console.log(this.state.baseLayers);\n    return (\n      <React.Fragment>\n        {ReactDOM.createPortal(\n          <Paper\n            onMouseEnter={this.openMenu}\n            onMouseLeave={this.closeMenu}\n            {...this.props}\n          >\n            {this.state.menuOpen && (\n              <div style={{ padding: 10 }}>\n                {Object.keys(this.state.layers).map(g => {\n                  return (\n                    <React.Fragment key={g}>\n                      <ListItem\n                        button\n                        onClick={() => this.onCollapseClick(`${g}`)}\n                      >\n                        <ListItemIcon>{icons[g]}</ListItemIcon>\n                        <ListItemText primary={g} />\n                        {this.isMenuOpen(g) ? <ExpandLess /> : <ExpandMore />}\n                      </ListItem>\n                      <Typography />\n                      <Divider />\n                      <Collapse\n                        in={this.isMenuOpen(g)}\n                        timeout=\"auto\"\n                        unmountOnExit\n                      >\n                        <List>\n                          {this.state.layers[g].map(l => {\n                            return (\n                              <ListItem key={l.name}>\n                                <ListItemIcon>\n                                  <Checkbox\n                                    onClick={() => this.toggleLayer(l)}\n                                    edge=\"start\"\n                                    checked={l.checked}\n                                  />\n                                </ListItemIcon>\n                                <ListItemText primary={l.name} />\n                              </ListItem>\n                            );\n                          })}\n                        </List>\n                      </Collapse>\n                    </React.Fragment>\n                  );\n                })}\n              </div>\n            )}\n            {!this.state.menuOpen && (\n              <IconButton>\n                <LayerIcon />\n              </IconButton>\n            )}\n          </Paper>,\n          this.leafletElement.getContainer()\n        )}\n        {Children.map(this.props.children, child => {\n          return child ? cloneElement(child, this.controlProps) : null;\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withLeaflet(LayerControl);\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/EditBuilding.js",["319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369"],{"ruleId":"370","replacedBy":"371"},{"ruleId":"372","replacedBy":"373"},{"ruleId":"374","severity":1,"message":"375","line":28,"column":8,"nodeType":"376","messageId":"377","endLine":28,"endColumn":20},{"ruleId":"374","severity":1,"message":"378","line":5,"column":8,"nodeType":"376","messageId":"377","endLine":5,"endColumn":22},{"ruleId":"374","severity":1,"message":"379","line":10,"column":10,"nodeType":"376","messageId":"377","endLine":10,"endColumn":17},{"ruleId":"374","severity":1,"message":"380","line":10,"column":26,"nodeType":"376","messageId":"377","endLine":10,"endColumn":35},{"ruleId":"374","severity":1,"message":"381","line":12,"column":17,"nodeType":"376","messageId":"377","endLine":12,"endColumn":26},{"ruleId":"374","severity":1,"message":"382","line":12,"column":28,"nodeType":"376","messageId":"377","endLine":12,"endColumn":31},{"ruleId":"374","severity":1,"message":"383","line":12,"column":33,"nodeType":"376","messageId":"377","endLine":12,"endColumn":36},{"ruleId":"374","severity":1,"message":"384","line":12,"column":38,"nodeType":"376","messageId":"377","endLine":12,"endColumn":43},{"ruleId":"374","severity":1,"message":"385","line":12,"column":45,"nodeType":"376","messageId":"377","endLine":12,"endColumn":51},{"ruleId":"374","severity":1,"message":"386","line":15,"column":10,"nodeType":"376","messageId":"377","endLine":15,"endColumn":13},{"ruleId":"374","severity":1,"message":"387","line":15,"column":15,"nodeType":"376","messageId":"377","endLine":15,"endColumn":22},{"ruleId":"374","severity":1,"message":"388","line":15,"column":24,"nodeType":"376","messageId":"377","endLine":15,"endColumn":31},{"ruleId":"374","severity":1,"message":"389","line":15,"column":33,"nodeType":"376","messageId":"377","endLine":15,"endColumn":43},{"ruleId":"374","severity":1,"message":"390","line":15,"column":45,"nodeType":"376","messageId":"377","endLine":15,"endColumn":52},{"ruleId":"374","severity":1,"message":"391","line":16,"column":8,"nodeType":"376","messageId":"377","endLine":16,"endColumn":12},{"ruleId":"374","severity":1,"message":"392","line":17,"column":8,"nodeType":"376","messageId":"377","endLine":17,"endColumn":17},{"ruleId":"374","severity":1,"message":"393","line":18,"column":8,"nodeType":"376","messageId":"377","endLine":18,"endColumn":17},{"ruleId":"374","severity":1,"message":"394","line":20,"column":10,"nodeType":"376","messageId":"377","endLine":20,"endColumn":14},{"ruleId":"374","severity":1,"message":"395","line":20,"column":16,"nodeType":"376","messageId":"377","endLine":20,"endColumn":22},{"ruleId":"374","severity":1,"message":"396","line":21,"column":10,"nodeType":"376","messageId":"377","endLine":21,"endColumn":24},{"ruleId":"374","severity":1,"message":"397","line":23,"column":8,"nodeType":"376","messageId":"377","endLine":23,"endColumn":15},{"ruleId":"374","severity":1,"message":"398","line":37,"column":10,"nodeType":"376","messageId":"377","endLine":37,"endColumn":16},{"ruleId":"374","severity":1,"message":"399","line":38,"column":10,"nodeType":"376","messageId":"377","endLine":38,"endColumn":16},{"ruleId":"374","severity":1,"message":"400","line":39,"column":10,"nodeType":"376","messageId":"377","endLine":39,"endColumn":17},{"ruleId":"374","severity":1,"message":"401","line":56,"column":9,"nodeType":"376","messageId":"377","endLine":56,"endColumn":22},{"ruleId":"374","severity":1,"message":"402","line":57,"column":9,"nodeType":"376","messageId":"377","endLine":57,"endColumn":23},{"ruleId":"374","severity":1,"message":"403","line":58,"column":9,"nodeType":"376","messageId":"377","endLine":58,"endColumn":23},{"ruleId":"374","severity":1,"message":"404","line":64,"column":9,"nodeType":"376","messageId":"377","endLine":64,"endColumn":18},{"ruleId":"374","severity":1,"message":"405","line":72,"column":9,"nodeType":"376","messageId":"377","endLine":72,"endColumn":21},{"ruleId":"406","severity":1,"message":"407","line":84,"column":6,"nodeType":"408","endLine":84,"endColumn":18,"suggestions":"409"},{"ruleId":"374","severity":1,"message":"410","line":94,"column":7,"nodeType":"376","messageId":"377","endLine":94,"endColumn":18},{"ruleId":"374","severity":1,"message":"411","line":114,"column":9,"nodeType":"376","messageId":"377","endLine":114,"endColumn":21},{"ruleId":"374","severity":1,"message":"412","line":134,"column":9,"nodeType":"376","messageId":"377","endLine":134,"endColumn":20},{"ruleId":"374","severity":1,"message":"413","line":145,"column":9,"nodeType":"376","messageId":"377","endLine":145,"endColumn":20},{"ruleId":"374","severity":1,"message":"414","line":152,"column":9,"nodeType":"376","messageId":"377","endLine":152,"endColumn":25},{"ruleId":"374","severity":1,"message":"415","line":6,"column":8,"nodeType":"376","messageId":"377","endLine":6,"endColumn":12},{"ruleId":"374","severity":1,"message":"416","line":7,"column":10,"nodeType":"376","messageId":"377","endLine":7,"endColumn":14},{"ruleId":"374","severity":1,"message":"417","line":9,"column":27,"nodeType":"376","messageId":"377","endLine":9,"endColumn":33},{"ruleId":"374","severity":1,"message":"418","line":9,"column":35,"nodeType":"376","messageId":"377","endLine":9,"endColumn":40},{"ruleId":"419","severity":1,"message":"420","line":40,"column":1,"nodeType":"421","endLine":40,"endColumn":82},{"ruleId":"374","severity":1,"message":"383","line":26,"column":9,"nodeType":"376","messageId":"377","endLine":26,"endColumn":12},{"ruleId":"374","severity":1,"message":"382","line":26,"column":14,"nodeType":"376","messageId":"377","endLine":26,"endColumn":17},{"ruleId":"374","severity":1,"message":"422","line":26,"column":26,"nodeType":"376","messageId":"377","endLine":26,"endColumn":30},{"ruleId":"374","severity":1,"message":"423","line":26,"column":32,"nodeType":"376","messageId":"377","endLine":26,"endColumn":40},{"ruleId":"374","severity":1,"message":"424","line":27,"column":10,"nodeType":"376","messageId":"377","endLine":27,"endColumn":14},{"ruleId":"374","severity":1,"message":"425","line":27,"column":17,"nodeType":"376","messageId":"377","endLine":27,"endColumn":31},{"ruleId":"374","severity":1,"message":"426","line":27,"column":33,"nodeType":"376","messageId":"377","endLine":27,"endColumn":48},{"ruleId":"374","severity":1,"message":"427","line":27,"column":50,"nodeType":"376","messageId":"377","endLine":27,"endColumn":72},{"ruleId":"374","severity":1,"message":"428","line":29,"column":7,"nodeType":"376","messageId":"377","endLine":29,"endColumn":15},{"ruleId":"429","severity":1,"message":"430","line":96,"column":75,"nodeType":"431","messageId":"432","endLine":96,"endColumn":76,"suggestions":"433"},{"ruleId":"406","severity":1,"message":"434","line":118,"column":5,"nodeType":"408","endLine":118,"endColumn":7,"suggestions":"435"},{"ruleId":"374","severity":1,"message":"436","line":4,"column":25,"nodeType":"376","messageId":"377","endLine":4,"endColumn":36},{"ruleId":"374","severity":1,"message":"385","line":4,"column":38,"nodeType":"376","messageId":"377","endLine":4,"endColumn":44},{"ruleId":"374","severity":1,"message":"437","line":4,"column":45,"nodeType":"376","messageId":"377","endLine":4,"endColumn":58},{"ruleId":"374","severity":1,"message":"438","line":4,"column":60,"nodeType":"376","messageId":"377","endLine":4,"endColumn":65},{"ruleId":"374","severity":1,"message":"439","line":7,"column":10,"nodeType":"376","messageId":"377","endLine":7,"endColumn":17},{"ruleId":"374","severity":1,"message":"380","line":7,"column":35,"nodeType":"376","messageId":"377","endLine":7,"endColumn":44},{"ruleId":"374","severity":1,"message":"415","line":9,"column":8,"nodeType":"376","messageId":"377","endLine":9,"endColumn":12},{"ruleId":"374","severity":1,"message":"416","line":10,"column":10,"nodeType":"376","messageId":"377","endLine":10,"endColumn":14},{"ruleId":"374","severity":1,"message":"440","line":11,"column":8,"nodeType":"376","messageId":"377","endLine":11,"endColumn":25},{"ruleId":"374","severity":1,"message":"412","line":34,"column":12,"nodeType":"376","messageId":"377","endLine":34,"endColumn":23},{"ruleId":"374","severity":1,"message":"441","line":1,"column":17,"nodeType":"376","messageId":"377","endLine":1,"endColumn":25},{"ruleId":"374","severity":1,"message":"442","line":1,"column":27,"nodeType":"376","messageId":"377","endLine":1,"endColumn":36},{"ruleId":"374","severity":1,"message":"415","line":4,"column":8,"nodeType":"376","messageId":"377","endLine":4,"endColumn":12},{"ruleId":"374","severity":1,"message":"443","line":8,"column":8,"nodeType":"376","messageId":"377","endLine":8,"endColumn":13},{"ruleId":"374","severity":1,"message":"378","line":9,"column":8,"nodeType":"376","messageId":"377","endLine":9,"endColumn":22},{"ruleId":"374","severity":1,"message":"444","line":10,"column":10,"nodeType":"376","messageId":"377","endLine":10,"endColumn":13},{"ruleId":"374","severity":1,"message":"445","line":10,"column":15,"nodeType":"376","messageId":"377","endLine":10,"endColumn":27},{"ruleId":"374","severity":1,"message":"446","line":10,"column":29,"nodeType":"376","messageId":"377","endLine":10,"endColumn":34},{"ruleId":"374","severity":1,"message":"447","line":10,"column":36,"nodeType":"376","messageId":"377","endLine":10,"endColumn":42},{"ruleId":"374","severity":1,"message":"448","line":10,"column":44,"nodeType":"376","messageId":"377","endLine":10,"endColumn":53},{"ruleId":"374","severity":1,"message":"439","line":10,"column":54,"nodeType":"376","messageId":"377","endLine":10,"endColumn":61},{"ruleId":"374","severity":1,"message":"449","line":10,"column":62,"nodeType":"376","messageId":"377","endLine":10,"endColumn":73},{"ruleId":"374","severity":1,"message":"379","line":10,"column":75,"nodeType":"376","messageId":"377","endLine":10,"endColumn":82},{"ruleId":"374","severity":1,"message":"450","line":29,"column":23,"nodeType":"376","messageId":"377","endLine":29,"endColumn":28},{"ruleId":"374","severity":1,"message":"437","line":1,"column":37,"nodeType":"376","messageId":"377","endLine":1,"endColumn":50},{"ruleId":"374","severity":1,"message":"451","line":1,"column":51,"nodeType":"376","messageId":"377","endLine":1,"endColumn":55},{"ruleId":"374","severity":1,"message":"447","line":7,"column":41,"nodeType":"376","messageId":"377","endLine":7,"endColumn":47},{"ruleId":"374","severity":1,"message":"452","line":7,"column":48,"nodeType":"376","messageId":"377","endLine":7,"endColumn":56},{"ruleId":"374","severity":1,"message":"380","line":7,"column":83,"nodeType":"376","messageId":"377","endLine":7,"endColumn":92},{"ruleId":"374","severity":1,"message":"453","line":7,"column":121,"nodeType":"376","messageId":"377","endLine":7,"endColumn":133},{"ruleId":"374","severity":1,"message":"454","line":10,"column":10,"nodeType":"376","messageId":"377","endLine":10,"endColumn":15},{"ruleId":"374","severity":1,"message":"455","line":11,"column":10,"nodeType":"376","messageId":"377","endLine":11,"endColumn":14},{"ruleId":"374","severity":1,"message":"456","line":12,"column":10,"nodeType":"376","messageId":"377","endLine":12,"endColumn":17},{"ruleId":"374","severity":1,"message":"457","line":13,"column":10,"nodeType":"376","messageId":"377","endLine":13,"endColumn":30},{"ruleId":"374","severity":1,"message":"458","line":54,"column":10,"nodeType":"376","messageId":"377","endLine":54,"endColumn":21},{"ruleId":"374","severity":1,"message":"459","line":54,"column":23,"nodeType":"376","messageId":"377","endLine":54,"endColumn":37},{"ruleId":"374","severity":1,"message":"460","line":56,"column":10,"nodeType":"376","messageId":"377","endLine":56,"endColumn":18},{"ruleId":"374","severity":1,"message":"461","line":56,"column":20,"nodeType":"376","messageId":"377","endLine":56,"endColumn":31},{"ruleId":"374","severity":1,"message":"462","line":59,"column":10,"nodeType":"376","messageId":"377","endLine":59,"endColumn":16},{"ruleId":"374","severity":1,"message":"463","line":60,"column":10,"nodeType":"376","messageId":"377","endLine":60,"endColumn":16},{"ruleId":"374","severity":1,"message":"464","line":60,"column":18,"nodeType":"376","messageId":"377","endLine":60,"endColumn":27},{"ruleId":"374","severity":1,"message":"465","line":61,"column":10,"nodeType":"376","messageId":"377","endLine":61,"endColumn":16},{"ruleId":"374","severity":1,"message":"466","line":61,"column":18,"nodeType":"376","messageId":"377","endLine":61,"endColumn":27},{"ruleId":"374","severity":1,"message":"467","line":62,"column":10,"nodeType":"376","messageId":"377","endLine":62,"endColumn":17},{"ruleId":"374","severity":1,"message":"468","line":64,"column":10,"nodeType":"376","messageId":"377","endLine":64,"endColumn":23},{"ruleId":"374","severity":1,"message":"469","line":64,"column":25,"nodeType":"376","messageId":"377","endLine":64,"endColumn":41},{"ruleId":"374","severity":1,"message":"470","line":77,"column":10,"nodeType":"376","messageId":"377","endLine":77,"endColumn":21},{"ruleId":"374","severity":1,"message":"471","line":77,"column":23,"nodeType":"376","messageId":"377","endLine":77,"endColumn":37},{"ruleId":"374","severity":1,"message":"472","line":78,"column":10,"nodeType":"376","messageId":"377","endLine":78,"endColumn":28},{"ruleId":"374","severity":1,"message":"473","line":82,"column":9,"nodeType":"376","messageId":"377","endLine":82,"endColumn":21},{"ruleId":"374","severity":1,"message":"474","line":84,"column":8,"nodeType":"376","messageId":"377","endLine":84,"endColumn":11},{"ruleId":"374","severity":1,"message":"475","line":166,"column":7,"nodeType":"376","messageId":"377","endLine":166,"endColumn":22},{"ruleId":"374","severity":1,"message":"476","line":169,"column":11,"nodeType":"376","messageId":"377","endLine":169,"endColumn":20},{"ruleId":"374","severity":1,"message":"477","line":169,"column":22,"nodeType":"376","messageId":"377","endLine":169,"endColumn":27},{"ruleId":"374","severity":1,"message":"412","line":333,"column":9,"nodeType":"376","messageId":"377","endLine":333,"endColumn":20},{"ruleId":"374","severity":1,"message":"478","line":347,"column":7,"nodeType":"376","messageId":"377","endLine":347,"endColumn":21},{"ruleId":"374","severity":1,"message":"479","line":369,"column":7,"nodeType":"376","messageId":"377","endLine":369,"endColumn":20},{"ruleId":"374","severity":1,"message":"480","line":374,"column":13,"nodeType":"376","messageId":"377","endLine":374,"endColumn":24},{"ruleId":"374","severity":1,"message":"481","line":432,"column":7,"nodeType":"376","messageId":"377","endLine":432,"endColumn":17},{"ruleId":"374","severity":1,"message":"480","line":437,"column":13,"nodeType":"376","messageId":"377","endLine":437,"endColumn":24},{"ruleId":"374","severity":1,"message":"482","line":453,"column":10,"nodeType":"376","messageId":"377","endLine":453,"endColumn":26},{"ruleId":"374","severity":1,"message":"476","line":465,"column":11,"nodeType":"376","messageId":"377","endLine":465,"endColumn":20},{"ruleId":"374","severity":1,"message":"477","line":465,"column":22,"nodeType":"376","messageId":"377","endLine":465,"endColumn":27},{"ruleId":"374","severity":1,"message":"480","line":514,"column":13,"nodeType":"376","messageId":"377","endLine":514,"endColumn":24},{"ruleId":"406","severity":1,"message":"483","line":634,"column":5,"nodeType":"408","endLine":634,"endColumn":7,"suggestions":"484"},{"ruleId":"485","severity":1,"message":"486","line":652,"column":12,"nodeType":"376","messageId":"487","endLine":652,"endColumn":28},{"ruleId":"374","severity":1,"message":"488","line":656,"column":7,"nodeType":"376","messageId":"377","endLine":656,"endColumn":16},{"ruleId":"489","severity":1,"message":"490","line":677,"column":57,"nodeType":"491","messageId":"492","endLine":677,"endColumn":59},{"ruleId":"489","severity":1,"message":"490","line":694,"column":48,"nodeType":"491","messageId":"492","endLine":694,"endColumn":50},{"ruleId":"374","severity":1,"message":"493","line":701,"column":7,"nodeType":"376","messageId":"377","endLine":701,"endColumn":24},{"ruleId":"374","severity":1,"message":"494","line":20,"column":7,"nodeType":"376","messageId":"377","endLine":20,"endColumn":12},{"ruleId":"495","severity":2,"message":"496","line":57,"column":16,"nodeType":"376","messageId":"497","endLine":57,"endColumn":33},{"ruleId":"374","severity":1,"message":"383","line":2,"column":10,"nodeType":"376","messageId":"377","endLine":2,"endColumn":13},{"ruleId":"374","severity":1,"message":"382","line":2,"column":15,"nodeType":"376","messageId":"377","endLine":2,"endColumn":18},{"ruleId":"374","severity":1,"message":"422","line":2,"column":20,"nodeType":"376","messageId":"377","endLine":2,"endColumn":24},{"ruleId":"374","severity":1,"message":"498","line":2,"column":26,"nodeType":"376","messageId":"377","endLine":2,"endColumn":29},{"ruleId":"374","severity":1,"message":"499","line":2,"column":31,"nodeType":"376","messageId":"377","endLine":2,"endColumn":40},{"ruleId":"374","severity":1,"message":"423","line":2,"column":42,"nodeType":"376","messageId":"377","endLine":2,"endColumn":50},{"ruleId":"374","severity":1,"message":"500","line":2,"column":52,"nodeType":"376","messageId":"377","endLine":2,"endColumn":72},{"ruleId":"374","severity":1,"message":"501","line":1,"column":46,"nodeType":"376","messageId":"377","endLine":1,"endColumn":52},{"ruleId":"374","severity":1,"message":"502","line":4,"column":8,"nodeType":"376","messageId":"377","endLine":4,"endColumn":22},{"ruleId":"374","severity":1,"message":"503","line":4,"column":26,"nodeType":"376","messageId":"377","endLine":4,"endColumn":45},{"ruleId":"374","severity":1,"message":"447","line":8,"column":60,"nodeType":"376","messageId":"377","endLine":8,"endColumn":66},{"ruleId":"374","severity":1,"message":"379","line":8,"column":68,"nodeType":"376","messageId":"377","endLine":8,"endColumn":75},{"ruleId":"374","severity":1,"message":"446","line":9,"column":3,"nodeType":"376","messageId":"377","endLine":9,"endColumn":8},{"ruleId":"374","severity":1,"message":"504","line":9,"column":10,"nodeType":"376","messageId":"377","endLine":9,"endColumn":20},{"ruleId":"374","severity":1,"message":"505","line":9,"column":22,"nodeType":"376","messageId":"377","endLine":9,"endColumn":28},{"ruleId":"374","severity":1,"message":"506","line":9,"column":30,"nodeType":"376","messageId":"377","endLine":9,"endColumn":37},{"ruleId":"374","severity":1,"message":"423","line":15,"column":10,"nodeType":"376","messageId":"377","endLine":15,"endColumn":18},{"ruleId":"374","severity":1,"message":"422","line":15,"column":20,"nodeType":"376","messageId":"377","endLine":15,"endColumn":24},{"ruleId":"374","severity":1,"message":"436","line":15,"column":26,"nodeType":"376","messageId":"377","endLine":15,"endColumn":37},{"ruleId":"374","severity":1,"message":"437","line":15,"column":39,"nodeType":"376","messageId":"377","endLine":15,"endColumn":52},{"ruleId":"374","severity":1,"message":"451","line":15,"column":54,"nodeType":"376","messageId":"377","endLine":15,"endColumn":58},{"ruleId":"374","severity":1,"message":"507","line":18,"column":10,"nodeType":"376","messageId":"377","endLine":18,"endColumn":13},{"ruleId":"374","severity":1,"message":"508","line":22,"column":7,"nodeType":"376","messageId":"377","endLine":22,"endColumn":16},{"ruleId":"374","severity":1,"message":"472","line":84,"column":10,"nodeType":"376","messageId":"377","endLine":84,"endColumn":28},{"ruleId":"374","severity":1,"message":"509","line":120,"column":10,"nodeType":"376","messageId":"377","endLine":120,"endColumn":18},{"ruleId":"374","severity":1,"message":"510","line":120,"column":20,"nodeType":"376","messageId":"377","endLine":120,"endColumn":31},{"ruleId":"374","severity":1,"message":"458","line":121,"column":10,"nodeType":"376","messageId":"377","endLine":121,"endColumn":21},{"ruleId":"374","severity":1,"message":"459","line":121,"column":23,"nodeType":"376","messageId":"377","endLine":121,"endColumn":37},{"ruleId":"374","severity":1,"message":"511","line":124,"column":23,"nodeType":"376","messageId":"377","endLine":124,"endColumn":37},{"ruleId":"374","severity":1,"message":"512","line":126,"column":10,"nodeType":"376","messageId":"377","endLine":126,"endColumn":29},{"ruleId":"374","severity":1,"message":"513","line":127,"column":10,"nodeType":"376","messageId":"377","endLine":127,"endColumn":29},{"ruleId":"374","severity":1,"message":"462","line":130,"column":10,"nodeType":"376","messageId":"377","endLine":130,"endColumn":16},{"ruleId":"374","severity":1,"message":"514","line":137,"column":9,"nodeType":"376","messageId":"377","endLine":137,"endColumn":14},{"ruleId":"374","severity":1,"message":"515","line":139,"column":9,"nodeType":"376","messageId":"377","endLine":139,"endColumn":16},{"ruleId":"374","severity":1,"message":"516","line":144,"column":9,"nodeType":"376","messageId":"377","endLine":144,"endColumn":16},{"ruleId":"374","severity":1,"message":"517","line":147,"column":9,"nodeType":"376","messageId":"377","endLine":147,"endColumn":15},{"ruleId":"374","severity":1,"message":"518","line":148,"column":9,"nodeType":"376","messageId":"377","endLine":148,"endColumn":18},{"ruleId":"374","severity":1,"message":"472","line":152,"column":10,"nodeType":"376","messageId":"377","endLine":152,"endColumn":28},{"ruleId":"374","severity":1,"message":"519","line":152,"column":30,"nodeType":"376","messageId":"377","endLine":152,"endColumn":51},{"ruleId":"374","severity":1,"message":"520","line":158,"column":9,"nodeType":"376","messageId":"377","endLine":158,"endColumn":20},{"ruleId":"374","severity":1,"message":"521","line":170,"column":9,"nodeType":"376","messageId":"377","endLine":170,"endColumn":29},{"ruleId":"374","severity":1,"message":"522","line":228,"column":9,"nodeType":"376","messageId":"377","endLine":228,"endColumn":21},{"ruleId":"374","severity":1,"message":"480","line":233,"column":15,"nodeType":"376","messageId":"377","endLine":233,"endColumn":26},{"ruleId":"374","severity":1,"message":"482","line":279,"column":12,"nodeType":"376","messageId":"377","endLine":279,"endColumn":28},{"ruleId":"374","severity":1,"message":"480","line":284,"column":15,"nodeType":"376","messageId":"377","endLine":284,"endColumn":26},{"ruleId":"374","severity":1,"message":"523","line":311,"column":12,"nodeType":"376","messageId":"377","endLine":311,"endColumn":22},{"ruleId":"374","severity":1,"message":"524","line":314,"column":12,"nodeType":"376","messageId":"377","endLine":314,"endColumn":20},{"ruleId":"374","severity":1,"message":"525","line":318,"column":12,"nodeType":"376","messageId":"377","endLine":318,"endColumn":21},{"ruleId":"374","severity":1,"message":"526","line":397,"column":9,"nodeType":"376","messageId":"377","endLine":397,"endColumn":25},{"ruleId":"374","severity":1,"message":"527","line":406,"column":7,"nodeType":"376","messageId":"377","endLine":406,"endColumn":12},{"ruleId":"374","severity":1,"message":"528","line":425,"column":13,"nodeType":"376","messageId":"377","endLine":425,"endColumn":15},{"ruleId":"406","severity":1,"message":"529","line":432,"column":6,"nodeType":"408","endLine":432,"endColumn":8,"suggestions":"530"},{"ruleId":"374","severity":1,"message":"531","line":438,"column":9,"nodeType":"376","messageId":"377","endLine":438,"endColumn":24},{"ruleId":"374","severity":1,"message":"488","line":455,"column":9,"nodeType":"376","messageId":"377","endLine":455,"endColumn":18},{"ruleId":"374","severity":1,"message":"532","line":470,"column":9,"nodeType":"376","messageId":"377","endLine":470,"endColumn":18},{"ruleId":"374","severity":1,"message":"533","line":488,"column":9,"nodeType":"376","messageId":"377","endLine":488,"endColumn":19},{"ruleId":"489","severity":1,"message":"490","line":494,"column":50,"nodeType":"491","messageId":"492","endLine":494,"endColumn":52},{"ruleId":"374","severity":1,"message":"534","line":552,"column":11,"nodeType":"376","messageId":"377","endLine":552,"endColumn":23},{"ruleId":"374","severity":1,"message":"441","line":1,"column":52,"nodeType":"376","messageId":"377","endLine":1,"endColumn":60},{"ruleId":"374","severity":1,"message":"535","line":12,"column":28,"nodeType":"376","messageId":"377","endLine":12,"endColumn":36},{"ruleId":"374","severity":1,"message":"501","line":1,"column":46,"nodeType":"376","messageId":"377","endLine":1,"endColumn":52},{"ruleId":"374","severity":1,"message":"502","line":4,"column":8,"nodeType":"376","messageId":"377","endLine":4,"endColumn":22},{"ruleId":"374","severity":1,"message":"503","line":4,"column":26,"nodeType":"376","messageId":"377","endLine":4,"endColumn":45},{"ruleId":"374","severity":1,"message":"447","line":8,"column":60,"nodeType":"376","messageId":"377","endLine":8,"endColumn":66},{"ruleId":"374","severity":1,"message":"379","line":8,"column":68,"nodeType":"376","messageId":"377","endLine":8,"endColumn":75},{"ruleId":"374","severity":1,"message":"446","line":9,"column":3,"nodeType":"376","messageId":"377","endLine":9,"endColumn":8},{"ruleId":"374","severity":1,"message":"504","line":9,"column":10,"nodeType":"376","messageId":"377","endLine":9,"endColumn":20},{"ruleId":"374","severity":1,"message":"505","line":9,"column":22,"nodeType":"376","messageId":"377","endLine":9,"endColumn":28},{"ruleId":"374","severity":1,"message":"506","line":9,"column":30,"nodeType":"376","messageId":"377","endLine":9,"endColumn":37},{"ruleId":"374","severity":1,"message":"536","line":13,"column":13,"nodeType":"376","messageId":"377","endLine":13,"endColumn":25},{"ruleId":"374","severity":1,"message":"423","line":15,"column":10,"nodeType":"376","messageId":"377","endLine":15,"endColumn":18},{"ruleId":"374","severity":1,"message":"422","line":15,"column":20,"nodeType":"376","messageId":"377","endLine":15,"endColumn":24},{"ruleId":"374","severity":1,"message":"436","line":15,"column":26,"nodeType":"376","messageId":"377","endLine":15,"endColumn":37},{"ruleId":"374","severity":1,"message":"437","line":15,"column":39,"nodeType":"376","messageId":"377","endLine":15,"endColumn":52},{"ruleId":"374","severity":1,"message":"451","line":15,"column":54,"nodeType":"376","messageId":"377","endLine":15,"endColumn":58},{"ruleId":"374","severity":1,"message":"507","line":18,"column":10,"nodeType":"376","messageId":"377","endLine":18,"endColumn":13},{"ruleId":"374","severity":1,"message":"508","line":23,"column":7,"nodeType":"376","messageId":"377","endLine":23,"endColumn":16},{"ruleId":"374","severity":1,"message":"509","line":51,"column":10,"nodeType":"376","messageId":"377","endLine":51,"endColumn":18},{"ruleId":"374","severity":1,"message":"510","line":51,"column":20,"nodeType":"376","messageId":"377","endLine":51,"endColumn":31},{"ruleId":"374","severity":1,"message":"458","line":52,"column":10,"nodeType":"376","messageId":"377","endLine":52,"endColumn":21},{"ruleId":"374","severity":1,"message":"459","line":52,"column":23,"nodeType":"376","messageId":"377","endLine":52,"endColumn":37},{"ruleId":"374","severity":1,"message":"511","line":55,"column":23,"nodeType":"376","messageId":"377","endLine":55,"endColumn":37},{"ruleId":"374","severity":1,"message":"512","line":57,"column":10,"nodeType":"376","messageId":"377","endLine":57,"endColumn":29},{"ruleId":"374","severity":1,"message":"513","line":58,"column":10,"nodeType":"376","messageId":"377","endLine":58,"endColumn":29},{"ruleId":"374","severity":1,"message":"462","line":61,"column":10,"nodeType":"376","messageId":"377","endLine":61,"endColumn":16},{"ruleId":"374","severity":1,"message":"514","line":69,"column":9,"nodeType":"376","messageId":"377","endLine":69,"endColumn":14},{"ruleId":"374","severity":1,"message":"515","line":71,"column":9,"nodeType":"376","messageId":"377","endLine":71,"endColumn":16},{"ruleId":"374","severity":1,"message":"516","line":76,"column":9,"nodeType":"376","messageId":"377","endLine":76,"endColumn":16},{"ruleId":"374","severity":1,"message":"517","line":79,"column":9,"nodeType":"376","messageId":"377","endLine":79,"endColumn":15},{"ruleId":"374","severity":1,"message":"518","line":80,"column":9,"nodeType":"376","messageId":"377","endLine":80,"endColumn":18},{"ruleId":"374","severity":1,"message":"472","line":84,"column":10,"nodeType":"376","messageId":"377","endLine":84,"endColumn":28},{"ruleId":"374","severity":1,"message":"519","line":84,"column":30,"nodeType":"376","messageId":"377","endLine":84,"endColumn":51},{"ruleId":"489","severity":1,"message":"490","line":142,"column":52,"nodeType":"491","messageId":"492","endLine":142,"endColumn":54},{"ruleId":"374","severity":1,"message":"525","line":165,"column":14,"nodeType":"376","messageId":"377","endLine":165,"endColumn":23},{"ruleId":"374","severity":1,"message":"520","line":232,"column":9,"nodeType":"376","messageId":"377","endLine":232,"endColumn":20},{"ruleId":"374","severity":1,"message":"521","line":244,"column":9,"nodeType":"376","messageId":"377","endLine":244,"endColumn":29},{"ruleId":"374","severity":1,"message":"522","line":302,"column":9,"nodeType":"376","messageId":"377","endLine":302,"endColumn":21},{"ruleId":"374","severity":1,"message":"480","line":308,"column":15,"nodeType":"376","messageId":"377","endLine":308,"endColumn":26},{"ruleId":"374","severity":1,"message":"482","line":353,"column":12,"nodeType":"376","messageId":"377","endLine":353,"endColumn":28},{"ruleId":"374","severity":1,"message":"480","line":358,"column":15,"nodeType":"376","messageId":"377","endLine":358,"endColumn":26},{"ruleId":"374","severity":1,"message":"537","line":453,"column":9,"nodeType":"376","messageId":"377","endLine":453,"endColumn":21},{"ruleId":"374","severity":1,"message":"526","line":520,"column":9,"nodeType":"376","messageId":"377","endLine":520,"endColumn":25},{"ruleId":"374","severity":1,"message":"527","line":529,"column":7,"nodeType":"376","messageId":"377","endLine":529,"endColumn":12},{"ruleId":"374","severity":1,"message":"528","line":546,"column":13,"nodeType":"376","messageId":"377","endLine":546,"endColumn":15},{"ruleId":"406","severity":1,"message":"529","line":553,"column":6,"nodeType":"408","endLine":553,"endColumn":8,"suggestions":"538"},{"ruleId":"374","severity":1,"message":"531","line":559,"column":9,"nodeType":"376","messageId":"377","endLine":559,"endColumn":24},{"ruleId":"374","severity":1,"message":"488","line":576,"column":9,"nodeType":"376","messageId":"377","endLine":576,"endColumn":18},{"ruleId":"374","severity":1,"message":"532","line":591,"column":9,"nodeType":"376","messageId":"377","endLine":591,"endColumn":18},{"ruleId":"374","severity":1,"message":"533","line":609,"column":9,"nodeType":"376","messageId":"377","endLine":609,"endColumn":19},{"ruleId":"489","severity":1,"message":"490","line":615,"column":50,"nodeType":"491","messageId":"492","endLine":615,"endColumn":52},{"ruleId":"374","severity":1,"message":"534","line":666,"column":11,"nodeType":"376","messageId":"377","endLine":666,"endColumn":23},"no-native-reassign",["539"],"no-negated-in-lhs",["540"],"no-unused-vars","'EditFloormap' is defined but never used.","Identifier","unusedVar","'DisplayEntries' is defined but never used.","'Polygon' is defined but never used.","'Rectangle' is defined but never used.","'Container' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'PopUp' is defined but never used.","'Button' is defined but never used.","'Nav' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'Tabs' is defined but never used.","'PropTypes' is defined but never used.","'DashBoard' is defined but never used.","'Icon' is defined but never used.","'marker' is defined but never used.","'SelectionState' is defined but never used.","'history' is defined but never used.","'newLat' is assigned a value but never used.","'newLng' is assigned a value but never used.","'newName' is assigned a value but never used.","'changeHandler' is assigned a value but never used.","'changeHandler1' is assigned a value but never used.","'changeHandler2' is assigned a value but never used.","'position1' is assigned a value but never used.","'handleChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'markers'. Either include it or remove the dependency array.","ArrayExpression",["541"],"'DefaultIcon' is assigned a value but never used.","'handleUpdate' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'togglePopup' is assigned a value but never used.","'customMarkerIcon' is assigned a value but never used.","'Map1' is defined but never used.","'Link' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Card' is defined but never used.","'CardBody' is defined but never used.","'Grid' is defined but never used.","'TableHeaderRow' is defined but never used.","'TableEditColumn' is defined but never used.","'TableInlineCellEditing' is defined but never used.","'getRowId' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\'.","TemplateElement","unnecessaryEscape",["542","543"],"React Hook useEffect has missing dependencies: 'deleteHandler' and 'id'. Either include them or remove the dependency array. If 'setButtonVal' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["544"],"'ButtonGroup' is defined but never used.","'ButtonToolbar' is defined but never used.","'Label' is defined but never used.","'Tooltip' is defined but never used.","'SlickSliderStyle1' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'Map' is defined but never used.","'CircleMarker' is defined but never used.","'Popup' is defined but never used.","'Marker' is defined but never used.","'TileLayer' is defined but never used.","'ZoomControl' is defined but never used.","'users' is assigned a value but never used.","'Form' is defined but never used.","'Polyline' is defined but never used.","'useMapEvents' is defined but never used.","'popup' is defined but never used.","'text' is defined but never used.","'divIcon' is defined but never used.","'renderToStaticMarkup' is defined but never used.","'newPosition' is assigned a value but never used.","'setNewPosition' is assigned a value but never used.","'position' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'isEdit' is assigned a value but never used.","'floors' is assigned a value but never used.","'setFloors' is assigned a value but never used.","'blocks' is assigned a value but never used.","'setBlocks' is assigned a value but never used.","'newText' is assigned a value but never used.","'showDrawBlock' is assigned a value but never used.","'setShowDrawBlock' is assigned a value but never used.","'activeLayer' is assigned a value but never used.","'setActiveLayer' is assigned a value but never used.","'selectedLayerIndex' is assigned a value but never used.","'editLayerRef' is assigned a value but never used.","'map' is assigned a value but never used.","'handleEditFloor' is assigned a value but never used.","'layerType' is assigned a value but never used.","'layer' is assigned a value but never used.","'handleAddFloor' is assigned a value but never used.","'addBoundaries' is assigned a value but never used.","'_leaflet_id' is assigned a value but never used.","'addPolygon' is assigned a value but never used.","'handleLayerClick' is defined but never used.","React Hook useEffect has missing dependencies: 'mapLayers', 'refno', and 'updateFloor'. Either include them or remove the dependency array.",["545"],"no-redeclare","'handleLayerClick' is already defined.","redeclared","'_onCreate' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'changeHandlerText' is assigned a value but never used.","'Index' is defined but never used.","no-undef","'slickSliderStyle1' is not defined.","undef","'div' is defined but never used.","'CardTitle' is defined but never used.","'UncontrolledCollapse' is defined but never used.","'useMap' is defined but never used.","'LayersControl2' is defined but never used.","'ControlledLayerItem' is defined but never used.","'LayerGroup' is defined but never used.","'Circle' is defined but never used.","'GeoJSON' is defined but never used.","'set' is defined but never used.","'useStyles' is assigned a value but never used.","'boundary' is assigned a value but never used.","'setBoundary' is assigned a value but never used.","'setCustomLayer' is assigned a value but never used.","'activeFloorPolygons' is assigned a value but never used.","'activeFloorBoundary' is assigned a value but never used.","'fgRef' is assigned a value but never used.","'leaflet' is assigned a value but never used.","'polygon' is assigned a value but never used.","'center' is assigned a value but never used.","'rectangle' is assigned a value but never used.","'setSelectedLayerIndex' is assigned a value but never used.","'updateFloor' is assigned a value but never used.","'_onFeatureGroupReady' is assigned a value but never used.","'onShapeDrawn' is assigned a value but never used.","'onEditPath' is defined but never used.","'onCreate' is defined but never used.","'onDeleted' is defined but never used.","'addressCardStyle' is assigned a value but never used.","'floor' is assigned a value but never used.","'ml' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'mapLayers' and 'refno'. Either include them or remove the dependency array.",["546"],"'moveActiveFloor' is assigned a value but never used.","'_onEdited' is assigned a value but never used.","'_onDeleted' is assigned a value but never used.","'drawingLocal' is assigned a value but never used.","'DomEvent' is defined but never used.","'circleMarker' is defined but never used.","'detailsLocal' is assigned a value but never used.",["547"],"no-global-assign","no-unsafe-negation",{"desc":"548","fix":"549"},{"messageId":"550","fix":"551","desc":"552"},{"messageId":"553","fix":"554","desc":"555"},{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"560","fix":"562"},"Update the dependencies array to be: [markers, searchTerm]",{"range":"563","text":"564"},"removeEscape",{"range":"565","text":"566"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"567","text":"568"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [deleteHandler, id]",{"range":"569","text":"570"},"Update the dependencies array to be: [mapLayers, refno, updateFloor]",{"range":"571","text":"572"},"Update the dependencies array to be: [mapLayers, refno]",{"range":"573","text":"574"},{"range":"575","text":"574"},[2358,2370],"[markers, searchTerm]",[2874,2875],"",[2874,2874],"\\",[3371,3373],"[deleteHandler, id]",[16029,16031],"[mapLayers, refno, updateFloor]",[10262,10264],"[mapLayers, refno]",[13894,13896]]