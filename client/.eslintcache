[{"/Users/likhitha/Documents/cms/client/src/index.js":"1","/Users/likhitha/Documents/cms/client/src/App.js":"2","/Users/likhitha/Documents/cms/client/src/serviceWorker.js":"3","/Users/likhitha/Documents/cms/client/src/store.js":"4","/Users/likhitha/Documents/cms/client/src/utils/setAuthToken.js":"5","/Users/likhitha/Documents/cms/client/src/actions/authActions.js":"6","/Users/likhitha/Documents/cms/client/src/components/private-route/PrivateRoute.js":"7","/Users/likhitha/Documents/cms/client/src/components/layout/Navbar.js":"8","/Users/likhitha/Documents/cms/client/src/components/auth/Register.js":"9","/Users/likhitha/Documents/cms/client/src/components/auth/Login.js":"10","/Users/likhitha/Documents/cms/client/src/components/dashboard/Map1.js":"11","/Users/likhitha/Documents/cms/client/src/components/dashboard/Dashboard.js":"12","/Users/likhitha/Documents/cms/client/src/components/dashboard/services.js":"13","/Users/likhitha/Documents/cms/client/src/actions/types.js":"14","/Users/likhitha/Documents/cms/client/src/components/dashboard/Tabs.js":"15","/Users/likhitha/Documents/cms/client/src/components/dashboard/DisplayEntries.js":"16","/Users/likhitha/Documents/cms/client/src/reducers/index.js":"17","/Users/likhitha/Documents/cms/client/src/components/dashboard/Tab.js":"18","/Users/likhitha/Documents/cms/client/src/reducers/errorReducer.js":"19","/Users/likhitha/Documents/cms/client/src/reducers/authReducer.js":"20","/Users/likhitha/Documents/cms/client/src/components/dashboard/FloorMap.js":"21","/Users/likhitha/Documents/cms/client/src/components/dashboard/HomePage.jsx":"22","/Users/likhitha/Documents/cms/client/src/components/dashboard/EditFloormap.js":"23","/Users/likhitha/Documents/cms/client/src/components/dashboard/history.js":"24","/Users/likhitha/Documents/cms/client/src/components/dashboard/slickSliderStyle1.js":"25","/Users/likhitha/Documents/cms/client/src/components/dashboard/SlickSliderStyle1.js":"26","/Users/likhitha/Documents/cms/client/src/components/dashboard/ModalTemplate.js":"27","/Users/likhitha/Documents/cms/client/src/components/dashboard/ViewBuilding.js":"28","/Users/likhitha/Documents/cms/client/src/components/dashboard/LayerControl2.js":"29","/Users/likhitha/Documents/cms/client/src/components/dashboard/EditBuilding.js":"30"},{"size":451,"mtime":1606829565698,"results":"31","hashOfConfig":"32"},{"size":3163,"mtime":1616361334413,"results":"33","hashOfConfig":"32"},{"size":4948,"mtime":1606829565699,"results":"34","hashOfConfig":"32"},{"size":447,"mtime":1606829565699,"results":"35","hashOfConfig":"32"},{"size":331,"mtime":1606829565700,"results":"36","hashOfConfig":"32"},{"size":1650,"mtime":1606829565695,"results":"37","hashOfConfig":"32"},{"size":590,"mtime":1606829565698,"results":"38","hashOfConfig":"32"},{"size":1017,"mtime":1608682376758,"results":"39","hashOfConfig":"32"},{"size":5763,"mtime":1607606053792,"results":"40","hashOfConfig":"32"},{"size":5071,"mtime":1614415520699,"results":"41","hashOfConfig":"32"},{"size":7150,"mtime":1616361804003,"results":"42","hashOfConfig":"32"},{"size":1722,"mtime":1608679565728,"results":"43","hashOfConfig":"32"},{"size":955,"mtime":1615807011507,"results":"44","hashOfConfig":"32"},{"size":136,"mtime":1606829565696,"results":"45","hashOfConfig":"32"},{"size":1190,"mtime":1608158026388,"results":"46","hashOfConfig":"32"},{"size":5264,"mtime":1608157034026,"results":"47","hashOfConfig":"32"},{"size":207,"mtime":1606829565699,"results":"48","hashOfConfig":"32"},{"size":682,"mtime":1607637539256,"results":"49","hashOfConfig":"32"},{"size":248,"mtime":1607375463843,"results":"50","hashOfConfig":"32"},{"size":702,"mtime":1607375421322,"results":"51","hashOfConfig":"32"},{"size":7066,"mtime":1613423317034,"results":"52","hashOfConfig":"32"},{"size":1557,"mtime":1608192790318,"results":"53","hashOfConfig":"54"},{"size":32176,"mtime":1616228663409,"results":"55","hashOfConfig":"32"},{"size":84,"mtime":1608888543686,"results":"56","hashOfConfig":"32"},{"size":1616,"mtime":1609282261354,"results":"57","hashOfConfig":"32"},{"size":1616,"mtime":1609282261354,"results":"58","hashOfConfig":"32"},{"size":2072,"mtime":1613637516765,"results":"59","hashOfConfig":"32"},{"size":8372,"mtime":1616360775991,"results":"60","hashOfConfig":"32"},{"size":9010,"mtime":1616336860879,"results":"61","hashOfConfig":"32"},{"size":8390,"mtime":1616361539561,"results":"62","hashOfConfig":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"cee0ce",{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"65"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"65"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"65"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"65"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1aaztzc",{"filePath":"112","messages":"113","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"65"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"117","messages":"118","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"65"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"65"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"65"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/likhitha/Documents/cms/client/src/index.js",[],["132","133"],"/Users/likhitha/Documents/cms/client/src/App.js",["134"],"/Users/likhitha/Documents/cms/client/src/serviceWorker.js",[],"/Users/likhitha/Documents/cms/client/src/store.js",[],"/Users/likhitha/Documents/cms/client/src/utils/setAuthToken.js",[],"/Users/likhitha/Documents/cms/client/src/actions/authActions.js",[],"/Users/likhitha/Documents/cms/client/src/components/private-route/PrivateRoute.js",[],"/Users/likhitha/Documents/cms/client/src/components/layout/Navbar.js",[],"/Users/likhitha/Documents/cms/client/src/components/auth/Register.js",[],"/Users/likhitha/Documents/cms/client/src/components/auth/Login.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Map1.js",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Dashboard.js",["169","170","171","172"],"import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\n//import MapView from \"./MapView.js\";\nimport Map1 from \"./Map1.js\";\nimport { Link } from 'react-router-dom';\n//import {MapContainer,  Marker, Popup,  TileLayer } from \"react-leaflet\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n//import { useHistory } from 'react-router-dom';\n\nclass Dashboard extends Component {\n  onLogoutClick = e => {\n    e.preventDefault();\n    this.props.logoutUser();\n  };\n  \n  \n  render() {\n    const { user } = this.props.auth;\n\n    return (\n      <div >\n        {/* <span className=\"myClass\" style={{float : 'left', paddingRight : '5px'}} > </span> */}\n        {/* style=\"font-size: 20px; color:#4a54f1; text-align:center; padding-top:100px;\" */}\n        <p style={{fontSize: '20px', color: 'white'}}> Hi <i><b>{user.name}</b></i></p>\n               \n                {/* <MapView /> */}\n            <div>\n            \n            <button\n              style={{\n                width: \"150px\",\n                borderRadius: \"3px\",\n                letterSpacing: \"1.5px\",\n                marginTop: \"1rem\"\n                \n              }}\n              onClick={this.onLogoutClick}\n              className=\"btn btn-primary float-left\"\n            >\n              Logout\n            </button>\n            </div>\n          </div>\n        \n        \n    );\n  }\n}\n\nDashboard.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  { logoutUser }\n)(Dashboard);\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/services.js",["173"],"import axios from \"axios\"\n\nconst baseUrl = \"http://localhost:3010/data\"\n\n\nconst getAll = () =>{\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst getBuilding = bid => {\n    const request = axios.get(baseUrl + `/${bid}` )\n    return request.then(response => [response.data])\n}\n\n\nconst update = newEntry =>{\n    const request = axios.post(baseUrl, newEntry)\n    return request.then(response => response.data)\n}\n\nconst updateBuilding = (bid, entry) => {\n    const request = axios.put(baseUrl + `/${bid}`,entry)\n\n    return request.then(response => response.data)\n}\n\n\nconst deletion = entryId =>{\n    const request = axios.delete(baseUrl + `/${entryId}`)\n    return request.then(response => response.data)\n}\n\nconst deleteAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n\n}\n\nexport default {getAll, update, deletion, deleteAll, getBuilding, updateBuilding}","/Users/likhitha/Documents/cms/client/src/actions/types.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Tabs.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/DisplayEntries.js",["174","175","176","177","178","179","180","181","182","183","184"],"/*import React from \"react\"\n\nconst DisplayEntry = ({ name }) => {\n    return(\n        <div>\n            {name} \n        </div>\n    )\n}\n\nconst DisplayEntries = ({ names, regVal }) => {\n    const regExp = new RegExp(regVal, \"i\")\n    const filteredArray = names.filter((entry) => regExp.test(entry.name))\n    const namesArray = filteredArray.map((entry) => <DisplayEntry key={entry.id} name={entry.name} />)\n    return(\n    <div>\n        {namesArray}\n    </div>\n    )\n}\n\nexport default DisplayEntries*/\n\nimport React, {useState, useEffect} from \"react\"\nimport service from \"./services.js\"\nimport {Row, Col, Table, Card, CardBody} from 'reactstrap';\nimport { Grid,  TableHeaderRow, TableEditColumn, TableInlineCellEditing } from '@devexpress/dx-react-grid-bootstrap4';\nimport { Link } from \"react-router-dom\";\nconst getRowId = row => row.id;\n\nconst DisplayEntry = ({ name, street, apartment,doorno, region, country, id }) => {\n    const [ name1, setName ] = useState(name)\n    const [ street1, setStreet] = useState(street)\n    const [ apartment1, setApartment] = useState(apartment)\n    const [ doorno1, setDoorno] = useState(doorno)\n    const [ region1, setRegion] = useState(region)\n    const [ country1, setCountry] = useState(country)\n  //  const [ newNumber, setNumber ] = useState(number)\n    const [ buttonVal, setButtonVal ] = useState(\"\")\n    const [markers, setMarkers] = useState([])\n   \n\n      useEffect(()=>{\n        service\n        .getAll()\n        .then(latlng =>{\n          console.log(\"returning\", latlng)\n          setMarkers(latlng)\n        })\n      },[])\n\n    // const [columns] = useState([\n    //     {\n    //         title: \"Name\",\n    //         name: \"name\",\n    //     },\n    //     {\n    //         title: \"Lat\",\n    //         name: \"lat\",\n    //         sortable: true,\n    //     },\n    //     {\n    //         title: \"Lng\",\n    //         name: \"lng\",\n    //         sortable: true,\n    //     },\n    // ]);\n    // const [rows, setRows] = useState([\n    //     {newName},\n    //     {newLat},\n    //     {newLng}\n        \n    // ]);\n    // const [editingCells, setEditingCells] = useState([]);\n\n    // const deleteHandler = (id) =>{\n    //     const handler = () =>{\n    //         if(window.confirm(`Do you really want to delete ${name}\\'s Building details?`)){\n    //             service.deletion(id)\n    //             .then(response => {\n                    \n    //                 setName(\"\")\n    //                 setStreet(\"\")\n    //                 setApartment(\"\")\n    //               setDoorno(\"\")\n    //               setRegion(\"\")\n    //               setCountry(\"\")\n    //             setButtonVal(\"\")\n    //             })\n    //         }\n    //     }\n    //     return handler\n    // }\n    const deleteHandler = (id) => {\n        const handler = () =>{\n                   if(window.confirm(`Do you really want to delete ${name}\\'s Building details?`)){\n  \n        service\n        .deletion(id)\n          .then(response => {\n            setName(\"\")\n                    setStreet(\"\")\n                    setApartment(\"\")\n                  setDoorno(\"\")\n                  setRegion(\"\")\n                   setCountry(\"\")\n                setButtonVal(\"\")\n          })\n        }\n    }\n    return handler\n          \n      };\n\n    useEffect(()=>{\n        setButtonVal(<button onClick={deleteHandler(id)}>delete</button>)\n    },\n    [])\n\n    return(\n       \n        <div>\n            <Table hover className=\"table\" items={markers}>\n   <thead>\n      <tr>\n         <th scope=\"col\">#</th>\n         <th scope=\"col\">Name</th>\n         <th scope=\"col\">Address</th>\n         <th scope=\"col\">Delete</th>\n         \n      </tr>\n   </thead>\n   <tbody>\n     \n                                {\n                                    markers.map((item, index) => (\n                                       \n                                        <tr key={index}>\n                                            <td >{item.id} </td>\n                                           <td> <Link   to={item.link} className=\"nav-link font-weight-bold \">{name1} </Link></td>\n                                            <td >{street1}   {apartment1} {doorno1} {region1} {country1}</td>\n                                            {buttonVal} \n\n                                        </tr>\n                                    ))\n                                }\n\n\n   </tbody>\n   </Table>\n            {/* {newName}\n            {newLat}\n            {newLng}\n            {buttonVal} */}\n           \n\n            {/* <Table className=\"table\" items={{DisplayEntries}}>   \n      <thead>\n    \n    <th>Name</th>\n    <th>Lat</th>\n    <th>Lng</th>\n  \n          </thead>          \n \n<tbody>\n \n  <tr>\n    \n  </tr>\n  </tbody>\n  </Table> */}\n\n        </div> \n    )\n}\n\nconst DisplayEntries = ({ names, regVal }) => {\n    const regExp = new RegExp(regVal, \"i\")\n    const filteredArray = names.filter((entry) => regExp.test(entry.name))\n    const namesArray = filteredArray.map((entry) => <DisplayEntry key={entry.id} name={entry.description} street={entry.street} apartment={entry.Apartment} doorno={entry.doornum} region={entry.region} country={entry.country} id={entry.id} />)\n    \n    return(\n    <div>\n        {namesArray}\n    </div>\n    )\n}\n\nexport default DisplayEntries","/Users/likhitha/Documents/cms/client/src/reducers/index.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Tab.js",[],"/Users/likhitha/Documents/cms/client/src/reducers/errorReducer.js",[],"/Users/likhitha/Documents/cms/client/src/reducers/authReducer.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/FloorMap.js",["185","186","187","188","189","190","191","192","193","194"],"/* eslint-disable jsx-a11y/anchor-is-valid */\n //import React from 'react';\n //import { LayersControl as BaseLayersControl } from 'react-leaflet';\n import { CardBody,Card,ButtonGroup, Button,ButtonToolbar, Label } from 'reactstrap';\n import React, { useEffect, useState } from \"react\";\n \n import {Tooltip, Polygon, Popup, Rectangle, Marker, TileLayer , Map,LayersControl, LayerGroup} from 'react-leaflet';\nimport service from './services';\nimport Map1 from './Map1';\nimport { Link } from \"react-router-dom\";\nimport SlickSliderStyle1 from \"./SlickSliderStyle1\";\n\n\nconst FloorMap  = () => {\n  \n    \n\n    const [markers, setMarkers] = useState([])\n   \n\n      useEffect(()=>{\n        service\n        .getAll()\n        .then(latlng =>{\n          console.log(\"returning\", latlng)\n          setMarkers(latlng)\n        })\n      },[])\n\n\n\n     const refno=window.location.pathname.replace('/FloorMap/','');\n      \n     const handleClick = (e) => {\n       console.log(e.target.value)\n      debugger;\n    }\n\n  return (\n\n    <Card >\n    <CardBody>\n\n<div>\n\n\n{/* <div> <Link to=\"/Map1\" className=\"btn btn-primary\"><p class=\"ri-home-4-line\"> Home </p></Link></div> */}\n\n\n\n\n\n                        {markers.filter(item => item.id===refno).map(filteredName => (\n                            <div>\n                              \n                             {/* <h1 className=\"display-7\">#{filteredName.id}-{filteredName.description}</h1> */}\n                             <h1 className=\"display-9\">{filteredName.street}   {filteredName.Apartment} {filteredName.doornum} {filteredName.region} {filteredName.country}</h1>\n                             {/* <ButtonToolbar className=\"mt-3\">\n                             <ButtonGroup className=\"mr-2\">\n                                 {filteredName.floors.map((item2, index) => (\n                                       \n                                      <Button color=\"secondary\" data-key={index}\n                                      \n                                      onClick={handleClick}> {item2.description}</Button>\n\n  \n                                   ))}\n                                   </ButtonGroup></ButtonToolbar> */}\n                             </div>\n\n\n\n\n                        ))}\n                        \n                        \n                        </div>\n                        <div>\n                        \n                        {markers.filter(item => item.id===refno).map(filteredName => (\n                            <div>\n\n                         <Map\n                                    style={ { height: \"500px\", width: \"100%\"}}\n                                    \n                                    center={[filteredName.latitude, filteredName.longitude]} zoom={16} maxZoom={17}\n                                    \n                                >\n                                  \n\n                                        {/* <TileLayer\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    /> */}\n\n<LayersControl position=\"topright\">\n<LayersControl.BaseLayer checked name={filteredName.name}>\n  \n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {/* {filteredName.floors.map((floor, index) => (\n        <LayersControl.Overlay checked name={floor.description}>\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color}\n                             />\n        </LayerGroup>\n        </LayersControl.Overlay>\n      \n      ))} */}\n       \n         {/* <Polygon positions={floor.boundaries} color={floor.color}\n                             />  */}\n      </LayersControl.BaseLayer>\n      <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {filteredName.floors.map((floor, index) => (\n        <LayersControl.BaseLayer checked name={floor.description}>\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color}\n                             />\n{\n  floor.blocks.map((block, ind) => (\n    <Polygon positions={block.bounds}>\n          {/* <Tooltip sticky>        {block.text}</Tooltip> */}\n      {/* <Popup direction=\"center\" >\n        {block.text}\n      </Popup> */\n      \n      <Marker position={block.marker}>\n              <Popup>\n                    <span>{block.text}</span>\n                    {/* <div className=\"iq-card-body\" id={'post-slider'}>\n                              <SlickSliderStyle1 slidesToShow={2}>\n                              <li className=\"d-flex align-items-center\">\n                                {block.images.map((img, idx) => (\n                                  <div>\n                                  <div className=\"post-image\">\n                                  <a href=\"#\">\n                                      <img src={img} alt=\"post-image\" className=\"img-fluid rounded\" />\n                                  </a>\n                                  </div>\n                                  <div className=\"post-content pl-3\">\n\n                                  <div className=\"text-center d-flex align-items-center justify-content-between\">\n                                      \n                                  </div>\n                                  </div>\n                                  </div>\n                                ))}\n                                   \n                                 </li>\n                                 </SlickSliderStyle1>\n                                 </div> */}\n              </Popup>\n              \n      </Marker>\n\n      }\n    </Polygon> \n                             \n                             \n\n  ))\n}\n\n        </LayerGroup>\n        </LayersControl.BaseLayer>\n      \n      ))}\n\n\n     \n      \n      \n      \n      \n{/* {filteredName.floors.map((floor, index) => (\n      \n))} */}\n      \n      </LayersControl>\n\n                                    {/* {filteredName.floors.map((floor, index) => (\n                            //           <Polygon positions={floor.boundaries} color={floor.color}\n                            //  /> \n                            <LayersControl.Overlay name={floor.description} id={floor.floorno}>\n                            <LayerGroup>\n                            <Polygon positions={floor.boundaries} color={floor.color}\n                              /> \n                            </LayerGroup>\n                          </LayersControl.Overlay>\n\n                                    ))} */}\n\n\n\n                             </Map> \n                             </div>\n                        ))\n                        }\n                        </div>\n    </CardBody>\n    </Card>  \n\n  );\n}\n\nexport default FloorMap;\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/HomePage.jsx",["195","196","197","198","199","200","201","202","203","204","205","206","207","208"],"/Users/likhitha/Documents/cms/client/src/components/dashboard/EditFloormap.js",["209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254"],"import { CardBody,Card,ButtonGroup, ButtonToolbar,Form,FormGroup,Label,Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\nimport React, { useRef, useEffect, useState, useMap} from \"react\";\nimport { Col, Row } from \"reactstrap\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport \"./assets/leaflet.css\"\nimport \"./assets/leaflet.draw.css\"\nimport {  Map, TileLayer, FeatureGroup, Marker,Polyline, Popup, Polygon, Tooltip, Rectangle,  LayersControl, LayerGroup,useMapEvents,useLeaflet} from 'react-leaflet';\nimport service from './services';\nimport { makeStyles, Button } from \"@material-ui/core\";\nimport { popup } from 'leaflet';\nimport { text } from 'body-parser';\nimport { divIcon } from 'leaflet';\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\n\nconst useStyles = makeStyles(theme => ({\n  map: ({\n      height: `calc(90vh - 90px)`,\n      width: '60%',\n      zIndex: 0\n  }),\n  buttonWrapper: {\n      zIndex: 1,\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      marginLeft: \"30%\",\n      marginBottom: \"8%\",\n      transform: \"translateX(-50%)\",\n  },\n  buttonStyle: {\n    margin:\"10px\",\n    \n  },\n  headerWrapper: {\n      zIndex: 1,\n      marginLeft: theme.spacing(3),\n      marginTop: theme.spacing(1),\n  }\n}));\n\nconst modalStyles = {\n  width   :    500,\n  height  :    500\n}\n\n\nconst EditFloorMap = (props) => \n{\n  const [addFloor, setAddFloor] = useState(false);\n  //const mapGlobal = useMap();\n  const classes = useStyles(props)\n  const editRef = useRef();\n  const [markers, setMarkers] = useState([])\n  const [newPosition, setNewPosition] = useState([])\n  //const [markers1, setMarkers1] = useState([]);\n  const [position, setPosition] = useState([]);\n  const [mapLayers, setMapLayers] = useState([]);\n  const [ newDesc, setNewDesc ] = useState('')\n  const [isEdit, setIsEdit] = useState('')\n  const [floors, setFloors ] = useState('')\n  const [blocks, setBlocks] = useState('')\n  const [newText, setNewText] = useState('')\n  const [drawing, setDrawing] = useState(false);\n  const [showDrawBlock, setShowDrawBlock] = useState(false);\n  const [polyFlag, setPolyFlag] = useState('');\n  const [activeFloor, setActiveFloor] = useState('')\n  const [buildingId, setBuildingId] =  useState('')\n  //const editRef = useRef();\n  //const [map, setMap] = useState(null);\n  const [editBoundaries, setEditBoundaries] = useState(false);\n  const [editBlock, setEditBlock] = useState(false);\n  const [blockDescription,setBlockDescription] = useState(false);\n  const [deleteFloor, setDeleteFloor] = useState(false);\n  const [blockName, setBlockName] = useState('')\n  const [blockDesc, setBlockDesc] = useState('')\n  const [icon, setIcon] = useState('')\n  const [activeLayer, setActiveLayer] = useState('')\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n  //const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  const leaflet = useLeaflet();\n  const editLayerRef = React.useRef();\n  let drawControlRef = React.useRef();\n  let {map} = leaflet;\n  \n \n  \n\n  const updateFloor = {\n\n    floorno: 0,\n    description: \"newDesc\",\n    color: '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6),\n    blocks: [],\n    boundaries: []\n  }\n  \n  function toggle() {\n    setAddFloor(!addFloor);\n  }\n  function toggleBlock() {\n    setEditBlock(!editBlock);\n  }\n  \n  function toggleBoundaries() {\n    setEditBoundaries(!editBoundaries);\n  }\n\n  function toggleBlockDescription() {\n    setBlockDescription(!blockDescription);\n  }\n\n  function toggleDeleteFloor() {\n    setDeleteFloor(!deleteFloor);\n  }\n\n  const onChangeName = e => {\n    e.preventDefault();\n    setBlockName(e.target.value);\n    \n  };\n  const onChangeDesc = e => {\n    e.preventDefault();\n    \n    setBlockDesc(e.target.value);\n    \n\n  };\n  const onChangeIcon = e => {\n    e.preventDefault();\n    \n    setIcon(e.target.value);\n\n  };\n  //const polygonCenter = markers[0].floors[0].blocks[0]._bounds.getCenter();\n\n  // const onSubmit = e => {\n  //   e.preventDefault();\n\n  //   const newUser = {\n  //     name: blockName,\n  //     description: blockDesc,\n  //     icon: icon\n      \n  //   };\n  // }\n  // function submitHandler(e) {\n  //   e.preventDefault();\n  //   setBlockName(e.target.value);\n  //   setBlockDesc(e.target.value);\n  //   setIcon(e.target.value);\n  // }\n\n  function GlobalMapComponent() {\n    const mapGlobal = useMap()\n    mapGlobal.on( 'baselayerchange', function (e) {\n      console.log('Layer name -> ', e.name);\n      //console.log('Layer URL -> ', e.layer.options.url);\n      //console.log('Layer attribution -> ', e.layer.options.attribution);\n  });\n    console.log('map center:', mapGlobal.getCenter())\n    return null\n  }\n   \n  \nconst handleEditFloor = (e) => {\n  setBuildingId(e.target.value)\n  setDrawing(true)\n  const { layerType, layer } = e;\n  debugger;\n  //  if (layerType === \"polygon\") {\n  //     const { _leaflet_id } = layer;\n  //     setMapLayers((layers) => [\n  //       ...layers,\n  //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n  //     // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n  //     ]);\n  //   }\n    if (buildingId===markers[0].floors[0].boundaryLeaflet_id){\n    if (drawing) {\n            //editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n           editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n      \n        } else {\n          editRef.current.leafletElement._toolbars.edit._modes.edit.handler.save() \n           editRef.current.leafletElement._toolbars.edit._modes.edit.handler.disable()\n        }\n      }\n//     console.log(layer)\n// console.log(mapLayers)\n//         e.layer.on('click', () => {\n//           debugger;\n//             editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n//         })\n//         e.layer.on('contextmenu', () => {\n//             //do some contextmenu action here\n//         })\n//         e.layer.bindTooltip(\"Text\", \n//             {\n//               className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n//               sticky: true,\n//               direction: 'right'\n//             }\n//         );\n}\n\nconst handleReset = (e) => {\n  debugger;\n  \n  \n  for (var i = 0; i < markers[0].floors.length; i++) { \n    if(markers[0].floors[i].description===activeFloor.name){\n    \n      \n        markers[0].floors[i].boundaries= markers[0].floors[i].boundaries_backup;\n        markers[0].floors[i].boundaries_backup = [];\n        break;\n}\n}\n}\n// const handleFloorReset = (e) => {\n//   debugger;\n//   if(polyFlag==='B')\n//   for (var i = 0; i < markers[0].floors.length; i++) { \n//     if(markers[0].floors[i].description===activeFloor.name){\n    \n      \n//         markers[0].floors[i].blocks[i].bounds= markers[0].floors[i].blocks[i].bounds_backup;\n//         markers[0].floors[i].blocks[i].bounds_backup = [];\n//         break;\n// }\n// }\n// }\nconst handleBlock = (e) => {\n  setPolyFlag('L');\n  debugger;\n  for (var i = 0; i < markers[0].floors.length; i++) { \n    if(markers[0].floors[i].description===activeFloor.name){\n    \n      if(markers[0].floors[i].boundaries.length>0) {\n        \n\n\n        markers[0].floors[i].blocks[i].bound_backup = markers[0].floors[i].blocks[i].bounds;\n        markers[0].floors[i].blocks[i].bounds = [];\n        \n      }\nbreak;\n}\n}\n//toggleBlockDescription();\n//toggleBlockDescription();\nif (!drawing) {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n} else {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n}\n\nsetDrawing(!drawing)\n}\n\nconst handleBoundaries = (e) => {\n  debugger;\n  for (var i = 0; i < markers[0].floors.length; i++) { \n    if(markers[0].floors[i].description===activeFloor.name){\n    \n      if(markers[0].floors[i].boundaries.length>0) {\n\n        markers[0].floors[i].boundaries_backup = markers[0].floors[i].boundaries;\n        markers[0].floors[i].boundaries = [];\n        }\nbreak;\n}\n}\nif (!drawing) {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n} else {\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n  editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n}\n\nsetDrawing(!drawing)\n\n}\n\nconst handleManageBoundaries = (e) => {\n    debugger;\n    console.log(activeFloor);\n    console.log(markers);\n    setPolyFlag('B')\n    for (var i = 0; i < markers[0].floors.length; i++) { \n      if(markers[0].floors[i].description===activeFloor.name){\n        debugger;\n        if(markers[0].floors[i].boundaries.length>0) {\n          debugger;\n          toggleBoundaries();\n         }\n\n     else {\n        const { layerType, layer } = e;\n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n      setMapLayers((layers) => [\n        ...layers,\n    { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n      // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n      ]);\n    }\n    debugger;\n\n\n    if (!drawing) {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n  } else {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n  }\n\n  setDrawing(!drawing)\n\n      }\n      }\n}\n    \n  \n    \ndebugger;\n  }\n   \n  const handleClick = () => {\n\n        \n    //Edit this method to perform other actions\n\n    if (!drawing) {\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n    } else {\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n    }\n    setDrawing(!drawing)\n}\n\nconst handleAddFloor = () => {\n  debugger;\n}\n\n\nconst handleClickFloor = () => {\n  debugger;\n   service\n   .getBuilding(refno)\n   .then(building => {\n    console.log(\"returning\", building)\n   updateFloor.description=newDesc\n  building[0].floors.push(updateFloor)\n\n  setMarkers(building)\n\n  \n\n\n})\n}\n\nconst addBoundaries = (e) =>{\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    setMapLayers((layers) => [\n         ...layers,\n        {  latlngs: layer.getLatLngs()[0] },\n       ]);\n\n    // setMapLayers((layers) => [\n    //   ...layers,\n    //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    // ]);\n  }\n  setDrawing(false)\n\n  e.layer.on('click', () => {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  })\n  e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n  })\n  e.layer.bindTooltip(\"Text\", \n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visiblecg4',\n        sticky: true, \n        direction: 'right'\n      }\n  );\n\n\n\n}\n\nconst handleMap = (e) =>\n{\n  debugger;\n  const map = editRef.current.leafletElement._map;\n  \n\n    \n  \n  map.on(\"baselayerchange\", (activeFloor, activeLayer) => {\n//     //do whatever\ndebugger;\n\n    console.log(activeFloor);\n    \n    \n   \n   \n     setActiveFloor(activeFloor);\n     \nconsole.log(map);\n\n})\n}\n\n\n\n\nconst addPolygon = (e) =>{\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    setMapLayers((layers) => [\n         ...layers,\n        {  latlngs: layer.getLatLngs()[0] },\n       ]);\n\n    \n  }\n  setDrawing(false)\n\n  \n \n\n\n\n}\nfunction handleLayerClick(e) {\n  setSelectedLayerIndex(e.target.activeFloor._leaflet_id);\n}\n\n\n\nconst onBlockDrawn = (e) => {\n  debugger;\n  setPolyFlag('L')\n  \n  console.log(e);\n\n  const { layerType, layer } = e;\n  toggleBlockDescription();\n\n  for (var j = 0; j < markers[0].floors.length; j++) { \n      if(markers[0].floors[j].description===activeFloor.name){\n        \n        if(markers[0].floors[j].boundaries.length>0) {\n          debugger;\n          \n          \n\n          if (!drawing) {\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n        } else {\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n        }\n\n      \n        setDrawing(!drawing)\n          \n           \n           }\n          //   else {\n          //    debugger;\n          //    toggleBlock();\n          //  }\n          //  else{\n          //    <popup>Please add boundaries before adding blocks</popup>\n          //  }\n      }\n}\n  \n}\n\n\n\n\n\n\n\n\nconst onShapeDrawn = (e) => {\n  debugger;\n  \n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    for (var j = 0; j < markers[0].floors.length; j++) { \n      if(markers[0].floors[j].description===activeFloor.name){\n        if(polyFlag==='B'){\n          // if(markers[0].floors[j].boundaries.length>0) {\n          //         debugger;\n          \n          //       }\n          \n          //    else{\n               \n               markers[0].floors[j].boundaries=[];\n               debugger;\n               for (var k=0; k < layer._latlngs[0].length; k++ )\n               \n               {\n\n                 \n                 var point = [layer._latlngs[0][k].lat, layer._latlngs[0][k].lng];\n                markers[0].floors[j].boundaries.push(point);\n                \n                //markers[0].floors[j].boundaryCenter.push(boundCenter);\n               }\n               //markers[0].floors[j].boundaries= layer._latlngs\n               markers[0].floors[j].boundaryLeaflet_id = layer._leaflet_id;\n               markers[0].floors[j].boundaryCenter = [layer._bounds.getCenter()];\n             //}\n        }\n         else if(polyFlag==='L'){\n          var tempArray = [];\n          //var tempCenter = [];\n\n          for (var n=0; n < layer._latlngs[0].length; n++){\n            \n            var pointBlock = [layer._latlngs[0][n].lat, layer._latlngs[0][n].lng];\n            \n            tempArray.push(pointBlock);\n            //tempCenter.push(polygonCenter);\n          }\n          var polygonCenter = [layer._bounds.getCenter()];\n          var polygonId = layer._leaflet_id;\n         \n          debugger;\n\n          var blockObj = {id:polygonId,name:blockName,description:blockDesc,icon:icon,bounds:tempArray,center:polygonCenter}\n       \n          markers[0].floors[j].blocks.push(blockObj);\n          \n          blockObj = {};\n          debugger;\n\n          editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n\n        }\n      //}\n          \n       \n    }\n  }\n    // setMapLayers((layers) => [\n    //   ...layers,\n    //   [  _leaflet_id,  layer.getLatLngs()[0] ],\n    //   // { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    //  //[ layer.getLatLngs()[0] ]  ,\n    // ]);\n\n    // \n   \n   \n    return (\n    \n      <div>\n        {markers.map((name) => (\n          <p>{name.description}{polyFlag}\n         <GlobalMapComponent />\n         </p>\n        ))}\n      </div>\n    )\n     \n  }\n  setDrawing(false)\n\n  e.layer.on('click', () => {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  })\n \n  e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n  })\n  e.layer.bindTooltip(\"Text\", \n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n        sticky: true,\n        direction: 'right'\n      }\n  );\n}\nfunction onMounted(ctl) {\n  drawControlRef.current = ctl;\n}\n\n\n\n  useEffect(()=>{\n    debugger;\n  \n    service\n    .getBuilding(refno)\n    .then(latlng =>{\n      //console.log(LayersControl.getActiveBaseLayer().name)\n      console.log(\"returning\", latlng)\n      debugger;\n      updateFloor.floorno = latlng[0].floors.length+1;\n      //setMarkers(...markers, latlng)\n      setMarkers(latlng)\n      debugger;\n    })\n    console.log(mapLayers)\n\n  },[])\n  \n  const refno=window.location.pathname.replace('/EditFloorMap/','');\n\n  const handleSaveFloor = (e) => {\n    e.preventDefault()\n    debugger;\n\n    service\n    .updateBuilding(markers[0].id, markers[0])\n    \n  }\n  const handleDeleteFloor = (e) => {\n    e.preventDefault()\n    debugger;\n\n  }\n\n  function handleLayerClick(e) {\n    setSelectedLayerIndex(e.target.markers.floors.blocks.id);\n  }\n\nconst _onCreate = (e) => {\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n\n    setMapLayers((layers) => [\n      ...layers,\n      { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    ]);\n  }\n};\n\n\nconst _onEdited = (e) => {\n  console.log(e);\n  const {\n    layers: { _layers },\n  } = e;\n\n  Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    setMapLayers((layers) =>\n      layers.map((l) =>\n        l.id === _leaflet_id\n          ? { ...l, latlngs: { ...editing.latlngs[0] } }\n          : l\n      )\n    );\n  });\n};\n\nconst _onDeleted = (e) => {\n  console.log(e);\n  const {\n    layers: { _layers },\n  } = e;\n\n  Object.values(_layers).map(({ _leaflet_id }) => {\n    setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n  });\n};\n\nconst changeHandlerDesc = (event) => setNewDesc(event.target.value)\nconst updateIsEdit = (e, value) => setIsEdit(value);\nconst changeHandlerText = (event) => setNewText(event.target.value)\n\n// const iconMarkup = renderToStaticMarkup(\n//   markers[0].floors[0].blocks[0].description\n//  );\n\n\n// const textDesc = divIcon  ({\n//   html: iconMarkup\n// });\n \n\n  return ( \n    \n          <div id=\"container\">\n                          \n<Card id=\"container\">\n  <CardBody>\n    \n                   {\n                     \n                   markers.filter(item => item.id===refno).map(filteredName => (\n                        <div>\n                          <Row className=\"iq-example-row\" id=\"container\">\n                        <Row className=\"row\">\n                        <Col className=\"col-4\">\n                                              \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Building Id</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.id} disabled/>\n                                              </FormGroup>\n                                             \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Building Name</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.description} />\n                                              </FormGroup>\n                                            \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Street</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.street} />\n                                              </FormGroup>\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Apartment</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.Apartment} />\n                                              </FormGroup>\n\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Doornum</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.doornum} />\n                                              </FormGroup>\n\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Region</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.region} />\n                                              </FormGroup>\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Country</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.country} />\n\n\n{/* {filteredName.floors.map((floor) => (\n  <div>\n  <h4>Description:</h4>\n  <input onChange={changeHandlerDesc}\n  value={floor.newDesc}\n  /><br/>\n   \n  <button onClick={handleClickFloor}>AddFloor</button>\n\n\n\n\n  {floor.blocks.map((block) => (\n    <div>\n      <h4>Text:</h4>\n      <input onChange={changeHandlerText}\n  value={block.newText}\n  /><br/>\n  <button onClick= {handleClick}>AddPolygon</button><br/>\n  \n\n    </div>\n    \n\n    \n  ))} \n  \n  </div>\n  \n\n))} */}\n\n\n\n\n                                              </FormGroup>\n                                              \n\n                                              </Col>\n                        <Col className=\"col-8\">\n                        <Col lg={4}>\n                        <Button className=\"btn btn-success\" color=\"primary\" onClick={() => toggle(\"addFloor\")}> AddFloor </Button>{' '}\n\n                        {/*Modal*/}\n                        <Modal isOpen={addFloor} toggle={() => toggle(\"addFloor\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggle(\"addFloor\")}>Add Floor</ModalHeader>\n                        <ModalBody>\n                        \n                          \n                          <p>Floor: {filteredName.floors.length+1}</p>\n                          \n                            <p>Enter Floor Description</p>\n                            <input type=\"text\" onChange={changeHandlerDesc} value={newDesc} \n                            lur={updateIsEdit}/>\n\n                        </ModalBody>\n                        <ModalFooter>\n\n                        <Button color=\"primary\" onClick={() => {\n                          toggle(\"addFloor\");\n                          // handleAddFloor(); \n                          handleClickFloor();\n                      \n                      }}>OK</Button>{' '}\n                        <Button color=\"secondary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n                        </ModalFooter>\n                        </Modal>\n           <Button className=\"btn btn-success\" color=\"primary\" onClick={handleSaveFloor}> SaveFloor </Button>\n           <Button className=\"btn btn-success\" color=\"primary\" onClick={() => toggleDeleteFloor(\"deleteFloor\")}> DeleteFloor </Button>{' '}\n\n{/*Modal*/}\n<Modal isOpen={deleteFloor} toggle={() => toggleDeleteFloor(\"deleteFloor\")} className=\"modal-sm\">\n                    <ModalHeader className=\"btn btn-primary\" toggle={() => toggleDeleteFloor(\"deleteFloor\")}>Delete Floor</ModalHeader>\n<ModalBody>\n                    <h5> Are you sure you want to delete the {activeFloor.name} floor?</h5>\n</ModalBody>\n<ModalFooter>\n\n<Button color=\"primary\" onClick={() => {\n  toggleDeleteFloor(\"deleteFloor\");\n  // handleAddFloor(); \n  handleDeleteFloor();\n\n}}>OK</Button>{' '}\n<Button color=\"secondary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n</ModalFooter>\n</Modal>\n                        \n            <Button className=\"btn btn-success\" color=\"primary\" onClick={handleReset}> reset </Button> \n\n                                                {/* < ModalTemplate /> */}\n                        {/* <Card className=\"card iq-mb-3\">\n                           \n                            <CardBody className=\"card-body\">\n                                <Button onClick={handleClickFloor} color={\"primary\"}>AddFloor</Button>\n                            </CardBody>\n                            \n                        </Card> */}\n                    </Col>\n                                              <Map \n                                              style={ { height: \"auto%\", width: \"auto\"}}\n            center={[filteredName.latitude, filteredName.longitude]} zoom={17.5} maxZoom={100}\n\n            zoomControl={true}  \n            className={classes.map} \n            ref={editRef}\n            onClick={handleMap}>\n\n\n\n\n<LayersControl position=\"topright\">\n<LayersControl.BaseLayer checked={true} name={filteredName.name}>\n  \n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n         \n      </LayersControl.BaseLayer>\n      <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n                <FeatureGroup ref={editRef}>\n                    <EditControl\n                    ref={editRef}\n                    position='bottomright'\n                   onCreated={onShapeDrawn}\n                   onMounted={onMounted}\n                    //onCreated={_onCreate}\n                  onEdited={_onEdited}\n                  onDeleted={_onDeleted}\n                  \n                    //here you can specify your shape options and which handler you want to enable\n                    draw={{\n                        rectangle: false,\n                        circle: false,\n                        polyline: false,\n                        circlemarker: false,\n                        marker: false,\n                        polygon:  {\n                             allowIntersection: false,\n                            shapeOptions: {\n                                color: \"#ff0000\"\n                            },\n                         }\n                    }}\n                    />\n                     \n                </FeatureGroup>\n                {filteredName.floors.map((floor, index) => (\n                 \n        <LayersControl.BaseLayer checked={false} name={floor.description}>\n\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color} \n                             />\n{\n   floor.blocks.map((block, ind) => (\n    <Polygon positions={block.bounds}>\n    \n        <label position={block.center}>\n           <Tooltip permanent direction=\"center\" class=\"labelText\"> {block.description}</Tooltip> </label>\n       <Popup direction=\"center\" >\n       <Button\n                \n                className=\"btn btn-primary\"\n                onClick={() => toggleBlock(\"editBlock\")}\n\n                >\n                     Edit\n                </Button>\n                \n                <Modal isOpen={editBlock} toggle={() => toggleBlock(\"editBlock\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBlock(\"editBlock\")}>Are you sure you want to edit the block</ModalHeader>\n                        <ModalBody>\n                        <Button color=\"primary\" onClick={handleBlock}>Yes</Button>\n                        <Button color=\"secondary\" onClick={() => toggleBlock(\"editBlock\")}>Cancel</Button>\n                        </ModalBody>\n                        \n                        </Modal>\n      </Popup>\n      \n     \n\n      \n    </Polygon> \n    \n                             \n                             \n\n  ))\n}\n\n        </LayerGroup>\n        </LayersControl.BaseLayer>\n             ))}\n              </LayersControl>\n                \n                \n            </Map>\n            <ButtonGroup className=\"btn-group\">\n           <div className={classes.buttonStyle}>\n           \n                <Button \n                className=\"btn btn-primary\"\n                \n                    // disabled={filteredName.floors.length>2}\n                    variant=\"contained\"\n                    onClick={onBlockDrawn}>\n                    \n                    AddBlock\n                </Button>\n                {/* <div className={classes.buttonWrapper}> */}\n                <Modal isOpen={blockDescription} toggle={() => toggleBlockDescription(\"blockDescription\")} className=\"modal-sm\" style={modalStyles}>\n                \n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBlockDescription(\"blockDescription\")}>Enter the block details</ModalHeader>\n                        <ModalBody>\n                        <Card className=\"iq-card\">\n                    <CardBody className=\"iq-card-body\">\n                    <form>\n                   \n                          Name: <input\n                  onChange={onChangeName}\n                  value={blockName}\n                  type=\"text\"\n                \n                /><br/>\n                          Description: <input\n                  onChange={onChangeDesc}\n                  value={blockDesc}\n                  type=\"text\"\n                \n                /><br/>\n                          icon: <input\n                  onChange={onChangeIcon}\n                  value={icon}\n                  type=\"url\"\n                \n                /><br/>\n                          </form>\n                         \n                          </CardBody>\n                          </Card>\n\n                        </ModalBody>\n                        <ModalFooter>\n                       {/* <Button color=\"primary\" >submit</Button>  */}\n                        <Button color=\"secondary\" onClick={() => toggleBlockDescription(\"blockDescription\")}>Ok</Button>\n                        </ModalFooter>\n                        \n                        \n                        </Modal>\n\n                <Button\n                \n                className=\"btn btn-primary\"\n                onClick={handleManageBoundaries}\n\n                >\n                      Manage Boundaries\n                </Button>\n                <Modal isOpen={editBoundaries} toggle={() => toggleBoundaries(\"editBoundaries\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggleBoundaries(\"editBoundaries\")}>Are you sure you want to edit the Boundaries</ModalHeader>\n                        <ModalBody>\n                        <Button color=\"primary\" onClick={handleBoundaries}>Yes</Button>\n                        <Button color=\"secondary\" onClick={() => toggleBoundaries(\"editBoundaries\")}>Cancel</Button>\n                        </ModalBody>\n                        \n                        </Modal>\n                 </div> \n                 </ButtonGroup>\n                 \n            {/* </div> */}\n            {/* <div classname={classes.buttonWrapper}>\n              <Button\n                   >Save</Button>\n\n            </div> */}\n            {/* <pre className=\"text-left\">\n\n\n\n              { \n              \n              JSON.stringify(mapLayers, 0, 2)}</pre> */}\n            \n                             </Col> \n                             \n                             </Row>\n                             </Row>\n                             \n\n\n\n\n\n                                      </div>\n                                      \n  \n                  ))} \n                  \n                  \n                  </CardBody>\n\n</Card>\n                   \n                   </div>)\n}\n\n\nexport default EditFloorMap;\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/history.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/slickSliderStyle1.js",["255","256"],"/Users/likhitha/Documents/cms/client/src/components/dashboard/SlickSliderStyle1.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/ModalTemplate.js",["257","258","259","260","261","262","263"],"import React from 'react';\nimport { Row, Col, Card, div, CardTitle, CardBody, UncontrolledCollapse, Button, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\n\n\n\nclass ModalTemplate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modelAddFloorModal: false\n            // model2: false,\n            // model3: false,\n            // model4: false,\n            // model5: false,\n            // model6: false,\n            // model7: false,\n            // model8: false,\n            // model9: false,\n        };\n    }\n\n    // componentDidMount() {\n    //     setTimeout(function () {\n    //         index();\n    //     }, 800);\n    // }\n\n    toggle = (model_id) => {\n        this.setState({\n            [model_id]: !this.state[model_id]\n        });\n    };\n\n    render() {\n\n        return (\n            <>\n                \n\n\n                                {/*Small modal*/}\n                                <Button color=\"primary\" onClick={() => this.toggle(\"modelAddFloorModal\")}> AddFloor </Button>{' '}\n\n                                {/*Modal*/}\n                                <Modal isOpen={this.state.modelAddFloorModal} toggle={() => this.toggle(\"modelAddFloorModal\")} className=\"modal-sm\">\n                                    <ModalHeader toggle={() => this.toggle(\"modelAddFloorModal\")}>Modal title</ModalHeader>\n                                    <ModalBody>\n                                        <p>Modal body text goes here.</p>\n                                    </ModalBody>\n                                    <ModalFooter>\n                                        <Button color=\"primary\" onClick={() => this.toggle(\"modelAddFloorModal\")}>Save changes</Button>{' '}\n                                        <Button color=\"secondary\" onClick={() => this.toggle(\"modelAddFloorModal\")}>Cancel</Button>\n                                    </ModalFooter>\n                                </Modal>\n                            \n            </>\n        );\n    }\n}\n\nexport default ModalTemplate;\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/ViewBuilding.js",["264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299"],"import React, { useRef, useEffect, useState, useMap } from \"react\";\nimport service from './services';\nimport { EditControl } from \"react-leaflet-draw\";\nimport LayersControl2, { ControlledLayerItem } from \"./LayerControl2\";\n\nimport {\n  Map, TileLayer, FeatureGroup, useLeaflet, LayersControl, Marker, Polygon,\n  Popup, LayerGroup, Circle, GeoJSON\n} from \"react-leaflet\";\nimport Control from 'react-leaflet-control';\n\nimport L from \"leaflet\";\n\nimport { CardBody, Card, ButtonGroup, ButtonToolbar, Form, FormGroup, Label, Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\n\nfunction EditableLayer(props) {\n  const leaflet = useLeaflet();\n  const editLayerRef = React.useRef();\n  const mapRef = props.mapRef;\n\n  let drawControlRef = React.useRef();\n\n  let { map } = leaflet;\n\n  useEffect(() => {\n\n    if (!props.showDrawControl) {\n      map.removeControl(drawControlRef.current);\n    } else {\n      map.addControl(drawControlRef.current);\n    }\n\n    editLayerRef.current.leafletElement.clearLayers();\n\n    editLayerRef.current.leafletElement.addLayer(props.layer);\n    props.layer.on(\"click\", function (e) {\n      props.onLayerClicked(e, drawControlRef.current);\n    });\n  }, [props, map]);\n\n  function onMounted(ctl) {\n    drawControlRef.current = ctl;\n  }\n\n  return (\n    <div>\n      <FeatureGroup ref={editLayerRef}>\n        <EditControl\n          position=\"bottomright\"\n          onMounted={onMounted}\n          {...props}\n        />\n      </FeatureGroup>\n    </div>\n  );\n}\n\nfunction EditableGroup(props) {\n\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  function handleLayerClick(e, drawControl) {\n    setSelectedLayerIndex(e.target.feature.properties.editLayerId);\n  }\n\n\n\n\n  let dataLayer = new L.GeoJSON(props.data);\n  let layers = [];\n  let i = 0;\n  dataLayer.eachLayer((layer) => {\n    layer.feature.properties.editLayerId = i;\n    layer.pathOptions = { color: 'red' };\n    layers.push(layer);\n    i++;\n  }).bind(this);\n  const purpleOptions = { color: 'purple' }\n  return (\n    <div>\n      {layers.map((layer, i) => {\n\n        return (\n          <EditableLayer\n            key={i}\n            layer={layer}\n            pathOptions={purpleOptions}\n            showDrawControl={i === selectedLayerIndex}\n            onLayerClicked={handleLayerClick}\n            mapRef={props.map}\n          />\n        );\n\n      })}\n    </div>\n  );\n}\n\n\nconst ViewBuilding = (props) => {\n\n  const [markers, setMarkers] = useState([])\n  const [details, setDetails] = useState('')\n  const [newPosition, setNewPosition] = useState([])\n\n  const [mapLayers, setMapLayers] = useState([]);\n  const [customLayer, setCustomLayer] = useState('');\n  const purpleOptions = { color: 'purple' }\n  const mapRef = useRef();\n  const fgRef = useRef();\n  const refno = window.location.pathname.replace('/ViewBuilding/', '');\n  const polygon = [\n    \n  ]\n  const center = [51.505, -0.09]\n  const rectangle = [\n    [51.49, -0.08],\n    [51.5, -0.06],\n  ]\n\n  const [selectedLayerIndex, setSelectedLayerIndex] = useState(0);\n\n  const _onFeatureGroupReady = (ref) => {\n    if (ref !== undefined && ref !== null) {\n      let leafletFG = ref.leafletElement;\n      if (customLayer.length > 0) {\n        customLayer.eachLayer(layer => leafletFG.addLayer(layer));\n      }\n    }\n  }\n\n  function onFloorSelect(e, data) {\n    const index = e.target.value;\n    // let localFloorLayers = customLayer;\n    // localFloorLayers = mapLayers[0].layers.getLayers()[0];\n    //localFloorLayers= [];\n    // localFloorLayers.push(mapLayers[index].layers);\n    setCustomLayer(markers[index]);\n\n\n    debugger;\n  }\n  function handleLayerClick(e, drawControl) {\n    setSelectedLayerIndex(e.target.feature.properties.editLayerId);\n  }\n\n  const addressCardStyle = {\n    backgroundImage: `url(${require('./33.png')})`,\n\n    backgroundSize: 'cover',\n\n    height: \"423px\",\n\n  }\n  let layers = [];\n  let i = 0;\n  let floor = {};\n  useEffect(() => {\n\n    service\n      .getBuilding(refno)\n      .then(selBuilding => {\n        console.log(\"returning\", selBuilding)\n\n        setMarkers(selBuilding[0].floors);\n        const detailsLcl = details;\n        \n          setDetails(selBuilding[0]);  \n        let ml = mapLayers;\n        ml = [];\n\n\n        for (let ix = 0; ix < selBuilding[0].floors.length; ix++) {\n          floor = selBuilding[0].floors[ix];\n\n          let dataLayer = new L.GeoJSON(floor.features);\n          //let ml = mapLayers;\n\n          // dataLayer.eachLayer((layer) => {\n          //   //layer.data = floor;\n          //   layer.feature.properties.editLayerId = i;\n          //   layer.pathOptions = { color: 'red' };\n          //   layers.push(layer);\n          //   i++;\n          // });\n\n          ml.push({ layers: dataLayer, floor: floor });\n\n        }\n\n\n        setMapLayers(ml);\n        // let dataLayer2 = new L.GeoJSON(selBuilding[0].floors);\n        //         let loclLayer = customLayer;\n\n\n        //         loclLayer.push(dataLayer2.getLayers());\n        //          let newLayer = loclLayer[0];\n        //         setCustomLayer(newLayer);\n\n\n\n      })\n  }, [])\n\n\n\n  // useEffect(() => {\n\n\n  //     service\n  //         .getBuilding(refno)\n  //         .then(latlng => {\n  //             //console.log(LayersControl.getActiveBaseLayer().name)\n  //          //   console.log(\"returning\", latlng)\n\n  //             setMarkers(...markers, latlng)\n  //             //setMarkers(latlng[0])\n  //             console.log(\"markers\", markers)\n\n\n  //         })\n\n\n  // }, [])\n\n  return (\n\n    <div>\n\n      <div className=\"row\" style={{ margin: \".6%\" }}>\n\n        <div className=\"col-lg-4\">\n          <div className=\"iq-card iq-card-block iq-card-stretch iq-card-height bg-transparent\">\n            <div className=\"iq-card-body rounded p-0\" style={addressCardStyle} >\n              <div className=\"iq-caption\">\n                <h1>{details.name}</h1>\n                <h3>{details.description}</h3>\n                <h3>{details.Apartment} {markers.street}</h3>\n                <h3>{details.region} {markers.pincode}</h3>\n                <h3>{details.country}</h3>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n        <div className=\"col-lg-8\">\n          <div className=\"iq-card overflow-hidden\">\n\n            <div id=\"home-chart-02\">\n              <Map center={[60.21846434365596, 24.811831922452843]} zoom={17} ref={mapRef} >\n\n                <LayersControl position=\"topright\">\n                  <LayersControl.BaseLayer\n                    checked={false}\n                    name=\"Esri WorldImagery\"\n                    group=\"BaseLayers\"\n                  >\n                    <TileLayer\n                      url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                      attribution='&copy; <a href=\"Esri &mdash\">Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community</a> contributors'\n                    />\n                  </LayersControl.BaseLayer >\n                  <LayersControl.BaseLayer\n                    checked={true}\n                    name=\"OpenStreetMap\"\n                    group=\"BaseLayers\"\n                  >\n                    <TileLayer\n                      attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                  </LayersControl.BaseLayer >\n\n                </LayersControl>\n\n                <GeoJSON key={Math.random()}\n                  data={customLayer}\n                ></GeoJSON>\n\n                <GeoJSON key={Math.random()}\n                  data={details.boundary}\n                ></GeoJSON>\n               \n\n                <Control position=\"topright\" >\n                  {\n                    markers.map((mLr, didx) => (\n\n\n\n                      <div>\n\n                        <button class=\"primary\" value={didx} onClick={onFloorSelect} style={{\"font-size\": \"1.5rem\",\"margin-left\":\".05rem\"}}>\n                          {mLr.name}\n                        </button>\n\n                       \n                      </div>\n                    ))\n\n                  }\n                </Control>\n\n\n              </Map>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n\n    </div>\n  )\n}\n\n\nexport default ViewBuilding;","/Users/likhitha/Documents/cms/client/src/components/dashboard/LayerControl2.js",["300","301"],"import React, { Children, cloneElement, Component, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Control, DomUtil, DomEvent } from \"leaflet\";\nimport { withLeaflet, MapControl, LeafletProvider } from \"react-leaflet\";\nimport { IconButton } from \"@material-ui/core\";\nimport LayerIcon from \"@material-ui/icons/Layers\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport TerrainIcon from \"@material-ui/icons/Terrain\";\nimport RecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nconst icons = {\n  BaseLayers: <TerrainIcon />,\n  Rectangles: <StopIcon />,\n  Circles: <RecordIcon />\n};\n\nexport class ControlledLayer extends Component {\n  componentDidUpdate({ checked }) {\n    if (this.props.leaflet.map == null) {\n      return;\n    }\n    // Handle dynamically (un)checking the layer => adding/removing from the map\n    if (this.props.checked === true && (checked == null || checked === false)) {\n      this.props.leaflet.map.addLayer(this.layer);\n    } else if (\n      checked === true &&\n      (this.props.checked == null || this.props.checked === false)\n    ) {\n      this.props.leaflet.map.removeLayer(this.layer);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeLayerControl(this.layer);\n  }\n\n  addLayer() {\n    throw new Error(\"Must be implemented in extending class\");\n  }\n\n  removeLayer(layer) {\n    this.props.removeLayer(layer);\n  }\n\n  render() {\n    const { children } = this.props;\n    return children ? (\n      <LeafletProvider value={this.contextValue}>{children}</LeafletProvider>\n    ) : null;\n  }\n}\n\nexport class ControlledLayerItem extends ControlledLayer {\n  constructor(props) {\n\n    \n    super(props);\n    this.contextValue = {\n      ...props.leaflet,\n      layerContainer: {\n        addLayer: this.addLayer.bind(this),\n        removeLayer: this.removeLayer.bind(this)\n      }\n    };\n  }\nbackUpLayer = {};\n  addLayer = layer => {\n    this.layer = layer; // Keep layer reference to handle dynamic changes of props\n    const { addGroupedLayer, checked, name, group } = this.props;\n    addGroupedLayer(layer, name, checked, group);\n  };\n}\n\nclass LayerControl extends MapControl {\n  constructor(props, context) {\n    super(props);\n    this.controlProps = {\n      addGroupedLayer: this.addGroupedLayer.bind(this),\n      removeLayer: this.removeLayer.bind(this),\n      leaflet: props.leaflet\n    };\n    this._layers = {};\n\n    this.state = {\n      menuOpen: false,\n      layers: {},\n      menus: []\n    };\n  }\n\n  openMenu = () => {\n    this.setState({ menuOpen: true });\n  };\n  closeMenu = () => {\n    this.setState({ menuOpen: false });\n  };\n\n  addGroupedLayer = (layer, name, checked, group) => {\n    if (checked && this.props.leaflet.map != null) {\n      this.props.leaflet.map.addLayer(layer);\n    }\n\n    this.setState((prevState, props) => {\n      let currentLayers = { ...prevState.layers };\n      let currentGroup = currentLayers[group];\n\n      currentGroup = currentGroup\n        ? [\n            ...currentGroup.filter(x => x.name !== name),\n            { layer, name, checked, group }\n          ]\n        : [{ layer, name, checked, group }];\n      currentLayers[group] = currentGroup;\n      return {\n        layers: currentLayers\n      };\n    });\n\n    // bad implementation\n\n    let currentGroup = this._layers[group];\n\n    currentGroup = currentGroup\n      ? [\n          ...currentGroup.filter(x => x.name !== name),\n          { layer, name, checked, group }\n        ]\n      : [{ layer, name, checked, group }];\n\n    let layers = { ...this._layers };\n    layers[group] = currentGroup;\n\n    this._layers = layers;\n  };\n\n  removeLayer(layer) {\n    if (this.props.leaflet.map != null) {\n      this.props.leaflet.map.removeLayer(layer);\n    }\n  }\n  //create and return a leaflet object you want to extend\n  createLeafletElement(props) {\n    // extend control from leaflet\n    const MyControl = Control.extend({\n      // there are only two options we can have here for extending a control\n      // https://leafletjs.com/reference-1.5.0.html#control\n\n      // Should return the container DOM element for the control and add listeners on relevant map events\n      onAdd: map => {\n        this.container = DomUtil.create(\"div\");\n        this.map = map;\n        return this.container;\n      },\n      // this one is optional\n      onRemove: map => {}\n    });\n\n    // return new instance of our control and pass it all the props\n    return new MyControl(props);\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n      \n    super.updateLeafletElement(fromProps, toProps);\n    console.log(fromProps, toProps);\n    // this.forceUpdate();\n  }\n\n  componentDidMount(props) {\n    super.componentDidMount();\n    this.forceUpdate();\n    // render react component\n  }\n\n  toggleLayer = layerInput => {\n    const { layer, name, checked, group } = layerInput;\n    console.log(layer, name, checked, group);\n    let layers = { ...this.state.layers };\n\n    layers[group] = layers[group].map(l => {\n    \n        if (l.name === name) {\n        l.checked = true;//!l.checked;\n        debugger;\n        for (var prop in this.props.leaflet.map._layers) {\n            console.log(this.props.leaflet.map._layers[prop]);\n        \n        }    \n\n        this.props.leaflet.map.addLayer(layer)\n       \n      }else{\n        l.checked = false;\n        \n        //this.removeLayer(layer)\n      }\n\n    //   l.checked? this.props.leaflet.map.addLayer(layer) &&\n    //                 console.log(name, \"adding this layer\")\n    //     : this.removeLayer(layer);\n\n      return l;\n    });\n\n    this.setState({\n      layers\n    });\n  };\n\n  onCollapseClick = name => {\n    const { menus } = this.state;\n\n    menus.includes(name)\n      ? this.setState({\n          menus: [...this.state.menus.filter(x => x !== name)]\n        })\n      : this.setState({\n          menus: [...menus, name]\n        });\n  };\n\n  isMenuOpen = name => {\n    let open = this.state.menus.includes(name);\n    return open;\n  };\n\n  render() {\n    if (!this.leafletElement || !this.leafletElement.getContainer()) {\n      return null;\n    }\n    // console.log(this.state.baseLayers);\n    return (\n      <React.Fragment>\n        {ReactDOM.createPortal(\n          <Paper\n            onMouseEnter={this.openMenu}\n            onMouseLeave={this.closeMenu}\n            {...this.props}\n          >\n            {this.state.menuOpen && (\n              <div style={{ padding: 10 }}>\n                {Object.keys(this.state.layers).map(g => {\n                  return (\n                    <React.Fragment key={g}>\n                      <ListItem\n                        button\n                        onClick={() => this.onCollapseClick(`${g}`)}\n                      >\n                        <ListItemIcon>{icons[g]}</ListItemIcon>\n                        <ListItemText primary={g} />\n                        {this.isMenuOpen(g) ? <ExpandLess /> : <ExpandMore />}\n                      </ListItem>\n                      <Typography />\n                      <Divider />\n                      <Collapse\n                        in={this.isMenuOpen(g)}\n                        timeout=\"auto\"\n                        unmountOnExit\n                      >\n                        <List>\n                          {this.state.layers[g].map(l => {\n                            return (\n                              <ListItem key={l.name}>\n                                <ListItemIcon>\n                                  <Checkbox\n                                    onClick={() => this.toggleLayer(l)}\n                                    edge=\"start\"\n                                    checked={l.checked}\n                                  />\n                                </ListItemIcon>\n                                <ListItemText primary={l.name} />\n                              </ListItem>\n                            );\n                          })}\n                        </List>\n                      </Collapse>\n                    </React.Fragment>\n                  );\n                })}\n              </div>\n            )}\n            {!this.state.menuOpen && (\n              <IconButton>\n                <LayerIcon />\n              </IconButton>\n            )}\n          </Paper>,\n          this.leafletElement.getContainer()\n        )}\n        {Children.map(this.props.children, child => {\n          return child ? cloneElement(child, this.controlProps) : null;\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withLeaflet(LayerControl);\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/EditBuilding.js",["302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337"],{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","replacedBy":"341"},{"ruleId":"342","severity":1,"message":"343","line":28,"column":8,"nodeType":"344","messageId":"345","endLine":28,"endColumn":20},{"ruleId":"342","severity":1,"message":"346","line":5,"column":8,"nodeType":"344","messageId":"345","endLine":5,"endColumn":22},{"ruleId":"342","severity":1,"message":"347","line":10,"column":10,"nodeType":"344","messageId":"345","endLine":10,"endColumn":17},{"ruleId":"342","severity":1,"message":"348","line":10,"column":26,"nodeType":"344","messageId":"345","endLine":10,"endColumn":35},{"ruleId":"342","severity":1,"message":"349","line":12,"column":17,"nodeType":"344","messageId":"345","endLine":12,"endColumn":26},{"ruleId":"342","severity":1,"message":"350","line":12,"column":28,"nodeType":"344","messageId":"345","endLine":12,"endColumn":31},{"ruleId":"342","severity":1,"message":"351","line":12,"column":33,"nodeType":"344","messageId":"345","endLine":12,"endColumn":36},{"ruleId":"342","severity":1,"message":"352","line":12,"column":38,"nodeType":"344","messageId":"345","endLine":12,"endColumn":43},{"ruleId":"342","severity":1,"message":"353","line":12,"column":45,"nodeType":"344","messageId":"345","endLine":12,"endColumn":51},{"ruleId":"342","severity":1,"message":"354","line":15,"column":10,"nodeType":"344","messageId":"345","endLine":15,"endColumn":13},{"ruleId":"342","severity":1,"message":"355","line":15,"column":15,"nodeType":"344","messageId":"345","endLine":15,"endColumn":22},{"ruleId":"342","severity":1,"message":"356","line":15,"column":24,"nodeType":"344","messageId":"345","endLine":15,"endColumn":31},{"ruleId":"342","severity":1,"message":"357","line":15,"column":33,"nodeType":"344","messageId":"345","endLine":15,"endColumn":43},{"ruleId":"342","severity":1,"message":"358","line":15,"column":45,"nodeType":"344","messageId":"345","endLine":15,"endColumn":52},{"ruleId":"342","severity":1,"message":"359","line":16,"column":8,"nodeType":"344","messageId":"345","endLine":16,"endColumn":12},{"ruleId":"342","severity":1,"message":"360","line":17,"column":8,"nodeType":"344","messageId":"345","endLine":17,"endColumn":17},{"ruleId":"342","severity":1,"message":"361","line":18,"column":8,"nodeType":"344","messageId":"345","endLine":18,"endColumn":17},{"ruleId":"342","severity":1,"message":"362","line":20,"column":10,"nodeType":"344","messageId":"345","endLine":20,"endColumn":14},{"ruleId":"342","severity":1,"message":"363","line":20,"column":16,"nodeType":"344","messageId":"345","endLine":20,"endColumn":22},{"ruleId":"342","severity":1,"message":"364","line":21,"column":10,"nodeType":"344","messageId":"345","endLine":21,"endColumn":24},{"ruleId":"342","severity":1,"message":"365","line":23,"column":8,"nodeType":"344","messageId":"345","endLine":23,"endColumn":15},{"ruleId":"342","severity":1,"message":"366","line":37,"column":10,"nodeType":"344","messageId":"345","endLine":37,"endColumn":16},{"ruleId":"342","severity":1,"message":"367","line":38,"column":10,"nodeType":"344","messageId":"345","endLine":38,"endColumn":16},{"ruleId":"342","severity":1,"message":"368","line":39,"column":10,"nodeType":"344","messageId":"345","endLine":39,"endColumn":17},{"ruleId":"342","severity":1,"message":"369","line":56,"column":9,"nodeType":"344","messageId":"345","endLine":56,"endColumn":22},{"ruleId":"342","severity":1,"message":"370","line":57,"column":9,"nodeType":"344","messageId":"345","endLine":57,"endColumn":23},{"ruleId":"342","severity":1,"message":"371","line":58,"column":9,"nodeType":"344","messageId":"345","endLine":58,"endColumn":23},{"ruleId":"342","severity":1,"message":"372","line":64,"column":9,"nodeType":"344","messageId":"345","endLine":64,"endColumn":18},{"ruleId":"342","severity":1,"message":"373","line":72,"column":9,"nodeType":"344","messageId":"345","endLine":72,"endColumn":21},{"ruleId":"374","severity":1,"message":"375","line":84,"column":6,"nodeType":"376","endLine":84,"endColumn":18,"suggestions":"377"},{"ruleId":"342","severity":1,"message":"378","line":94,"column":7,"nodeType":"344","messageId":"345","endLine":94,"endColumn":18},{"ruleId":"342","severity":1,"message":"379","line":114,"column":9,"nodeType":"344","messageId":"345","endLine":114,"endColumn":21},{"ruleId":"342","severity":1,"message":"380","line":134,"column":9,"nodeType":"344","messageId":"345","endLine":134,"endColumn":20},{"ruleId":"342","severity":1,"message":"381","line":145,"column":9,"nodeType":"344","messageId":"345","endLine":145,"endColumn":20},{"ruleId":"342","severity":1,"message":"382","line":152,"column":9,"nodeType":"344","messageId":"345","endLine":152,"endColumn":25},{"ruleId":"342","severity":1,"message":"383","line":6,"column":8,"nodeType":"344","messageId":"345","endLine":6,"endColumn":12},{"ruleId":"342","severity":1,"message":"384","line":7,"column":10,"nodeType":"344","messageId":"345","endLine":7,"endColumn":14},{"ruleId":"342","severity":1,"message":"385","line":9,"column":27,"nodeType":"344","messageId":"345","endLine":9,"endColumn":33},{"ruleId":"342","severity":1,"message":"386","line":9,"column":35,"nodeType":"344","messageId":"345","endLine":9,"endColumn":40},{"ruleId":"387","severity":1,"message":"388","line":40,"column":1,"nodeType":"389","endLine":40,"endColumn":82},{"ruleId":"342","severity":1,"message":"351","line":26,"column":9,"nodeType":"344","messageId":"345","endLine":26,"endColumn":12},{"ruleId":"342","severity":1,"message":"350","line":26,"column":14,"nodeType":"344","messageId":"345","endLine":26,"endColumn":17},{"ruleId":"342","severity":1,"message":"390","line":26,"column":26,"nodeType":"344","messageId":"345","endLine":26,"endColumn":30},{"ruleId":"342","severity":1,"message":"391","line":26,"column":32,"nodeType":"344","messageId":"345","endLine":26,"endColumn":40},{"ruleId":"342","severity":1,"message":"392","line":27,"column":10,"nodeType":"344","messageId":"345","endLine":27,"endColumn":14},{"ruleId":"342","severity":1,"message":"393","line":27,"column":17,"nodeType":"344","messageId":"345","endLine":27,"endColumn":31},{"ruleId":"342","severity":1,"message":"394","line":27,"column":33,"nodeType":"344","messageId":"345","endLine":27,"endColumn":48},{"ruleId":"342","severity":1,"message":"395","line":27,"column":50,"nodeType":"344","messageId":"345","endLine":27,"endColumn":72},{"ruleId":"342","severity":1,"message":"396","line":29,"column":7,"nodeType":"344","messageId":"345","endLine":29,"endColumn":15},{"ruleId":"397","severity":1,"message":"398","line":96,"column":75,"nodeType":"399","messageId":"400","endLine":96,"endColumn":76,"suggestions":"401"},{"ruleId":"374","severity":1,"message":"402","line":118,"column":5,"nodeType":"376","endLine":118,"endColumn":7,"suggestions":"403"},{"ruleId":"342","severity":1,"message":"404","line":4,"column":25,"nodeType":"344","messageId":"345","endLine":4,"endColumn":36},{"ruleId":"342","severity":1,"message":"353","line":4,"column":38,"nodeType":"344","messageId":"345","endLine":4,"endColumn":44},{"ruleId":"342","severity":1,"message":"405","line":4,"column":45,"nodeType":"344","messageId":"345","endLine":4,"endColumn":58},{"ruleId":"342","severity":1,"message":"406","line":4,"column":60,"nodeType":"344","messageId":"345","endLine":4,"endColumn":65},{"ruleId":"342","severity":1,"message":"407","line":7,"column":10,"nodeType":"344","messageId":"345","endLine":7,"endColumn":17},{"ruleId":"342","severity":1,"message":"348","line":7,"column":35,"nodeType":"344","messageId":"345","endLine":7,"endColumn":44},{"ruleId":"342","severity":1,"message":"383","line":9,"column":8,"nodeType":"344","messageId":"345","endLine":9,"endColumn":12},{"ruleId":"342","severity":1,"message":"384","line":10,"column":10,"nodeType":"344","messageId":"345","endLine":10,"endColumn":14},{"ruleId":"342","severity":1,"message":"408","line":11,"column":8,"nodeType":"344","messageId":"345","endLine":11,"endColumn":25},{"ruleId":"342","severity":1,"message":"380","line":34,"column":12,"nodeType":"344","messageId":"345","endLine":34,"endColumn":23},{"ruleId":"342","severity":1,"message":"409","line":1,"column":17,"nodeType":"344","messageId":"345","endLine":1,"endColumn":25},{"ruleId":"342","severity":1,"message":"410","line":1,"column":27,"nodeType":"344","messageId":"345","endLine":1,"endColumn":36},{"ruleId":"342","severity":1,"message":"383","line":4,"column":8,"nodeType":"344","messageId":"345","endLine":4,"endColumn":12},{"ruleId":"342","severity":1,"message":"411","line":8,"column":8,"nodeType":"344","messageId":"345","endLine":8,"endColumn":13},{"ruleId":"342","severity":1,"message":"346","line":9,"column":8,"nodeType":"344","messageId":"345","endLine":9,"endColumn":22},{"ruleId":"342","severity":1,"message":"412","line":10,"column":10,"nodeType":"344","messageId":"345","endLine":10,"endColumn":13},{"ruleId":"342","severity":1,"message":"413","line":10,"column":15,"nodeType":"344","messageId":"345","endLine":10,"endColumn":27},{"ruleId":"342","severity":1,"message":"414","line":10,"column":29,"nodeType":"344","messageId":"345","endLine":10,"endColumn":34},{"ruleId":"342","severity":1,"message":"415","line":10,"column":36,"nodeType":"344","messageId":"345","endLine":10,"endColumn":42},{"ruleId":"342","severity":1,"message":"416","line":10,"column":44,"nodeType":"344","messageId":"345","endLine":10,"endColumn":53},{"ruleId":"342","severity":1,"message":"407","line":10,"column":54,"nodeType":"344","messageId":"345","endLine":10,"endColumn":61},{"ruleId":"342","severity":1,"message":"417","line":10,"column":62,"nodeType":"344","messageId":"345","endLine":10,"endColumn":73},{"ruleId":"342","severity":1,"message":"347","line":10,"column":75,"nodeType":"344","messageId":"345","endLine":10,"endColumn":82},{"ruleId":"342","severity":1,"message":"418","line":29,"column":23,"nodeType":"344","messageId":"345","endLine":29,"endColumn":28},{"ruleId":"342","severity":1,"message":"405","line":1,"column":37,"nodeType":"344","messageId":"345","endLine":1,"endColumn":50},{"ruleId":"342","severity":1,"message":"419","line":1,"column":51,"nodeType":"344","messageId":"345","endLine":1,"endColumn":55},{"ruleId":"342","severity":1,"message":"415","line":7,"column":41,"nodeType":"344","messageId":"345","endLine":7,"endColumn":47},{"ruleId":"342","severity":1,"message":"420","line":7,"column":48,"nodeType":"344","messageId":"345","endLine":7,"endColumn":56},{"ruleId":"342","severity":1,"message":"348","line":7,"column":83,"nodeType":"344","messageId":"345","endLine":7,"endColumn":92},{"ruleId":"342","severity":1,"message":"421","line":7,"column":121,"nodeType":"344","messageId":"345","endLine":7,"endColumn":133},{"ruleId":"342","severity":1,"message":"422","line":10,"column":10,"nodeType":"344","messageId":"345","endLine":10,"endColumn":15},{"ruleId":"342","severity":1,"message":"423","line":11,"column":10,"nodeType":"344","messageId":"345","endLine":11,"endColumn":14},{"ruleId":"342","severity":1,"message":"424","line":12,"column":10,"nodeType":"344","messageId":"345","endLine":12,"endColumn":17},{"ruleId":"342","severity":1,"message":"425","line":13,"column":10,"nodeType":"344","messageId":"345","endLine":13,"endColumn":30},{"ruleId":"342","severity":1,"message":"426","line":54,"column":10,"nodeType":"344","messageId":"345","endLine":54,"endColumn":21},{"ruleId":"342","severity":1,"message":"427","line":54,"column":23,"nodeType":"344","messageId":"345","endLine":54,"endColumn":37},{"ruleId":"342","severity":1,"message":"428","line":56,"column":10,"nodeType":"344","messageId":"345","endLine":56,"endColumn":18},{"ruleId":"342","severity":1,"message":"429","line":56,"column":20,"nodeType":"344","messageId":"345","endLine":56,"endColumn":31},{"ruleId":"342","severity":1,"message":"430","line":59,"column":10,"nodeType":"344","messageId":"345","endLine":59,"endColumn":16},{"ruleId":"342","severity":1,"message":"431","line":60,"column":10,"nodeType":"344","messageId":"345","endLine":60,"endColumn":16},{"ruleId":"342","severity":1,"message":"432","line":60,"column":18,"nodeType":"344","messageId":"345","endLine":60,"endColumn":27},{"ruleId":"342","severity":1,"message":"433","line":61,"column":10,"nodeType":"344","messageId":"345","endLine":61,"endColumn":16},{"ruleId":"342","severity":1,"message":"434","line":61,"column":18,"nodeType":"344","messageId":"345","endLine":61,"endColumn":27},{"ruleId":"342","severity":1,"message":"435","line":62,"column":10,"nodeType":"344","messageId":"345","endLine":62,"endColumn":17},{"ruleId":"342","severity":1,"message":"436","line":64,"column":10,"nodeType":"344","messageId":"345","endLine":64,"endColumn":23},{"ruleId":"342","severity":1,"message":"437","line":64,"column":25,"nodeType":"344","messageId":"345","endLine":64,"endColumn":41},{"ruleId":"342","severity":1,"message":"438","line":77,"column":10,"nodeType":"344","messageId":"345","endLine":77,"endColumn":21},{"ruleId":"342","severity":1,"message":"439","line":77,"column":23,"nodeType":"344","messageId":"345","endLine":77,"endColumn":37},{"ruleId":"342","severity":1,"message":"440","line":78,"column":10,"nodeType":"344","messageId":"345","endLine":78,"endColumn":28},{"ruleId":"342","severity":1,"message":"441","line":82,"column":9,"nodeType":"344","messageId":"345","endLine":82,"endColumn":21},{"ruleId":"342","severity":1,"message":"442","line":84,"column":8,"nodeType":"344","messageId":"345","endLine":84,"endColumn":11},{"ruleId":"342","severity":1,"message":"443","line":166,"column":7,"nodeType":"344","messageId":"345","endLine":166,"endColumn":22},{"ruleId":"342","severity":1,"message":"444","line":169,"column":11,"nodeType":"344","messageId":"345","endLine":169,"endColumn":20},{"ruleId":"342","severity":1,"message":"445","line":169,"column":22,"nodeType":"344","messageId":"345","endLine":169,"endColumn":27},{"ruleId":"342","severity":1,"message":"380","line":333,"column":9,"nodeType":"344","messageId":"345","endLine":333,"endColumn":20},{"ruleId":"342","severity":1,"message":"446","line":347,"column":7,"nodeType":"344","messageId":"345","endLine":347,"endColumn":21},{"ruleId":"342","severity":1,"message":"447","line":369,"column":7,"nodeType":"344","messageId":"345","endLine":369,"endColumn":20},{"ruleId":"342","severity":1,"message":"448","line":374,"column":13,"nodeType":"344","messageId":"345","endLine":374,"endColumn":24},{"ruleId":"342","severity":1,"message":"449","line":432,"column":7,"nodeType":"344","messageId":"345","endLine":432,"endColumn":17},{"ruleId":"342","severity":1,"message":"448","line":437,"column":13,"nodeType":"344","messageId":"345","endLine":437,"endColumn":24},{"ruleId":"342","severity":1,"message":"450","line":453,"column":10,"nodeType":"344","messageId":"345","endLine":453,"endColumn":26},{"ruleId":"342","severity":1,"message":"444","line":465,"column":11,"nodeType":"344","messageId":"345","endLine":465,"endColumn":20},{"ruleId":"342","severity":1,"message":"445","line":465,"column":22,"nodeType":"344","messageId":"345","endLine":465,"endColumn":27},{"ruleId":"342","severity":1,"message":"448","line":514,"column":13,"nodeType":"344","messageId":"345","endLine":514,"endColumn":24},{"ruleId":"374","severity":1,"message":"451","line":634,"column":5,"nodeType":"376","endLine":634,"endColumn":7,"suggestions":"452"},{"ruleId":"453","severity":1,"message":"454","line":652,"column":12,"nodeType":"344","messageId":"455","endLine":652,"endColumn":28},{"ruleId":"342","severity":1,"message":"456","line":656,"column":7,"nodeType":"344","messageId":"345","endLine":656,"endColumn":16},{"ruleId":"457","severity":1,"message":"458","line":677,"column":57,"nodeType":"459","messageId":"460","endLine":677,"endColumn":59},{"ruleId":"457","severity":1,"message":"458","line":694,"column":48,"nodeType":"459","messageId":"460","endLine":694,"endColumn":50},{"ruleId":"342","severity":1,"message":"461","line":701,"column":7,"nodeType":"344","messageId":"345","endLine":701,"endColumn":24},{"ruleId":"342","severity":1,"message":"462","line":20,"column":7,"nodeType":"344","messageId":"345","endLine":20,"endColumn":12},{"ruleId":"463","severity":2,"message":"464","line":57,"column":16,"nodeType":"344","messageId":"465","endLine":57,"endColumn":33},{"ruleId":"342","severity":1,"message":"351","line":2,"column":10,"nodeType":"344","messageId":"345","endLine":2,"endColumn":13},{"ruleId":"342","severity":1,"message":"350","line":2,"column":15,"nodeType":"344","messageId":"345","endLine":2,"endColumn":18},{"ruleId":"342","severity":1,"message":"390","line":2,"column":20,"nodeType":"344","messageId":"345","endLine":2,"endColumn":24},{"ruleId":"342","severity":1,"message":"466","line":2,"column":26,"nodeType":"344","messageId":"345","endLine":2,"endColumn":29},{"ruleId":"342","severity":1,"message":"467","line":2,"column":31,"nodeType":"344","messageId":"345","endLine":2,"endColumn":40},{"ruleId":"342","severity":1,"message":"391","line":2,"column":42,"nodeType":"344","messageId":"345","endLine":2,"endColumn":50},{"ruleId":"342","severity":1,"message":"468","line":2,"column":52,"nodeType":"344","messageId":"345","endLine":2,"endColumn":72},{"ruleId":"342","severity":1,"message":"469","line":1,"column":46,"nodeType":"344","messageId":"345","endLine":1,"endColumn":52},{"ruleId":"342","severity":1,"message":"470","line":4,"column":8,"nodeType":"344","messageId":"345","endLine":4,"endColumn":22},{"ruleId":"342","severity":1,"message":"471","line":4,"column":26,"nodeType":"344","messageId":"345","endLine":4,"endColumn":45},{"ruleId":"342","severity":1,"message":"415","line":7,"column":60,"nodeType":"344","messageId":"345","endLine":7,"endColumn":66},{"ruleId":"342","severity":1,"message":"347","line":7,"column":68,"nodeType":"344","messageId":"345","endLine":7,"endColumn":75},{"ruleId":"342","severity":1,"message":"414","line":8,"column":3,"nodeType":"344","messageId":"345","endLine":8,"endColumn":8},{"ruleId":"342","severity":1,"message":"472","line":8,"column":10,"nodeType":"344","messageId":"345","endLine":8,"endColumn":20},{"ruleId":"342","severity":1,"message":"473","line":8,"column":22,"nodeType":"344","messageId":"345","endLine":8,"endColumn":28},{"ruleId":"342","severity":1,"message":"391","line":14,"column":10,"nodeType":"344","messageId":"345","endLine":14,"endColumn":18},{"ruleId":"342","severity":1,"message":"390","line":14,"column":20,"nodeType":"344","messageId":"345","endLine":14,"endColumn":24},{"ruleId":"342","severity":1,"message":"404","line":14,"column":26,"nodeType":"344","messageId":"345","endLine":14,"endColumn":37},{"ruleId":"342","severity":1,"message":"405","line":14,"column":39,"nodeType":"344","messageId":"345","endLine":14,"endColumn":52},{"ruleId":"342","severity":1,"message":"419","line":14,"column":54,"nodeType":"344","messageId":"345","endLine":14,"endColumn":58},{"ruleId":"342","severity":1,"message":"474","line":14,"column":60,"nodeType":"344","messageId":"345","endLine":14,"endColumn":69},{"ruleId":"342","severity":1,"message":"406","line":14,"column":71,"nodeType":"344","messageId":"345","endLine":14,"endColumn":76},{"ruleId":"342","severity":1,"message":"475","line":14,"column":78,"nodeType":"344","messageId":"345","endLine":14,"endColumn":83},{"ruleId":"342","severity":1,"message":"476","line":14,"column":85,"nodeType":"344","messageId":"345","endLine":14,"endColumn":96},{"ruleId":"342","severity":1,"message":"477","line":14,"column":98,"nodeType":"344","messageId":"345","endLine":14,"endColumn":103},{"ruleId":"342","severity":1,"message":"478","line":14,"column":105,"nodeType":"344","messageId":"345","endLine":14,"endColumn":114},{"ruleId":"342","severity":1,"message":"479","line":14,"column":116,"nodeType":"344","messageId":"345","endLine":14,"endColumn":127},{"ruleId":"342","severity":1,"message":"480","line":19,"column":9,"nodeType":"344","messageId":"345","endLine":19,"endColumn":15},{"ruleId":"342","severity":1,"message":"481","line":58,"column":10,"nodeType":"344","messageId":"345","endLine":58,"endColumn":23},{"ruleId":"342","severity":1,"message":"426","line":104,"column":10,"nodeType":"344","messageId":"345","endLine":104,"endColumn":21},{"ruleId":"342","severity":1,"message":"427","line":104,"column":23,"nodeType":"344","messageId":"345","endLine":104,"endColumn":37},{"ruleId":"342","severity":1,"message":"482","line":108,"column":9,"nodeType":"344","messageId":"345","endLine":108,"endColumn":22},{"ruleId":"342","severity":1,"message":"483","line":110,"column":9,"nodeType":"344","messageId":"345","endLine":110,"endColumn":14},{"ruleId":"342","severity":1,"message":"484","line":112,"column":9,"nodeType":"344","messageId":"345","endLine":112,"endColumn":16},{"ruleId":"342","severity":1,"message":"485","line":115,"column":9,"nodeType":"344","messageId":"345","endLine":115,"endColumn":15},{"ruleId":"342","severity":1,"message":"486","line":116,"column":9,"nodeType":"344","messageId":"345","endLine":116,"endColumn":18},{"ruleId":"342","severity":1,"message":"440","line":121,"column":10,"nodeType":"344","messageId":"345","endLine":121,"endColumn":28},{"ruleId":"342","severity":1,"message":"487","line":123,"column":9,"nodeType":"344","messageId":"345","endLine":123,"endColumn":29},{"ruleId":"342","severity":1,"message":"450","line":143,"column":12,"nodeType":"344","messageId":"345","endLine":143,"endColumn":28},{"ruleId":"342","severity":1,"message":"488","line":155,"column":7,"nodeType":"344","messageId":"345","endLine":155,"endColumn":13},{"ruleId":"342","severity":1,"message":"489","line":156,"column":7,"nodeType":"344","messageId":"345","endLine":156,"endColumn":8},{"ruleId":"342","severity":1,"message":"490","line":166,"column":15,"nodeType":"344","messageId":"345","endLine":166,"endColumn":25},{"ruleId":"374","severity":1,"message":"491","line":174,"column":19,"nodeType":"492","endLine":174,"endColumn":44},{"ruleId":"342","severity":1,"message":"409","line":1,"column":52,"nodeType":"344","messageId":"345","endLine":1,"endColumn":60},{"ruleId":"342","severity":1,"message":"493","line":12,"column":28,"nodeType":"344","messageId":"345","endLine":12,"endColumn":36},{"ruleId":"342","severity":1,"message":"469","line":1,"column":46,"nodeType":"344","messageId":"345","endLine":1,"endColumn":52},{"ruleId":"342","severity":1,"message":"470","line":4,"column":8,"nodeType":"344","messageId":"345","endLine":4,"endColumn":22},{"ruleId":"342","severity":1,"message":"471","line":4,"column":26,"nodeType":"344","messageId":"345","endLine":4,"endColumn":45},{"ruleId":"342","severity":1,"message":"415","line":7,"column":60,"nodeType":"344","messageId":"345","endLine":7,"endColumn":66},{"ruleId":"342","severity":1,"message":"347","line":7,"column":68,"nodeType":"344","messageId":"345","endLine":7,"endColumn":75},{"ruleId":"342","severity":1,"message":"414","line":8,"column":3,"nodeType":"344","messageId":"345","endLine":8,"endColumn":8},{"ruleId":"342","severity":1,"message":"472","line":8,"column":10,"nodeType":"344","messageId":"345","endLine":8,"endColumn":20},{"ruleId":"342","severity":1,"message":"473","line":8,"column":22,"nodeType":"344","messageId":"345","endLine":8,"endColumn":28},{"ruleId":"342","severity":1,"message":"391","line":14,"column":10,"nodeType":"344","messageId":"345","endLine":14,"endColumn":18},{"ruleId":"342","severity":1,"message":"390","line":14,"column":20,"nodeType":"344","messageId":"345","endLine":14,"endColumn":24},{"ruleId":"342","severity":1,"message":"404","line":14,"column":26,"nodeType":"344","messageId":"345","endLine":14,"endColumn":37},{"ruleId":"342","severity":1,"message":"405","line":14,"column":39,"nodeType":"344","messageId":"345","endLine":14,"endColumn":52},{"ruleId":"342","severity":1,"message":"419","line":14,"column":54,"nodeType":"344","messageId":"345","endLine":14,"endColumn":58},{"ruleId":"342","severity":1,"message":"474","line":14,"column":60,"nodeType":"344","messageId":"345","endLine":14,"endColumn":69},{"ruleId":"342","severity":1,"message":"406","line":14,"column":71,"nodeType":"344","messageId":"345","endLine":14,"endColumn":76},{"ruleId":"342","severity":1,"message":"475","line":14,"column":78,"nodeType":"344","messageId":"345","endLine":14,"endColumn":83},{"ruleId":"342","severity":1,"message":"476","line":14,"column":85,"nodeType":"344","messageId":"345","endLine":14,"endColumn":96},{"ruleId":"342","severity":1,"message":"477","line":14,"column":98,"nodeType":"344","messageId":"345","endLine":14,"endColumn":103},{"ruleId":"342","severity":1,"message":"478","line":14,"column":105,"nodeType":"344","messageId":"345","endLine":14,"endColumn":114},{"ruleId":"342","severity":1,"message":"479","line":14,"column":116,"nodeType":"344","messageId":"345","endLine":14,"endColumn":127},{"ruleId":"342","severity":1,"message":"480","line":19,"column":9,"nodeType":"344","messageId":"345","endLine":19,"endColumn":15},{"ruleId":"342","severity":1,"message":"481","line":58,"column":10,"nodeType":"344","messageId":"345","endLine":58,"endColumn":23},{"ruleId":"342","severity":1,"message":"426","line":104,"column":10,"nodeType":"344","messageId":"345","endLine":104,"endColumn":21},{"ruleId":"342","severity":1,"message":"427","line":104,"column":23,"nodeType":"344","messageId":"345","endLine":104,"endColumn":37},{"ruleId":"342","severity":1,"message":"482","line":108,"column":9,"nodeType":"344","messageId":"345","endLine":108,"endColumn":22},{"ruleId":"342","severity":1,"message":"483","line":110,"column":9,"nodeType":"344","messageId":"345","endLine":110,"endColumn":14},{"ruleId":"342","severity":1,"message":"484","line":112,"column":9,"nodeType":"344","messageId":"345","endLine":112,"endColumn":16},{"ruleId":"342","severity":1,"message":"485","line":115,"column":9,"nodeType":"344","messageId":"345","endLine":115,"endColumn":15},{"ruleId":"342","severity":1,"message":"486","line":116,"column":9,"nodeType":"344","messageId":"345","endLine":116,"endColumn":18},{"ruleId":"342","severity":1,"message":"440","line":121,"column":10,"nodeType":"344","messageId":"345","endLine":121,"endColumn":28},{"ruleId":"342","severity":1,"message":"487","line":123,"column":9,"nodeType":"344","messageId":"345","endLine":123,"endColumn":29},{"ruleId":"342","severity":1,"message":"450","line":143,"column":12,"nodeType":"344","messageId":"345","endLine":143,"endColumn":28},{"ruleId":"342","severity":1,"message":"488","line":155,"column":7,"nodeType":"344","messageId":"345","endLine":155,"endColumn":13},{"ruleId":"342","severity":1,"message":"489","line":156,"column":7,"nodeType":"344","messageId":"345","endLine":156,"endColumn":8},{"ruleId":"342","severity":1,"message":"490","line":167,"column":15,"nodeType":"344","messageId":"345","endLine":167,"endColumn":25},{"ruleId":"374","severity":1,"message":"491","line":175,"column":19,"nodeType":"492","endLine":175,"endColumn":44},"no-native-reassign",["494"],"no-negated-in-lhs",["495"],"no-unused-vars","'EditFloormap' is defined but never used.","Identifier","unusedVar","'DisplayEntries' is defined but never used.","'Polygon' is defined but never used.","'Rectangle' is defined but never used.","'Container' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'PopUp' is defined but never used.","'Button' is defined but never used.","'Nav' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'Tabs' is defined but never used.","'PropTypes' is defined but never used.","'DashBoard' is defined but never used.","'Icon' is defined but never used.","'marker' is defined but never used.","'SelectionState' is defined but never used.","'history' is defined but never used.","'newLat' is assigned a value but never used.","'newLng' is assigned a value but never used.","'newName' is assigned a value but never used.","'changeHandler' is assigned a value but never used.","'changeHandler1' is assigned a value but never used.","'changeHandler2' is assigned a value but never used.","'position1' is assigned a value but never used.","'handleChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'markers'. Either include it or remove the dependency array.","ArrayExpression",["496"],"'DefaultIcon' is assigned a value but never used.","'handleUpdate' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'togglePopup' is assigned a value but never used.","'customMarkerIcon' is assigned a value but never used.","'Map1' is defined but never used.","'Link' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Card' is defined but never used.","'CardBody' is defined but never used.","'Grid' is defined but never used.","'TableHeaderRow' is defined but never used.","'TableEditColumn' is defined but never used.","'TableInlineCellEditing' is defined but never used.","'getRowId' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\'.","TemplateElement","unnecessaryEscape",["497","498"],"React Hook useEffect has missing dependencies: 'deleteHandler' and 'id'. Either include them or remove the dependency array. If 'setButtonVal' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["499"],"'ButtonGroup' is defined but never used.","'ButtonToolbar' is defined but never used.","'Label' is defined but never used.","'Tooltip' is defined but never used.","'SlickSliderStyle1' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'Map' is defined but never used.","'CircleMarker' is defined but never used.","'Popup' is defined but never used.","'Marker' is defined but never used.","'TileLayer' is defined but never used.","'ZoomControl' is defined but never used.","'users' is assigned a value but never used.","'Form' is defined but never used.","'Polyline' is defined but never used.","'useMapEvents' is defined but never used.","'popup' is defined but never used.","'text' is defined but never used.","'divIcon' is defined but never used.","'renderToStaticMarkup' is defined but never used.","'newPosition' is assigned a value but never used.","'setNewPosition' is assigned a value but never used.","'position' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'isEdit' is assigned a value but never used.","'floors' is assigned a value but never used.","'setFloors' is assigned a value but never used.","'blocks' is assigned a value but never used.","'setBlocks' is assigned a value but never used.","'newText' is assigned a value but never used.","'showDrawBlock' is assigned a value but never used.","'setShowDrawBlock' is assigned a value but never used.","'activeLayer' is assigned a value but never used.","'setActiveLayer' is assigned a value but never used.","'selectedLayerIndex' is assigned a value but never used.","'editLayerRef' is assigned a value but never used.","'map' is assigned a value but never used.","'handleEditFloor' is assigned a value but never used.","'layerType' is assigned a value but never used.","'layer' is assigned a value but never used.","'handleAddFloor' is assigned a value but never used.","'addBoundaries' is assigned a value but never used.","'_leaflet_id' is assigned a value but never used.","'addPolygon' is assigned a value but never used.","'handleLayerClick' is defined but never used.","React Hook useEffect has missing dependencies: 'mapLayers', 'refno', and 'updateFloor'. Either include them or remove the dependency array.",["500"],"no-redeclare","'handleLayerClick' is already defined.","redeclared","'_onCreate' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'changeHandlerText' is assigned a value but never used.","'Index' is defined but never used.","no-undef","'slickSliderStyle1' is not defined.","undef","'div' is defined but never used.","'CardTitle' is defined but never used.","'UncontrolledCollapse' is defined but never used.","'useMap' is defined but never used.","'LayersControl2' is defined but never used.","'ControlledLayerItem' is defined but never used.","'LayerGroup' is defined but never used.","'Circle' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'ModalHeader' is defined but never used.","'Modal' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","'mapRef' is assigned a value but never used.","'EditableGroup' is defined but never used.","'purpleOptions' is assigned a value but never used.","'fgRef' is assigned a value but never used.","'polygon' is assigned a value but never used.","'center' is assigned a value but never used.","'rectangle' is assigned a value but never used.","'_onFeatureGroupReady' is assigned a value but never used.","'layers' is assigned a value but never used.","'i' is assigned a value but never used.","'detailsLcl' is assigned a value but never used.","Assignments to the 'floor' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","'DomEvent' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"501","fix":"502"},{"messageId":"503","fix":"504","desc":"505"},{"messageId":"506","fix":"507","desc":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},"Update the dependencies array to be: [markers, searchTerm]",{"range":"513","text":"514"},"removeEscape",{"range":"515","text":"516"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"517","text":"518"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [deleteHandler, id]",{"range":"519","text":"520"},"Update the dependencies array to be: [mapLayers, refno, updateFloor]",{"range":"521","text":"522"},[2358,2370],"[markers, searchTerm]",[2874,2875],"",[2874,2874],"\\",[3371,3373],"[deleteHandler, id]",[16029,16031],"[mapLayers, refno, updateFloor]"]