[{"/Users/likhitha/Documents/cms/client/src/index.js":"1","/Users/likhitha/Documents/cms/client/src/App.js":"2","/Users/likhitha/Documents/cms/client/src/serviceWorker.js":"3","/Users/likhitha/Documents/cms/client/src/store.js":"4","/Users/likhitha/Documents/cms/client/src/utils/setAuthToken.js":"5","/Users/likhitha/Documents/cms/client/src/actions/authActions.js":"6","/Users/likhitha/Documents/cms/client/src/components/private-route/PrivateRoute.js":"7","/Users/likhitha/Documents/cms/client/src/components/layout/Navbar.js":"8","/Users/likhitha/Documents/cms/client/src/components/auth/Register.js":"9","/Users/likhitha/Documents/cms/client/src/components/auth/Login.js":"10","/Users/likhitha/Documents/cms/client/src/components/dashboard/Map1.js":"11","/Users/likhitha/Documents/cms/client/src/components/dashboard/Dashboard.js":"12","/Users/likhitha/Documents/cms/client/src/components/dashboard/services.js":"13","/Users/likhitha/Documents/cms/client/src/actions/types.js":"14","/Users/likhitha/Documents/cms/client/src/components/dashboard/Tabs.js":"15","/Users/likhitha/Documents/cms/client/src/components/dashboard/DisplayEntries.js":"16","/Users/likhitha/Documents/cms/client/src/reducers/index.js":"17","/Users/likhitha/Documents/cms/client/src/components/dashboard/Tab.js":"18","/Users/likhitha/Documents/cms/client/src/reducers/errorReducer.js":"19","/Users/likhitha/Documents/cms/client/src/reducers/authReducer.js":"20","/Users/likhitha/Documents/cms/client/src/components/dashboard/FloorMap.js":"21","/Users/likhitha/Documents/cms/client/src/components/dashboard/HomePage.jsx":"22","/Users/likhitha/Documents/cms/client/src/components/dashboard/EditFloormap.js":"23","/Users/likhitha/Documents/cms/client/src/components/dashboard/history.js":"24","/Users/likhitha/Documents/cms/client/src/components/dashboard/slickSliderStyle1.js":"25","/Users/likhitha/Documents/cms/client/src/components/dashboard/SlickSliderStyle1.js":"26","/Users/likhitha/Documents/cms/client/src/components/dashboard/ModalTemplate.js":"27"},{"size":451,"mtime":1606829565698,"results":"28","hashOfConfig":"29"},{"size":2639,"mtime":1613637200674,"results":"30","hashOfConfig":"29"},{"size":4948,"mtime":1606829565699,"results":"31","hashOfConfig":"29"},{"size":447,"mtime":1606829565699,"results":"32","hashOfConfig":"29"},{"size":331,"mtime":1606829565700,"results":"33","hashOfConfig":"29"},{"size":1650,"mtime":1606829565695,"results":"34","hashOfConfig":"29"},{"size":590,"mtime":1606829565698,"results":"35","hashOfConfig":"29"},{"size":1017,"mtime":1608682376758,"results":"36","hashOfConfig":"29"},{"size":5763,"mtime":1607606053792,"results":"37","hashOfConfig":"29"},{"size":5071,"mtime":1614415520699,"results":"38","hashOfConfig":"29"},{"size":9024,"mtime":1613741096769,"results":"39","hashOfConfig":"29"},{"size":1722,"mtime":1608679565728,"results":"40","hashOfConfig":"29"},{"size":955,"mtime":1613595392631,"results":"41","hashOfConfig":"29"},{"size":136,"mtime":1606829565696,"results":"42","hashOfConfig":"29"},{"size":1190,"mtime":1608158026388,"results":"43","hashOfConfig":"29"},{"size":5264,"mtime":1608157034026,"results":"44","hashOfConfig":"29"},{"size":207,"mtime":1606829565699,"results":"45","hashOfConfig":"29"},{"size":682,"mtime":1607637539256,"results":"46","hashOfConfig":"29"},{"size":248,"mtime":1607375463843,"results":"47","hashOfConfig":"29"},{"size":702,"mtime":1607375421322,"results":"48","hashOfConfig":"29"},{"size":7066,"mtime":1613423317034,"results":"49","hashOfConfig":"29"},{"size":1557,"mtime":1608192790318,"results":"50","hashOfConfig":"51"},{"size":22254,"mtime":1615470075309,"results":"52","hashOfConfig":"29"},{"size":84,"mtime":1608888543686,"results":"53","hashOfConfig":"29"},{"size":1616,"mtime":1609282261354,"results":"54","hashOfConfig":"29"},{"size":1616,"mtime":1609282261354,"results":"55","hashOfConfig":"29"},{"size":2072,"mtime":1613637516765,"results":"56","hashOfConfig":"29"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"cee0ce",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"59"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"59"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1aaztzc",{"filePath":"107","messages":"108","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"112","messages":"113","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"59"},"/Users/likhitha/Documents/cms/client/src/index.js",[],["119","120"],"/Users/likhitha/Documents/cms/client/src/App.js",[],"/Users/likhitha/Documents/cms/client/src/serviceWorker.js",[],"/Users/likhitha/Documents/cms/client/src/store.js",[],"/Users/likhitha/Documents/cms/client/src/utils/setAuthToken.js",[],"/Users/likhitha/Documents/cms/client/src/actions/authActions.js",[],"/Users/likhitha/Documents/cms/client/src/components/private-route/PrivateRoute.js",[],"/Users/likhitha/Documents/cms/client/src/components/layout/Navbar.js",[],"/Users/likhitha/Documents/cms/client/src/components/auth/Register.js",[],"/Users/likhitha/Documents/cms/client/src/components/auth/Login.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Map1.js",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157"],"import React, { useEffect, useState } from \"react\";\n\n\n\nimport DisplayEntries from \"./DisplayEntries\"\nimport service from \"./services.js\";\nimport { CardBody,Card } from 'reactstrap';\n\nimport { Polygon, Popup, Rectangle, Marker, TileLayer } from \"react-leaflet\";\nimport { Link } from \"react-router-dom\";\nimport { Table, Container, Col, Row, PopUp,Button } from \"reactstrap\";\nimport {Map } from \"react-leaflet\";\n\nimport {Nav,NavItem,NavLink,TabContent,TabPane} from 'reactstrap';\nimport Tabs from \"./Tabs\";\nimport PropTypes from \"prop-types\";\nimport DashBoard from \"./Dashboard\";\n//import icon from \"./icon_building.png\";\nimport { Icon, marker } from \"leaflet\";\nimport { SelectionState } from \"@devexpress/dx-react-grid\";\n//import EditFloormap from \"./EditFloormap\";\nimport history from\"./history\"\nconst Map1  = () => {\n  \n    \n\n      const [markers, setMarkers] = useState([])\n      const [ newLat, setNewLat ] = useState('')\n      const [ newLng, setNewLng ] = useState('')\n      const [ newName, setNewName ] = useState('')\n      const [newFilter, setNewFilter] = useState('')\n      const [ buttonVal, setButtonVal ] = useState(\"\")\n      \n      \n      useEffect(()=>{\n        service\n        .getAll()\n        .then(latlng =>{\n          console.log(\"returning\", latlng)\n          setMarkers(latlng)\n        })\n      },[])\n\n\n\n   \n      \n\n      \n      const kids = [\n        [60.23296, 24.83034],\n        [60.23299, 24.83039],\n        [60.23302, 24.83031],\n        [60.23299, 24.83026]\n        \n      ]\n      const br = [\n        [60.23299, 24.83026],\n        [60.23301, 24.83029],\n        [60.23303, 24.83024],\n        [60.23301, 24.83022]\n      ]\n      const tv = [\n        [60.23301, 24.83030],\n        [60.23304, 24.83035],\n        [60.23306, 24.83030],\n        [60.23303, 24.83025]\n      ]\n      const wc = [\n        [60.23303, 24.83040],\n        [60.23304, 24.83042],\n        [60.23305, 24.83039],\n        [60.23303, 24.83038]\n      ]\n      \n      \n\n      \n      const Corridar = [\n        [60.23299, 24.83040],\n        [60.23301, 24.83043],\n        [60.23303, 24.83037],\n        [60.23302, 24.83034],\n      ]\n      const Kitchen = [\n        [60.23304, 24.83035],\n        [60.23306, 24.83038],\n        [60.23308, 24.83033],\n        [60.23306, 24.83030]\n      ]\n  const changeHandler = (event) => setNewLat(event.target.value)\n  const changeHandler1 = (event) => setNewLng(event.target.value)\n  const changeHandler2= (event) => setNewName(event.target.value)\n  //const changeHandlerFilter = (event) => setNewFilter(event.target.value)\n      \n  \n\n        const position = [60.21749913, 24.938379];\n        const position1 = [60.21749913, 24.806496774]\n        console.log(position)\n       \n      const submitHandler = (event) => {\n        event.preventDefault()\n       service\n        .getAll()\n        .then(latlng =>{\n          const allMarkers = [...latlng]\n\n          const newMarker = {\n            id:markers.length + 1,\n            lat:parseFloat(newLat),\n            lng:parseFloat(newLng),\n            name:newName\n          }\n           service\n            .update(newMarker)\n            .then(newEntry =>{\n                setNewLat(\"\")\n                setNewLng(\"\")\n                setNewName(\"\")\n              setMarkers(latlng.concat(newEntry))\n            })\n\n        })\n    }\n\n\nconst [searchTerm, setSearchTerm] = useState(\"\");\n //const [searchResults, setSearchResults] = React.useState([]);\n  const handleChange = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  useEffect(() => {\n    const results = markers.filter(marker =>\n      marker.description.toLowerCase().includes(searchTerm.toLocaleLowerCase())\n    );\n    setMarkers(results);\n   \n    \n    console.log(results)\n  }, [searchTerm]);\n\n  // this.setState({\n  //   searchValue: search,\n  //   filteredPeople: this.state.people.filter(\n  //    item =>\n  //     (item.lastname && item.lastname.toLowerCase().includes(search)) ||\n  //     (item.name && item.name.toLowerCase().includes(search))\n  //   )\n  //  });\n\n\nconst handleDelete = (id, nameToBeDeleted,e) => {\n  if (window.confirm(`Delete ${nameToBeDeleted}?`)) {\n   service\n      .deletion(id)\n      .then(() => {\n        setMarkers(markers.filter(marker => marker.id !== id));\n        window.confirm(`Deleted ${nameToBeDeleted}`);\n      })\n       .catch(() => {\n         window.confirm(`Error: ${nameToBeDeleted} already deleted`, 'red');\n        setMarkers(markers.filter((marker) => marker.id !== id));\n       });\n  }\n}\n\nconst handleUpdate = (id, nameToBeDeleted,e) => {\n  \n}\n\n    function renderPopup (item){\n  \n      return (\n        \n        <Popup\n          \n        >\n           \n          <Link  to={item.link} >{item.description}</Link>\n        </Popup>\n        \n      );\n    }\n\n    \n    \n    const handleClick = (e) => {\n      e.latlng()\n    }\n  \n    const building = new Icon({\n      iconUrl: \"./icon_building.svg\",\n      iconSize: [25, 25]\n    });\n    \n     \n      \n  \n      \n      const [isOpen, setIsOpen] = useState(false);\n \n  const togglePopup = () => {\n    setIsOpen(!isOpen);\n  }\n  return (\n\n\n          \n\n\n\n\n<Card>\n  <CardBody>    \n<Row className=\"iq-example-row\">\n\n\n\n                \n               \n<Row className=\"row\">\n<Col className=\"col-3\">\n{/* <div className=\"btn\" onClick={this.togglePopup}>\n      <button>New User?</button>\n      </div>\n    {isOpen ? <PopUp toggle={this.togglePopup} /> : null} */}\n    \nSearch for:\n<input\n        type=\"text\"\n        placeholder=\"Search\"\n        value={searchTerm}\n        onChange={handleChange}\n      />\n     <Link   to=\"/Addmap\" className=\"nav-link font-weight-bold \">Add</Link>\n        {/* <button type=\"submit\">Add</button> */}\n      \n      {/* <Button variant=\"btn btn-success\" onClick={() => '/EditFloormap'}>Edit</Button> */}\n      <br/>\n      <br/>\n{/* <DisplayEntries names={markers} deleteHandler={deleteHandler} /> */}\n<Table hover className=\"table\" items={markers}>\n   <thead>\n      <tr>\n         <th scope=\"col\">#</th>\n         <th scope=\"col\">Name</th>\n         <th scope=\"col\">Address</th>\n         <th scope=\"col\">Delete</th>\n         \n      </tr>\n   </thead>\n   <tbody>\n     \n                                {\n\n                                    markers.map((item, index) => (\n                                       \n                                        <tr key={index}>\n                                            <td >{item.id} </td>\n                                           <td> <Link   to={item.link} className=\"nav-link font-weight-bold \">{item.description} </Link></td>\n                                            <td >{item.street}   {item.Apartment} {item.doornum} {item.region} {item.country}</td>\n                                            <td><button type=\"button\"\n      onClick={() => handleDelete(item.id, item.description)}\n    > Delete </button></td>\n    \n    <td><Link   to=\"/EditFloorMap/3\" className=\"nav-link font-weight-bold \">edit</Link></td>\n\n\n    {/* <Link onClick={(e) => handleDelete(item.refnum, item.description, e)} className=\"nav-link font-weight-bold \">Delete</Link> */}\n\n                                        </tr>\n                                    ))\n                                }\n                                \n\n\n   </tbody>\n</Table>\n\n\n</Col>\n<Col className=\"col-7\">\n<Map\n                                            style={ { height: \"500px\", width: \"100%\"}}\n                                            \n                                            center={[60.21679719545689, 24.810291821854594]} zoom={12} maxZoom={100}\n                                            \n                                        >\n    \n                                                <TileLayer\n                                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            />\n                            \n                                {\n                                    markers.map((item, index) => (\n                                       \n                                        <Marker   \n                                                position={[item.latitude,item.longitude]}\n                                                onMouseOver={(e) => {\n                                                    e.target.openPopup();\n                                                  }}\n                                                  onMouseOut={(e) => {\n                                                    e.target.closePopup();\n                                                  }}\n                                                >\n                                                          {renderPopup(item) }\n                                                </Marker>\n                                    ))\n                                }\n\n      \n    \n    \n                                     </Map>\n</Col>\n</Row>\n\n</Row> \n</CardBody>\n</Card>\n  );\n}\n\n\n\n\nexport default Map1\n\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/Dashboard.js",["158","159","160","161"],"import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\n//import MapView from \"./MapView.js\";\nimport Map1 from \"./Map1.js\";\nimport { Link } from 'react-router-dom';\n//import {MapContainer,  Marker, Popup,  TileLayer } from \"react-leaflet\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n//import { useHistory } from 'react-router-dom';\n\nclass Dashboard extends Component {\n  onLogoutClick = e => {\n    e.preventDefault();\n    this.props.logoutUser();\n  };\n  \n  \n  render() {\n    const { user } = this.props.auth;\n\n    return (\n      <div >\n        {/* <span className=\"myClass\" style={{float : 'left', paddingRight : '5px'}} > </span> */}\n        {/* style=\"font-size: 20px; color:#4a54f1; text-align:center; padding-top:100px;\" */}\n        <p style={{fontSize: '20px', color: 'white'}}> Hi <i><b>{user.name}</b></i></p>\n               \n                {/* <MapView /> */}\n            <div>\n            \n            <button\n              style={{\n                width: \"150px\",\n                borderRadius: \"3px\",\n                letterSpacing: \"1.5px\",\n                marginTop: \"1rem\"\n                \n              }}\n              onClick={this.onLogoutClick}\n              className=\"btn btn-primary float-left\"\n            >\n              Logout\n            </button>\n            </div>\n          </div>\n        \n        \n    );\n  }\n}\n\nDashboard.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  { logoutUser }\n)(Dashboard);\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/services.js",["162"],"import axios from \"axios\"\n\nconst baseUrl = \"http://localhost:3010/data\"\n\n\nconst getAll = () =>{\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst getBuilding = bid => {\n    const request = axios.get(baseUrl + `/${bid}` )\n    return request.then(response => [response.data])\n}\n\n\nconst update = newEntry =>{\n    const request = axios.post(baseUrl, newEntry)\n    return request.then(response => response.data)\n}\n\nconst updateBuilding = (bid, entry) => {\n    const request = axios.post(baseUrl + `/${bid}`,entry)\n    return request.then(response => response.data)\n}\n\n\nconst deletion = entryId =>{\n    const request = axios.delete(baseUrl + `/${entryId}`)\n    return request.then(response => response.data)\n}\n\nconst deleteAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n\n}\n\nexport default {getAll, update, deletion, deleteAll, getBuilding, updateBuilding}","/Users/likhitha/Documents/cms/client/src/actions/types.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Tabs.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/DisplayEntries.js",["163","164","165","166","167","168","169","170","171","172","173"],"/*import React from \"react\"\n\nconst DisplayEntry = ({ name }) => {\n    return(\n        <div>\n            {name} \n        </div>\n    )\n}\n\nconst DisplayEntries = ({ names, regVal }) => {\n    const regExp = new RegExp(regVal, \"i\")\n    const filteredArray = names.filter((entry) => regExp.test(entry.name))\n    const namesArray = filteredArray.map((entry) => <DisplayEntry key={entry.id} name={entry.name} />)\n    return(\n    <div>\n        {namesArray}\n    </div>\n    )\n}\n\nexport default DisplayEntries*/\n\nimport React, {useState, useEffect} from \"react\"\nimport service from \"./services.js\"\nimport {Row, Col, Table, Card, CardBody} from 'reactstrap';\nimport { Grid,  TableHeaderRow, TableEditColumn, TableInlineCellEditing } from '@devexpress/dx-react-grid-bootstrap4';\nimport { Link } from \"react-router-dom\";\nconst getRowId = row => row.id;\n\nconst DisplayEntry = ({ name, street, apartment,doorno, region, country, id }) => {\n    const [ name1, setName ] = useState(name)\n    const [ street1, setStreet] = useState(street)\n    const [ apartment1, setApartment] = useState(apartment)\n    const [ doorno1, setDoorno] = useState(doorno)\n    const [ region1, setRegion] = useState(region)\n    const [ country1, setCountry] = useState(country)\n  //  const [ newNumber, setNumber ] = useState(number)\n    const [ buttonVal, setButtonVal ] = useState(\"\")\n    const [markers, setMarkers] = useState([])\n   \n\n      useEffect(()=>{\n        service\n        .getAll()\n        .then(latlng =>{\n          console.log(\"returning\", latlng)\n          setMarkers(latlng)\n        })\n      },[])\n\n    // const [columns] = useState([\n    //     {\n    //         title: \"Name\",\n    //         name: \"name\",\n    //     },\n    //     {\n    //         title: \"Lat\",\n    //         name: \"lat\",\n    //         sortable: true,\n    //     },\n    //     {\n    //         title: \"Lng\",\n    //         name: \"lng\",\n    //         sortable: true,\n    //     },\n    // ]);\n    // const [rows, setRows] = useState([\n    //     {newName},\n    //     {newLat},\n    //     {newLng}\n        \n    // ]);\n    // const [editingCells, setEditingCells] = useState([]);\n\n    // const deleteHandler = (id) =>{\n    //     const handler = () =>{\n    //         if(window.confirm(`Do you really want to delete ${name}\\'s Building details?`)){\n    //             service.deletion(id)\n    //             .then(response => {\n                    \n    //                 setName(\"\")\n    //                 setStreet(\"\")\n    //                 setApartment(\"\")\n    //               setDoorno(\"\")\n    //               setRegion(\"\")\n    //               setCountry(\"\")\n    //             setButtonVal(\"\")\n    //             })\n    //         }\n    //     }\n    //     return handler\n    // }\n    const deleteHandler = (id) => {\n        const handler = () =>{\n                   if(window.confirm(`Do you really want to delete ${name}\\'s Building details?`)){\n  \n        service\n        .deletion(id)\n          .then(response => {\n            setName(\"\")\n                    setStreet(\"\")\n                    setApartment(\"\")\n                  setDoorno(\"\")\n                  setRegion(\"\")\n                   setCountry(\"\")\n                setButtonVal(\"\")\n          })\n        }\n    }\n    return handler\n          \n      };\n\n    useEffect(()=>{\n        setButtonVal(<button onClick={deleteHandler(id)}>delete</button>)\n    },\n    [])\n\n    return(\n       \n        <div>\n            <Table hover className=\"table\" items={markers}>\n   <thead>\n      <tr>\n         <th scope=\"col\">#</th>\n         <th scope=\"col\">Name</th>\n         <th scope=\"col\">Address</th>\n         <th scope=\"col\">Delete</th>\n         \n      </tr>\n   </thead>\n   <tbody>\n     \n                                {\n                                    markers.map((item, index) => (\n                                       \n                                        <tr key={index}>\n                                            <td >{item.id} </td>\n                                           <td> <Link   to={item.link} className=\"nav-link font-weight-bold \">{name1} </Link></td>\n                                            <td >{street1}   {apartment1} {doorno1} {region1} {country1}</td>\n                                            {buttonVal} \n\n                                        </tr>\n                                    ))\n                                }\n\n\n   </tbody>\n   </Table>\n            {/* {newName}\n            {newLat}\n            {newLng}\n            {buttonVal} */}\n           \n\n            {/* <Table className=\"table\" items={{DisplayEntries}}>   \n      <thead>\n    \n    <th>Name</th>\n    <th>Lat</th>\n    <th>Lng</th>\n  \n          </thead>          \n \n<tbody>\n \n  <tr>\n    \n  </tr>\n  </tbody>\n  </Table> */}\n\n        </div> \n    )\n}\n\nconst DisplayEntries = ({ names, regVal }) => {\n    const regExp = new RegExp(regVal, \"i\")\n    const filteredArray = names.filter((entry) => regExp.test(entry.name))\n    const namesArray = filteredArray.map((entry) => <DisplayEntry key={entry.id} name={entry.description} street={entry.street} apartment={entry.Apartment} doorno={entry.doornum} region={entry.region} country={entry.country} id={entry.id} />)\n    \n    return(\n    <div>\n        {namesArray}\n    </div>\n    )\n}\n\nexport default DisplayEntries","/Users/likhitha/Documents/cms/client/src/reducers/index.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/Tab.js",[],"/Users/likhitha/Documents/cms/client/src/reducers/errorReducer.js",[],"/Users/likhitha/Documents/cms/client/src/reducers/authReducer.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/FloorMap.js",["174","175","176","177","178","179","180","181","182","183"],"/* eslint-disable jsx-a11y/anchor-is-valid */\n //import React from 'react';\n //import { LayersControl as BaseLayersControl } from 'react-leaflet';\n import { CardBody,Card,ButtonGroup, Button,ButtonToolbar, Label } from 'reactstrap';\n import React, { useEffect, useState } from \"react\";\n \n import {Tooltip, Polygon, Popup, Rectangle, Marker, TileLayer , Map,LayersControl, LayerGroup} from 'react-leaflet';\nimport service from './services';\nimport Map1 from './Map1';\nimport { Link } from \"react-router-dom\";\nimport SlickSliderStyle1 from \"./SlickSliderStyle1\";\n\n\nconst FloorMap  = () => {\n  \n    \n\n    const [markers, setMarkers] = useState([])\n   \n\n      useEffect(()=>{\n        service\n        .getAll()\n        .then(latlng =>{\n          console.log(\"returning\", latlng)\n          setMarkers(latlng)\n        })\n      },[])\n\n\n\n     const refno=window.location.pathname.replace('/FloorMap/','');\n      \n     const handleClick = (e) => {\n       console.log(e.target.value)\n      debugger;\n    }\n\n  return (\n\n    <Card >\n    <CardBody>\n\n<div>\n\n\n{/* <div> <Link to=\"/Map1\" className=\"btn btn-primary\"><p class=\"ri-home-4-line\"> Home </p></Link></div> */}\n\n\n\n\n\n                        {markers.filter(item => item.id===refno).map(filteredName => (\n                            <div>\n                              \n                             {/* <h1 className=\"display-7\">#{filteredName.id}-{filteredName.description}</h1> */}\n                             <h1 className=\"display-9\">{filteredName.street}   {filteredName.Apartment} {filteredName.doornum} {filteredName.region} {filteredName.country}</h1>\n                             {/* <ButtonToolbar className=\"mt-3\">\n                             <ButtonGroup className=\"mr-2\">\n                                 {filteredName.floors.map((item2, index) => (\n                                       \n                                      <Button color=\"secondary\" data-key={index}\n                                      \n                                      onClick={handleClick}> {item2.description}</Button>\n\n  \n                                   ))}\n                                   </ButtonGroup></ButtonToolbar> */}\n                             </div>\n\n\n\n\n                        ))}\n                        \n                        \n                        </div>\n                        <div>\n                        \n                        {markers.filter(item => item.id===refno).map(filteredName => (\n                            <div>\n\n                         <Map\n                                    style={ { height: \"500px\", width: \"100%\"}}\n                                    \n                                    center={[filteredName.latitude, filteredName.longitude]} zoom={16} maxZoom={17}\n                                    \n                                >\n                                  \n\n                                        {/* <TileLayer\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    /> */}\n\n<LayersControl position=\"topright\">\n<LayersControl.BaseLayer checked name={filteredName.name}>\n  \n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {/* {filteredName.floors.map((floor, index) => (\n        <LayersControl.Overlay checked name={floor.description}>\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color}\n                             />\n        </LayerGroup>\n        </LayersControl.Overlay>\n      \n      ))} */}\n       \n         {/* <Polygon positions={floor.boundaries} color={floor.color}\n                             />  */}\n      </LayersControl.BaseLayer>\n      <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {filteredName.floors.map((floor, index) => (\n        <LayersControl.BaseLayer checked name={floor.description}>\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color}\n                             />\n{\n  floor.blocks.map((block, ind) => (\n    <Polygon positions={block.bounds}>\n          {/* <Tooltip sticky>        {block.text}</Tooltip> */}\n      {/* <Popup direction=\"center\" >\n        {block.text}\n      </Popup> */\n      \n      <Marker position={block.marker}>\n              <Popup>\n                    <span>{block.text}</span>\n                    {/* <div className=\"iq-card-body\" id={'post-slider'}>\n                              <SlickSliderStyle1 slidesToShow={2}>\n                              <li className=\"d-flex align-items-center\">\n                                {block.images.map((img, idx) => (\n                                  <div>\n                                  <div className=\"post-image\">\n                                  <a href=\"#\">\n                                      <img src={img} alt=\"post-image\" className=\"img-fluid rounded\" />\n                                  </a>\n                                  </div>\n                                  <div className=\"post-content pl-3\">\n\n                                  <div className=\"text-center d-flex align-items-center justify-content-between\">\n                                      \n                                  </div>\n                                  </div>\n                                  </div>\n                                ))}\n                                   \n                                 </li>\n                                 </SlickSliderStyle1>\n                                 </div> */}\n              </Popup>\n              \n      </Marker>\n\n      }\n    </Polygon> \n                             \n                             \n\n  ))\n}\n\n        </LayerGroup>\n        </LayersControl.BaseLayer>\n      \n      ))}\n\n\n     \n      \n      \n      \n      \n{/* {filteredName.floors.map((floor, index) => (\n      \n))} */}\n      \n      </LayersControl>\n\n                                    {/* {filteredName.floors.map((floor, index) => (\n                            //           <Polygon positions={floor.boundaries} color={floor.color}\n                            //  /> \n                            <LayersControl.Overlay name={floor.description} id={floor.floorno}>\n                            <LayerGroup>\n                            <Polygon positions={floor.boundaries} color={floor.color}\n                              /> \n                            </LayerGroup>\n                          </LayersControl.Overlay>\n\n                                    ))} */}\n\n\n\n                             </Map> \n                             </div>\n                        ))\n                        }\n                        </div>\n    </CardBody>\n    </Card>  \n\n  );\n}\n\nexport default FloorMap;\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/HomePage.jsx",["184","185","186","187","188","189","190","191","192","193","194","195","196","197"],"/Users/likhitha/Documents/cms/client/src/components/dashboard/EditFloormap.js",["198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229"],"\n\n\n import { CardBody,Card,ButtonGroup, ButtonToolbar,Form,FormGroup,Label,Input, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\n import React, { useRef, useEffect, useState, useMap} from \"react\";\n import { Col, Row } from \"reactstrap\";\n //import { EditControl } from \"react-leaflet-draw\";\n //import {FeatureGroup,useLeaflet} from \"react-leaflet\";\n import { EditControl } from \"react-leaflet-draw\";\n import L from \"leaflet\";\n import \"./assets/leaflet.css\"\nimport \"./assets/leaflet.draw.css\"\nimport ModalTemplate from './ModalTemplate';\nimport {  Map, TileLayer, FeatureGroup, Marker,Polyline, Popup, Polygon, Rectangle,  LayersControl, LayerGroup,useMapEvents} from 'react-leaflet';\nimport service from './services';\n\n\n\nimport { makeStyles, Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  map: ({\n      height: `calc(90vh - 90px)`,\n      width: '60%',\n      zIndex: 0\n  }),\n  buttonWrapper: {\n      zIndex: 1,\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      marginLeft: \"30%\",\n      marginBottom: \"8%\",\n      transform: \"translateX(-50%)\",\n  },\n  buttonStyle: {\n    margin:\"10px\",\n    \n  },\n  headerWrapper: {\n      zIndex: 1,\n      marginLeft: theme.spacing(3),\n      marginTop: theme.spacing(1),\n  }\n}));\n\n\nconst EditFloorMap = (props) => \n{\n  const [addFloor, setAddFloor] = useState(false);\n  //const mapGlobal = useMap();\n  const classes = useStyles(props)\n  const editRef = useRef();\n  const [markers, setMarkers] = useState([])\n  const [newPosition, setNewPosition] = useState([])\n  //const [markers1, setMarkers1] = useState([]);\n  const [position, setPosition] = useState([]);\n  const [mapLayers, setMapLayers] = useState([]);\n  const [ newDesc, setNewDesc ] = useState('')\n  const [isEdit, setIsEdit] = useState('')\n  const [floors, setFloors ] = useState('')\n  const [blocks, setBlocks] = useState('')\n  const [newText, setNewText] = useState('')\n  const [drawing, setDrawing] = useState(false);\n  const [showDrawBlock, setShowDrawBlock] = useState(false);\n  const [polyFlag, setPolyFlag] = useState('');\n  const [activeFloor, setActiveFloor] = useState('')\n  //const editRef = useRef();\n  //const [map, setMap] = useState(null);\n\n  const updateFloor = {\n\n    floorno: 0,\n    description: \"newDesc\",\n    color: '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6),\n    blocks: [],\n    boundaries: []\n  }\n  \n\n  // const showLayerName = () => {\n  //   const map = useMap();\n  //   map.on( 'baselayerchange', function (e) {\n  //     console.log('Layer name -> ', e.name);\n  //     //console.log('Layer URL -> ', e.layer.options.url);\n  //     //console.log('Layer attribution -> ', e.layer.options.attribution);\n  // });\n     \n\n  //   // map.on(\"overlayremove\", (e) => {\n  //   //   if (e.name === \"Grid1\") setShowGrid(false);\n  //   // });\n  // };\n  \n  function toggle() {\n    setAddFloor(!addFloor);\n  }\n\n  function GlobalMapComponent() {\n    const mapGlobal = useMap()\n    mapGlobal.on( 'baselayerchange', function (e) {\n      console.log('Layer name -> ', e.name);\n      //console.log('Layer URL -> ', e.layer.options.url);\n      //console.log('Layer attribution -> ', e.layer.options.attribution);\n  });\n    console.log('map center:', mapGlobal.getCenter())\n    return null\n  }\n   \n  // var block = {\n  //   text: \"TacoBell\",\n  //   marker: [\n  //             60.21857356963615,\n  //             24.81304429310007\n  //           ],\n  //   icon: \"\",\n  //   images: [],\n  //   bounds: []\n  // }\n  const handleManageBoundaries = (e) => {\n    debugger;\n    console.log(activeFloor);\n    const { layerType, layer } = e;\n    \n    if (layerType === \"polygon\") {\n      const { _leaflet_id } = layer;\n      setMapLayers((layers) => [\n        ...layers,\n    { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n\n      // [ id: _leaflet_id, latlng:layer.getLatLngs()[0] ]  ,\n      ]);\n    }\n    debugger;\nsetPolyFlag('B')\n    if (!drawing) {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n  } else {\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n      editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n  }\n  setDrawing(!drawing)\n  \n    // return (\n    //   <div>\n    //     {markers.map((name) => (\n    //       <p>{name.description}</p>\n\n    //     ))}\n        \n    //   </div>\n    // )\ndebugger;\n  }\n   \n  const handleClick = () => {\n\n        \n    //Edit this method to perform other actions\n\n    if (!drawing) {\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\n    } else {\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\n        editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\n    }\n    setDrawing(!drawing)\n}\n\nconst handleAddFloor = () => {\n  debugger;\n}\n\n\nconst handleClickFloor = () => {\n  debugger;\n   service\n   .getBuilding(refno)\n   .then(building => {\n    console.log(\"returning\", building)\n   updateFloor.description=newDesc\n  building[0].floors.push(updateFloor)\n\n  setMarkers(building)\n\n  //debugger;\n\n  // e.preventDefault()\n   //service\n  // .getAll()\n  // .then(floor => {\n    // const updateFloor = {\n\n    //   floorno: floors.length+1,\n    //   description: newDesc,\n    //   color: '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6),\n    //   text: newText,\n    //   marker: [],\n    //   icon: \"\",\n    //   images: [],\n    //   bounds: JSON.stringify(mapLayers, 0, 2),\n    //   boundaries: JSON.stringify(mapLayers, 0, 2)\n\n    // }\n    \n  //   service\n  //   .update(updateFloor)\n  //   .then(newEntry => {\n  //     setNewDesc(\"\")\n  //     setNewText(\"\")\n  //     setFloors(floor.concat(newEntry))\n\n  //   })\n\n    \n  // })\n\n\n})\n}\n\n\nconst addBoundaries = (e) =>{\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    setMapLayers((layers) => [\n         ...layers,\n        {  latlngs: layer.getLatLngs()[0] },\n       ]);\n\n    // setMapLayers((layers) => [\n    //   ...layers,\n    //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    // ]);\n  }\n  setDrawing(false)\n\n  e.layer.on('click', () => {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  })\n  e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n  })\n  e.layer.bindTooltip(\"Text\", \n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n        sticky: true,\n        direction: 'right'\n      }\n  );\n\n\n\n}\n\nconst handleMap = (e) =>\n{\n  debugger;\n  const map = editRef.current.leafletElement._map;\n  //const map = editRef.current.leafletElement.getBounds();\n  map.on(\"baselayerchange\", (e, f) => {\n//     //do whatever\ndebugger;\n    console.log(e.name);\n    //const floor = e.name;\n    \n     setActiveFloor(e.name);\n     console.log(setActiveFloor)\n\n    \n    //  switch (e.name) {\n    //   case \"Sello\":\n      \n    //     console.log(\"Sello\");\n    //     break;\n    //   case ({newDesc}):\n    //     console.log({newDesc});\n    //     break;\n    //   default:\n    //     return;\n    // }\nconsole.log(map);\n\n})\n}\n\n\n\n\nconst addPolygon = (e) =>{\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    setMapLayers((layers) => [\n         ...layers,\n        {  latlngs: layer.getLatLngs()[0] },\n       ]);\n\n    // setMapLayers((layers) => [\n    //   ...layers,\n    //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    // ]);\n  }\n  setDrawing(false)\n\n  \n \n\n\n\n}\n\n\n\n\n\n\n// const handleClick1 = (e) => {\n//   e.preventDefault()\n//   service\n//   .getAll()\n//   .then(latlng => {\n//     const allMarkers = [...latlng]\n//     const { layerType, layer } = e;\n//     const updatePolygon = () => {\n\n//     const { layerType, layer } = e;\n//   if (layerType === \"polygon\") {\n//     const { _leaflet_id } = layer;\n\n//     // setMapLayers((layers) => [\n//     //   ...layers,\n//     //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n//     // ]);\n//   }\n//       bounds: layer.getLatLngs()[0]\n//     }\n//     service \n//     .update(updatePolygon)\n//   })\n\n// }\n// const activeLayer = (e) => {\n//   console.log(e);\n\n//   const { layerType, layer } = e;\n\n//   if(LayersControl.BaseLayer== checked){\n//     const { _leaflet_id } = layer;\n\n//   }\n\n// }\n\nconst onShapeDrawn = (e) => {\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n    setMapLayers((layers) => [\n      ...layers,\n      [  _leaflet_id,  layer.getLatLngs()[0] ],\n      // { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n     //[ layer.getLatLngs()[0] ]  ,\n    ]);\n\n    // \n    debugger;\n   \n    return (\n    \n      <div>\n        {markers.map((name) => (\n          <p>{name.description}{polyFlag}\n         <GlobalMapComponent />\n         </p>\n        ))}\n      </div>\n    )\n     //if (polyFlag === \"B\") {\n      \n     //}\n\n    // setMapLayers((layers) => [\n    //   ...layers,\n    //   { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    // ]);\n  }\n  setDrawing(false)\n\n  e.layer.on('click', () => {\n      editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\n  })\n  e.layer.on('contextmenu', () => {\n      //do some contextmenu action here\n  })\n  e.layer.bindTooltip(\"Text\", \n      {\n        className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\n        sticky: true,\n        direction: 'right'\n      }\n  );\n}\n\n// useEffect(() => {\n//   const map = editRef.current.leafletElement.getBounds();\n//   map.on(\"baselayerchange\", (e) => {\n//     //do whatever\n//     console.log(e.name);\n//     switch (e.name) {\n//       case \"Sello\":\n//         console.log(\"Sello\");\n//         break;\n//       case ({newDesc}):\n//         console.log({newDesc});\n//         break;\n//       default:\n//         return;\n//     }\n//   });\n// }, []);\n\n  useEffect(()=>{\n    debugger;\n  //    const map = editRef.current.leafletElement._map;\n  //  map.on(\"baselayerchange\", (e, f) => {\n  //    debugger;\n\n  // //   //do whatever\n  //    console.log(e.name);\n  //    switch (e.name) {\n  //      case \"Sello\":\n  //       console.log(\"Sello\");\n  //       break;\n  //      case ({newDesc}):\n  //        console.log({newDesc});\n  //       break;\n  //      default:\n  //        return;\n  //    }\n  //  });\n    //var control = LayersControl.activeLayers(baseLayers)\n    service\n    .getBuilding(refno)\n    .then(latlng =>{\n      //console.log(LayersControl.getActiveBaseLayer().name)\n      console.log(\"returning\", latlng)\n      debugger;\n      updateFloor.floorno = latlng[0].floors.length+1;\n      //setMarkers(...markers, latlng)\n      setMarkers(latlng)\n      debugger;\n    })\n  },[])\n  \n  const refno=window.location.pathname.replace('/EditFloorMap/','');\n\n \n\nconst _onCreate = (e) => {\n  console.log(e);\n\n  const { layerType, layer } = e;\n  if (layerType === \"polygon\") {\n    const { _leaflet_id } = layer;\n\n    setMapLayers((layers) => [\n      ...layers,\n      { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\n    ]);\n  }\n};\n\nconst _onEdited = (e) => {\n  console.log(e);\n  const {\n    layers: { _layers },\n  } = e;\n\n  Object.values(_layers).map(({ _leaflet_id, editing }) => {\n    setMapLayers((layers) =>\n      layers.map((l) =>\n        l.id === _leaflet_id\n          ? { ...l, latlngs: { ...editing.latlngs[0] } }\n          : l\n      )\n    );\n  });\n};\n\nconst _onDeleted = (e) => {\n  console.log(e);\n  const {\n    layers: { _layers },\n  } = e;\n\n  Object.values(_layers).map(({ _leaflet_id }) => {\n    setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\n  });\n};\n\nconst changeHandlerDesc = (event) => setNewDesc(event.target.value)\nconst updateIsEdit = (e, value) => setIsEdit(value);\nconst changeHandlerText = (event) => setNewText(event.target.value)\n\n \n\n  return ( \n    \n          <div>\n    \n                   {\n                     \n                   markers.filter(item => item.id===refno).map(filteredName => (\n                        <div>\n                        <Row className=\"row\">\n                        <Col className=\"col-4\">\n                                              \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Building Id</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.id} disabled/>\n                                              </FormGroup>\n                                             \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Building Name</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.description} />\n                                              </FormGroup>\n                                            \n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Street</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.street} />\n                                              </FormGroup>\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Apartment</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.Apartment} />\n                                              </FormGroup>\n\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Doornum</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.doornum} />\n                                              </FormGroup>\n\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Region</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.region} />\n                                              </FormGroup>\n\n                                              <FormGroup className=\"form-group\">\n                                              <Label htmlFor=\"exampleInputReadonly\">Country</Label>\n                                              <Input type=\"text\" className=\"form-control\" id=\"exampleInputReadonly\"\n                                              readOnly=\"\" defaultValue={filteredName.country} />\n\n\n{/* {filteredName.floors.map((floor) => (\n  <div>\n  <h4>Description:</h4>\n  <input onChange={changeHandlerDesc}\n  value={floor.newDesc}\n  /><br/>\n   \n  <button onClick={handleClickFloor}>AddFloor</button>\n\n\n\n\n  {floor.blocks.map((block) => (\n    <div>\n      <h4>Text:</h4>\n      <input onChange={changeHandlerText}\n  value={block.newText}\n  /><br/>\n  <button onClick= {handleClick}>AddPolygon</button><br/>\n  \n\n    </div>\n    \n\n    \n  ))} \n  \n  </div>\n  \n\n))} */}\n\n\n\n\n                                              </FormGroup>\n                                              \n\n                                              </Col>\n                        <Col className=\"col-8\">\n                        <Col lg={4}>\n                        <Button className=\"btn btn-success\" color=\"primary\" onClick={() => toggle(\"addFloor\")}> AddFloor </Button>{' '}\n\n                        {/*Modal*/}\n                        <Modal isOpen={addFloor} toggle={() => toggle(\"addFloor\")} className=\"modal-sm\">\n                        <ModalHeader className=\"btn btn-primary\" toggle={() => toggle(\"addFloor\")}>Add Floor</ModalHeader>\n                        <ModalBody>\n                        \n                          \n                          <p>Floor: {filteredName.floors.length+1}</p>\n                          \n                            <p>Enter Floor Description</p>\n                            <input type=\"text\" onChange={changeHandlerDesc} value={newDesc} onBlur={updateIsEdit}/>\n\n                        </ModalBody>\n                        <ModalFooter>\n\n                        <Button color=\"primary\" onClick={() => {\n                          toggle(\"addFloor\");\n                          // handleAddFloor(); \n                          handleClickFloor();\n                      \n                      }}>OK</Button>{' '}\n                        <Button color=\"secondary\" onClick={() => toggle(\"addFloor\")}>Cancel</Button>\n                        </ModalFooter>\n                        </Modal>\n                                                {/* < ModalTemplate /> */}\n                        {/* <Card className=\"card iq-mb-3\">\n                           \n                            <CardBody className=\"card-body\">\n                                <Button onClick={handleClickFloor} color={\"primary\"}>AddFloor</Button>\n                            </CardBody>\n                            \n                        </Card> */}\n                    </Col>\n                                              <Map \n            center={[filteredName.latitude, filteredName.longitude]} zoom={17} maxZoom={100}\n\n            zoomControl={true}  \n            className={classes.map} \n            ref={editRef}\n            onClick={handleMap}>\n\n\n\n<LayersControl position=\"topright\">\n<LayersControl.BaseLayer checked={true} name={filteredName.name}>\n  \n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n         \n      </LayersControl.BaseLayer>\n      <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n                <FeatureGroup >\n                    <EditControl\n                    ref={editRef}\n                    position='topright'\n                   onCreated={onShapeDrawn}\n                    //onCreated={_onCreate}\n                  onEdited={_onEdited}\n                  onDeleted={_onDeleted}\n                    //here you can specify your shape options and which handler you want to enable\n                    draw={{\n                        rectangle: false,\n                        circle: false,\n                        polyline: false,\n                        circlemarker: false,\n                        marker: false,\n                        polygon: true// {\n                        //     allowIntersection: false,\n                        //     shapeOptions: {\n                        //         color: \"#ff0000\"\n                        //     },\n                        // }\n                    }}\n                    />\n                </FeatureGroup>\n                {filteredName.floors.map((floor, index) => (\n                 \n        <LayersControl.BaseLayer checked={false} name={floor.description}>\n\n        <LayerGroup>\n          <Polygon positions={floor.boundaries} color={floor.color}\n                             />\n{\n  floor.blocks.map((block, ind) => (\n    <Polygon positions={block.bounds}>\n          {/* <Tooltip sticky>        {block.text}</Tooltip> */}\n      {/* <Popup direction=\"center\" >\n        {block.text}\n      </Popup> */\n      \n      <Marker position={block.marker}>\n              <Popup>\n                    <span>{block.text}</span>\n                   \n              </Popup>\n              \n      </Marker>\n\n      }\n    </Polygon> \n                             \n                             \n\n  ))\n}\n\n        </LayerGroup>\n        </LayersControl.BaseLayer>\n             ))}\n              </LayersControl>\n                \n                \n            </Map>\n            <ButtonGroup className=\"btn-group\">\n           <div className={classes.buttonStyle}>\n           \n                <Button \n                className=\"btn btn-primary\"\n                \n                    disabled={filteredName.floors.length>2}\n                    variant=\"contained\"\n                    onClick={onShapeDrawn}>\n                    \n                    {\n                        //display the correct text regarding the state\n                        drawing ? \"Save draw\" : \"Start draw\" \n                    \n                    }\n                </Button>\n                {/* <div className={classes.buttonWrapper}> */}\n\n                <Button\n                \n                className=\"btn btn-primary\"\n                onClick={handleManageBoundaries ()}\n\n                >\n                      Manage Boundaries\n                </Button>\n                 </div> \n                 </ButtonGroup>\n                 \n            {/* </div> */}\n            {/* <div classname={classes.buttonWrapper}>\n              <Button\n                   >Save</Button>\n\n            </div> */}\n            <pre className=\"text-left\">\n\n\n\n              { \n              \n              JSON.stringify(mapLayers, 0, 2)}</pre>\n            \n                             </Col> \n                             \n                             </Row>\n                             \n\n\n\n\n\n                                      </div>\n                                      \n  \n                  ))} \n                  \n                   \n                   </div>)\n}\n\n\nexport default EditFloorMap;\n","/Users/likhitha/Documents/cms/client/src/components/dashboard/history.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/slickSliderStyle1.js",["230","231"],"/Users/likhitha/Documents/cms/client/src/components/dashboard/SlickSliderStyle1.js",[],"/Users/likhitha/Documents/cms/client/src/components/dashboard/ModalTemplate.js",["232","233","234","235","236","237","238"],"import React from 'react';\nimport { Row, Col, Card, div, CardTitle, CardBody, UncontrolledCollapse, Button, ModalHeader, Modal, ModalBody, ModalFooter } from 'reactstrap';\n\n\n\nclass ModalTemplate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modelAddFloorModal: false\n            // model2: false,\n            // model3: false,\n            // model4: false,\n            // model5: false,\n            // model6: false,\n            // model7: false,\n            // model8: false,\n            // model9: false,\n        };\n    }\n\n    // componentDidMount() {\n    //     setTimeout(function () {\n    //         index();\n    //     }, 800);\n    // }\n\n    toggle = (model_id) => {\n        this.setState({\n            [model_id]: !this.state[model_id]\n        });\n    };\n\n    render() {\n\n        return (\n            <>\n                \n\n\n                                {/*Small modal*/}\n                                <Button color=\"primary\" onClick={() => this.toggle(\"modelAddFloorModal\")}> AddFloor </Button>{' '}\n\n                                {/*Modal*/}\n                                <Modal isOpen={this.state.modelAddFloorModal} toggle={() => this.toggle(\"modelAddFloorModal\")} className=\"modal-sm\">\n                                    <ModalHeader toggle={() => this.toggle(\"modelAddFloorModal\")}>Modal title</ModalHeader>\n                                    <ModalBody>\n                                        <p>Modal body text goes here.</p>\n                                    </ModalBody>\n                                    <ModalFooter>\n                                        <Button color=\"primary\" onClick={() => this.toggle(\"modelAddFloorModal\")}>Save changes</Button>{' '}\n                                        <Button color=\"secondary\" onClick={() => this.toggle(\"modelAddFloorModal\")}>Cancel</Button>\n                                    </ModalFooter>\n                                </Modal>\n                            \n            </>\n        );\n    }\n}\n\nexport default ModalTemplate;\n",{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","severity":1,"message":"244","line":5,"column":8,"nodeType":"245","messageId":"246","endLine":5,"endColumn":22},{"ruleId":"243","severity":1,"message":"247","line":9,"column":10,"nodeType":"245","messageId":"246","endLine":9,"endColumn":17},{"ruleId":"243","severity":1,"message":"248","line":9,"column":26,"nodeType":"245","messageId":"246","endLine":9,"endColumn":35},{"ruleId":"243","severity":1,"message":"249","line":11,"column":17,"nodeType":"245","messageId":"246","endLine":11,"endColumn":26},{"ruleId":"243","severity":1,"message":"250","line":11,"column":38,"nodeType":"245","messageId":"246","endLine":11,"endColumn":43},{"ruleId":"243","severity":1,"message":"251","line":11,"column":44,"nodeType":"245","messageId":"246","endLine":11,"endColumn":50},{"ruleId":"243","severity":1,"message":"252","line":14,"column":9,"nodeType":"245","messageId":"246","endLine":14,"endColumn":12},{"ruleId":"243","severity":1,"message":"253","line":14,"column":13,"nodeType":"245","messageId":"246","endLine":14,"endColumn":20},{"ruleId":"243","severity":1,"message":"254","line":14,"column":21,"nodeType":"245","messageId":"246","endLine":14,"endColumn":28},{"ruleId":"243","severity":1,"message":"255","line":14,"column":29,"nodeType":"245","messageId":"246","endLine":14,"endColumn":39},{"ruleId":"243","severity":1,"message":"256","line":14,"column":40,"nodeType":"245","messageId":"246","endLine":14,"endColumn":47},{"ruleId":"243","severity":1,"message":"257","line":15,"column":8,"nodeType":"245","messageId":"246","endLine":15,"endColumn":12},{"ruleId":"243","severity":1,"message":"258","line":16,"column":8,"nodeType":"245","messageId":"246","endLine":16,"endColumn":17},{"ruleId":"243","severity":1,"message":"259","line":17,"column":8,"nodeType":"245","messageId":"246","endLine":17,"endColumn":17},{"ruleId":"243","severity":1,"message":"260","line":19,"column":16,"nodeType":"245","messageId":"246","endLine":19,"endColumn":22},{"ruleId":"243","severity":1,"message":"261","line":20,"column":10,"nodeType":"245","messageId":"246","endLine":20,"endColumn":24},{"ruleId":"243","severity":1,"message":"262","line":22,"column":8,"nodeType":"245","messageId":"246","endLine":22,"endColumn":15},{"ruleId":"243","severity":1,"message":"263","line":31,"column":14,"nodeType":"245","messageId":"246","endLine":31,"endColumn":23},{"ruleId":"243","severity":1,"message":"264","line":31,"column":25,"nodeType":"245","messageId":"246","endLine":31,"endColumn":37},{"ruleId":"243","severity":1,"message":"265","line":32,"column":15,"nodeType":"245","messageId":"246","endLine":32,"endColumn":24},{"ruleId":"243","severity":1,"message":"266","line":32,"column":26,"nodeType":"245","messageId":"246","endLine":32,"endColumn":38},{"ruleId":"243","severity":1,"message":"267","line":50,"column":13,"nodeType":"245","messageId":"246","endLine":50,"endColumn":17},{"ruleId":"243","severity":1,"message":"268","line":63,"column":13,"nodeType":"245","messageId":"246","endLine":63,"endColumn":15},{"ruleId":"243","severity":1,"message":"269","line":69,"column":13,"nodeType":"245","messageId":"246","endLine":69,"endColumn":15},{"ruleId":"243","severity":1,"message":"270","line":79,"column":13,"nodeType":"245","messageId":"246","endLine":79,"endColumn":21},{"ruleId":"243","severity":1,"message":"271","line":85,"column":13,"nodeType":"245","messageId":"246","endLine":85,"endColumn":20},{"ruleId":"243","severity":1,"message":"272","line":91,"column":9,"nodeType":"245","messageId":"246","endLine":91,"endColumn":22},{"ruleId":"243","severity":1,"message":"273","line":92,"column":9,"nodeType":"245","messageId":"246","endLine":92,"endColumn":23},{"ruleId":"243","severity":1,"message":"274","line":93,"column":9,"nodeType":"245","messageId":"246","endLine":93,"endColumn":23},{"ruleId":"243","severity":1,"message":"275","line":99,"column":15,"nodeType":"245","messageId":"246","endLine":99,"endColumn":24},{"ruleId":"243","severity":1,"message":"276","line":102,"column":13,"nodeType":"245","messageId":"246","endLine":102,"endColumn":26},{"ruleId":"243","severity":1,"message":"277","line":107,"column":17,"nodeType":"245","messageId":"246","endLine":107,"endColumn":27},{"ruleId":"278","severity":1,"message":"279","line":142,"column":6,"nodeType":"280","endLine":142,"endColumn":18,"suggestions":"281"},{"ruleId":"243","severity":1,"message":"282","line":169,"column":7,"nodeType":"245","messageId":"246","endLine":169,"endColumn":19},{"ruleId":"243","severity":1,"message":"283","line":189,"column":11,"nodeType":"245","messageId":"246","endLine":189,"endColumn":22},{"ruleId":"243","severity":1,"message":"284","line":193,"column":11,"nodeType":"245","messageId":"246","endLine":193,"endColumn":19},{"ruleId":"243","severity":1,"message":"285","line":204,"column":9,"nodeType":"245","messageId":"246","endLine":204,"endColumn":20},{"ruleId":"243","severity":1,"message":"286","line":6,"column":8,"nodeType":"245","messageId":"246","endLine":6,"endColumn":12},{"ruleId":"243","severity":1,"message":"287","line":7,"column":10,"nodeType":"245","messageId":"246","endLine":7,"endColumn":14},{"ruleId":"243","severity":1,"message":"288","line":9,"column":27,"nodeType":"245","messageId":"246","endLine":9,"endColumn":33},{"ruleId":"243","severity":1,"message":"289","line":9,"column":35,"nodeType":"245","messageId":"246","endLine":9,"endColumn":40},{"ruleId":"290","severity":1,"message":"291","line":39,"column":1,"nodeType":"292","endLine":39,"endColumn":82},{"ruleId":"243","severity":1,"message":"293","line":26,"column":9,"nodeType":"245","messageId":"246","endLine":26,"endColumn":12},{"ruleId":"243","severity":1,"message":"294","line":26,"column":14,"nodeType":"245","messageId":"246","endLine":26,"endColumn":17},{"ruleId":"243","severity":1,"message":"295","line":26,"column":26,"nodeType":"245","messageId":"246","endLine":26,"endColumn":30},{"ruleId":"243","severity":1,"message":"296","line":26,"column":32,"nodeType":"245","messageId":"246","endLine":26,"endColumn":40},{"ruleId":"243","severity":1,"message":"297","line":27,"column":10,"nodeType":"245","messageId":"246","endLine":27,"endColumn":14},{"ruleId":"243","severity":1,"message":"298","line":27,"column":17,"nodeType":"245","messageId":"246","endLine":27,"endColumn":31},{"ruleId":"243","severity":1,"message":"299","line":27,"column":33,"nodeType":"245","messageId":"246","endLine":27,"endColumn":48},{"ruleId":"243","severity":1,"message":"300","line":27,"column":50,"nodeType":"245","messageId":"246","endLine":27,"endColumn":72},{"ruleId":"243","severity":1,"message":"301","line":29,"column":7,"nodeType":"245","messageId":"246","endLine":29,"endColumn":15},{"ruleId":"302","severity":1,"message":"303","line":96,"column":75,"nodeType":"304","messageId":"305","endLine":96,"endColumn":76,"suggestions":"306"},{"ruleId":"278","severity":1,"message":"307","line":118,"column":5,"nodeType":"280","endLine":118,"endColumn":7,"suggestions":"308"},{"ruleId":"243","severity":1,"message":"309","line":4,"column":25,"nodeType":"245","messageId":"246","endLine":4,"endColumn":36},{"ruleId":"243","severity":1,"message":"251","line":4,"column":38,"nodeType":"245","messageId":"246","endLine":4,"endColumn":44},{"ruleId":"243","severity":1,"message":"310","line":4,"column":45,"nodeType":"245","messageId":"246","endLine":4,"endColumn":58},{"ruleId":"243","severity":1,"message":"311","line":4,"column":60,"nodeType":"245","messageId":"246","endLine":4,"endColumn":65},{"ruleId":"243","severity":1,"message":"312","line":7,"column":10,"nodeType":"245","messageId":"246","endLine":7,"endColumn":17},{"ruleId":"243","severity":1,"message":"248","line":7,"column":35,"nodeType":"245","messageId":"246","endLine":7,"endColumn":44},{"ruleId":"243","severity":1,"message":"286","line":9,"column":8,"nodeType":"245","messageId":"246","endLine":9,"endColumn":12},{"ruleId":"243","severity":1,"message":"287","line":10,"column":10,"nodeType":"245","messageId":"246","endLine":10,"endColumn":14},{"ruleId":"243","severity":1,"message":"313","line":11,"column":8,"nodeType":"245","messageId":"246","endLine":11,"endColumn":25},{"ruleId":"243","severity":1,"message":"283","line":34,"column":12,"nodeType":"245","messageId":"246","endLine":34,"endColumn":23},{"ruleId":"243","severity":1,"message":"314","line":1,"column":17,"nodeType":"245","messageId":"246","endLine":1,"endColumn":25},{"ruleId":"243","severity":1,"message":"315","line":1,"column":27,"nodeType":"245","messageId":"246","endLine":1,"endColumn":36},{"ruleId":"243","severity":1,"message":"286","line":4,"column":8,"nodeType":"245","messageId":"246","endLine":4,"endColumn":12},{"ruleId":"243","severity":1,"message":"316","line":8,"column":8,"nodeType":"245","messageId":"246","endLine":8,"endColumn":13},{"ruleId":"243","severity":1,"message":"244","line":9,"column":8,"nodeType":"245","messageId":"246","endLine":9,"endColumn":22},{"ruleId":"243","severity":1,"message":"317","line":10,"column":10,"nodeType":"245","messageId":"246","endLine":10,"endColumn":13},{"ruleId":"243","severity":1,"message":"318","line":10,"column":15,"nodeType":"245","messageId":"246","endLine":10,"endColumn":27},{"ruleId":"243","severity":1,"message":"319","line":10,"column":29,"nodeType":"245","messageId":"246","endLine":10,"endColumn":34},{"ruleId":"243","severity":1,"message":"320","line":10,"column":36,"nodeType":"245","messageId":"246","endLine":10,"endColumn":42},{"ruleId":"243","severity":1,"message":"321","line":10,"column":44,"nodeType":"245","messageId":"246","endLine":10,"endColumn":53},{"ruleId":"243","severity":1,"message":"312","line":10,"column":54,"nodeType":"245","messageId":"246","endLine":10,"endColumn":61},{"ruleId":"243","severity":1,"message":"322","line":10,"column":62,"nodeType":"245","messageId":"246","endLine":10,"endColumn":73},{"ruleId":"243","severity":1,"message":"247","line":10,"column":75,"nodeType":"245","messageId":"246","endLine":10,"endColumn":82},{"ruleId":"243","severity":1,"message":"323","line":29,"column":23,"nodeType":"245","messageId":"246","endLine":29,"endColumn":28},{"ruleId":"243","severity":1,"message":"296","line":4,"column":11,"nodeType":"245","messageId":"246","endLine":4,"endColumn":19},{"ruleId":"243","severity":1,"message":"295","line":4,"column":20,"nodeType":"245","messageId":"246","endLine":4,"endColumn":24},{"ruleId":"243","severity":1,"message":"310","line":4,"column":38,"nodeType":"245","messageId":"246","endLine":4,"endColumn":51},{"ruleId":"243","severity":1,"message":"324","line":4,"column":52,"nodeType":"245","messageId":"246","endLine":4,"endColumn":56},{"ruleId":"243","severity":1,"message":"325","line":10,"column":9,"nodeType":"245","messageId":"246","endLine":10,"endColumn":10},{"ruleId":"243","severity":1,"message":"326","line":13,"column":8,"nodeType":"245","messageId":"246","endLine":13,"endColumn":21},{"ruleId":"243","severity":1,"message":"327","line":14,"column":48,"nodeType":"245","messageId":"246","endLine":14,"endColumn":56},{"ruleId":"243","severity":1,"message":"248","line":14,"column":74,"nodeType":"245","messageId":"246","endLine":14,"endColumn":83},{"ruleId":"243","severity":1,"message":"328","line":14,"column":112,"nodeType":"245","messageId":"246","endLine":14,"endColumn":124},{"ruleId":"243","severity":1,"message":"329","line":54,"column":10,"nodeType":"245","messageId":"246","endLine":54,"endColumn":21},{"ruleId":"243","severity":1,"message":"330","line":54,"column":23,"nodeType":"245","messageId":"246","endLine":54,"endColumn":37},{"ruleId":"243","severity":1,"message":"331","line":56,"column":10,"nodeType":"245","messageId":"246","endLine":56,"endColumn":18},{"ruleId":"243","severity":1,"message":"332","line":56,"column":20,"nodeType":"245","messageId":"246","endLine":56,"endColumn":31},{"ruleId":"243","severity":1,"message":"333","line":59,"column":10,"nodeType":"245","messageId":"246","endLine":59,"endColumn":16},{"ruleId":"243","severity":1,"message":"334","line":60,"column":10,"nodeType":"245","messageId":"246","endLine":60,"endColumn":16},{"ruleId":"243","severity":1,"message":"335","line":60,"column":18,"nodeType":"245","messageId":"246","endLine":60,"endColumn":27},{"ruleId":"243","severity":1,"message":"336","line":61,"column":10,"nodeType":"245","messageId":"246","endLine":61,"endColumn":16},{"ruleId":"243","severity":1,"message":"337","line":61,"column":18,"nodeType":"245","messageId":"246","endLine":61,"endColumn":27},{"ruleId":"243","severity":1,"message":"338","line":62,"column":10,"nodeType":"245","messageId":"246","endLine":62,"endColumn":17},{"ruleId":"243","severity":1,"message":"339","line":64,"column":10,"nodeType":"245","messageId":"246","endLine":64,"endColumn":23},{"ruleId":"243","severity":1,"message":"340","line":64,"column":25,"nodeType":"245","messageId":"246","endLine":64,"endColumn":41},{"ruleId":"243","severity":1,"message":"283","line":155,"column":9,"nodeType":"245","messageId":"246","endLine":155,"endColumn":20},{"ruleId":"243","severity":1,"message":"341","line":169,"column":7,"nodeType":"245","messageId":"246","endLine":169,"endColumn":21},{"ruleId":"243","severity":1,"message":"342","line":222,"column":7,"nodeType":"245","messageId":"246","endLine":222,"endColumn":20},{"ruleId":"243","severity":1,"message":"343","line":227,"column":13,"nodeType":"245","messageId":"246","endLine":227,"endColumn":24},{"ruleId":"243","severity":1,"message":"344","line":292,"column":7,"nodeType":"245","messageId":"246","endLine":292,"endColumn":17},{"ruleId":"243","severity":1,"message":"343","line":297,"column":13,"nodeType":"245","messageId":"246","endLine":297,"endColumn":24},{"ruleId":"278","severity":1,"message":"345","line":460,"column":5,"nodeType":"280","endLine":460,"endColumn":7,"suggestions":"346"},{"ruleId":"243","severity":1,"message":"347","line":466,"column":7,"nodeType":"245","messageId":"246","endLine":466,"endColumn":16},{"ruleId":"348","severity":1,"message":"349","line":486,"column":57,"nodeType":"350","messageId":"351","endLine":486,"endColumn":59},{"ruleId":"348","severity":1,"message":"349","line":503,"column":48,"nodeType":"350","messageId":"351","endLine":503,"endColumn":50},{"ruleId":"243","severity":1,"message":"352","line":510,"column":7,"nodeType":"245","messageId":"246","endLine":510,"endColumn":24},{"ruleId":"243","severity":1,"message":"353","line":20,"column":7,"nodeType":"245","messageId":"246","endLine":20,"endColumn":12},{"ruleId":"354","severity":2,"message":"355","line":57,"column":16,"nodeType":"245","messageId":"356","endLine":57,"endColumn":33},{"ruleId":"243","severity":1,"message":"293","line":2,"column":10,"nodeType":"245","messageId":"246","endLine":2,"endColumn":13},{"ruleId":"243","severity":1,"message":"294","line":2,"column":15,"nodeType":"245","messageId":"246","endLine":2,"endColumn":18},{"ruleId":"243","severity":1,"message":"295","line":2,"column":20,"nodeType":"245","messageId":"246","endLine":2,"endColumn":24},{"ruleId":"243","severity":1,"message":"357","line":2,"column":26,"nodeType":"245","messageId":"246","endLine":2,"endColumn":29},{"ruleId":"243","severity":1,"message":"358","line":2,"column":31,"nodeType":"245","messageId":"246","endLine":2,"endColumn":40},{"ruleId":"243","severity":1,"message":"296","line":2,"column":42,"nodeType":"245","messageId":"246","endLine":2,"endColumn":50},{"ruleId":"243","severity":1,"message":"359","line":2,"column":52,"nodeType":"245","messageId":"246","endLine":2,"endColumn":72},"no-native-reassign",["360"],"no-negated-in-lhs",["361"],"no-unused-vars","'DisplayEntries' is defined but never used.","Identifier","unusedVar","'Polygon' is defined but never used.","'Rectangle' is defined but never used.","'Container' is defined but never used.","'PopUp' is defined but never used.","'Button' is defined but never used.","'Nav' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'Tabs' is defined but never used.","'PropTypes' is defined but never used.","'DashBoard' is defined but never used.","'marker' is defined but never used.","'SelectionState' is defined but never used.","'history' is defined but never used.","'newFilter' is assigned a value but never used.","'setNewFilter' is assigned a value but never used.","'buttonVal' is assigned a value but never used.","'setButtonVal' is assigned a value but never used.","'kids' is assigned a value but never used.","'tv' is assigned a value but never used.","'wc' is assigned a value but never used.","'Corridar' is assigned a value but never used.","'Kitchen' is assigned a value but never used.","'changeHandler' is assigned a value but never used.","'changeHandler1' is assigned a value but never used.","'changeHandler2' is assigned a value but never used.","'position1' is assigned a value but never used.","'submitHandler' is assigned a value but never used.","'allMarkers' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'markers'. Either include it or remove the dependency array.","ArrayExpression",["362"],"'handleUpdate' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'building' is assigned a value but never used.","'togglePopup' is assigned a value but never used.","'Map1' is defined but never used.","'Link' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'Grid' is defined but never used.","'TableHeaderRow' is defined but never used.","'TableEditColumn' is defined but never used.","'TableInlineCellEditing' is defined but never used.","'getRowId' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\'.","TemplateElement","unnecessaryEscape",["363","364"],"React Hook useEffect has missing dependencies: 'deleteHandler' and 'id'. Either include them or remove the dependency array. If 'setButtonVal' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["365"],"'ButtonGroup' is defined but never used.","'ButtonToolbar' is defined but never used.","'Label' is defined but never used.","'Tooltip' is defined but never used.","'SlickSliderStyle1' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'Map' is defined but never used.","'CircleMarker' is defined but never used.","'Popup' is defined but never used.","'Marker' is defined but never used.","'TileLayer' is defined but never used.","'ZoomControl' is defined but never used.","'users' is assigned a value but never used.","'Form' is defined but never used.","'L' is defined but never used.","'ModalTemplate' is defined but never used.","'Polyline' is defined but never used.","'useMapEvents' is defined but never used.","'newPosition' is assigned a value but never used.","'setNewPosition' is assigned a value but never used.","'position' is assigned a value but never used.","'setPosition' is assigned a value but never used.","'isEdit' is assigned a value but never used.","'floors' is assigned a value but never used.","'setFloors' is assigned a value but never used.","'blocks' is assigned a value but never used.","'setBlocks' is assigned a value but never used.","'newText' is assigned a value but never used.","'showDrawBlock' is assigned a value but never used.","'setShowDrawBlock' is assigned a value but never used.","'handleAddFloor' is assigned a value but never used.","'addBoundaries' is assigned a value but never used.","'_leaflet_id' is assigned a value but never used.","'addPolygon' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'refno' and 'updateFloor'. Either include them or remove the dependency array.",["366"],"'_onCreate' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'changeHandlerText' is assigned a value but never used.","'Index' is defined but never used.","no-undef","'slickSliderStyle1' is not defined.","undef","'div' is defined but never used.","'CardTitle' is defined but never used.","'UncontrolledCollapse' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"367","fix":"368"},{"messageId":"369","fix":"370","desc":"371"},{"messageId":"372","fix":"373","desc":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},"Update the dependencies array to be: [markers, searchTerm]",{"range":"379","text":"380"},"removeEscape",{"range":"381","text":"382"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"383","text":"384"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [deleteHandler, id]",{"range":"385","text":"386"},"Update the dependencies array to be: [refno, updateFloor]",{"range":"387","text":"388"},[3705,3717],"[markers, searchTerm]",[2874,2875],"",[2874,2874],"\\",[3371,3373],"[deleteHandler, id]",[10805,10807],"[refno, updateFloor]"]